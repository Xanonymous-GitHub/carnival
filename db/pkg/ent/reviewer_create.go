// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/reviewer"
)

// ReviewerCreate is the builder for creating a Reviewer entity.
type ReviewerCreate struct {
	config
	mutation *ReviewerMutation
	hooks    []Hook
}

// SetReviewerName sets the "reviewer_name" field.
func (rc *ReviewerCreate) SetReviewerName(s string) *ReviewerCreate {
	rc.mutation.SetReviewerName(s)
	return rc
}

// SetIimsRole sets the "iims_role" field.
func (rc *ReviewerCreate) SetIimsRole(rr reviewer.IimsRole) *ReviewerCreate {
	rc.mutation.SetIimsRole(rr)
	return rc
}

// SetCreatedDtime sets the "created_dtime" field.
func (rc *ReviewerCreate) SetCreatedDtime(t time.Time) *ReviewerCreate {
	rc.mutation.SetCreatedDtime(t)
	return rc
}

// SetNillableCreatedDtime sets the "created_dtime" field if the given value is not nil.
func (rc *ReviewerCreate) SetNillableCreatedDtime(t *time.Time) *ReviewerCreate {
	if t != nil {
		rc.SetCreatedDtime(*t)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *ReviewerCreate) SetID(s string) *ReviewerCreate {
	rc.mutation.SetID(s)
	return rc
}

// Mutation returns the ReviewerMutation object of the builder.
func (rc *ReviewerCreate) Mutation() *ReviewerMutation {
	return rc.mutation
}

// Save creates the Reviewer in the database.
func (rc *ReviewerCreate) Save(ctx context.Context) (*Reviewer, error) {
	var (
		err  error
		node *Reviewer
	)
	rc.defaults()
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReviewerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReviewerCreate) SaveX(ctx context.Context) *Reviewer {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReviewerCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReviewerCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ReviewerCreate) defaults() {
	if _, ok := rc.mutation.CreatedDtime(); !ok {
		v := reviewer.DefaultCreatedDtime()
		rc.mutation.SetCreatedDtime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReviewerCreate) check() error {
	if _, ok := rc.mutation.ReviewerName(); !ok {
		return &ValidationError{Name: "reviewer_name", err: errors.New(`ent: missing required field "Reviewer.reviewer_name"`)}
	}
	if v, ok := rc.mutation.ReviewerName(); ok {
		if err := reviewer.ReviewerNameValidator(v); err != nil {
			return &ValidationError{Name: "reviewer_name", err: fmt.Errorf(`ent: validator failed for field "Reviewer.reviewer_name": %w`, err)}
		}
	}
	if _, ok := rc.mutation.IimsRole(); !ok {
		return &ValidationError{Name: "iims_role", err: errors.New(`ent: missing required field "Reviewer.iims_role"`)}
	}
	if v, ok := rc.mutation.IimsRole(); ok {
		if err := reviewer.IimsRoleValidator(v); err != nil {
			return &ValidationError{Name: "iims_role", err: fmt.Errorf(`ent: validator failed for field "Reviewer.iims_role": %w`, err)}
		}
	}
	if _, ok := rc.mutation.CreatedDtime(); !ok {
		return &ValidationError{Name: "created_dtime", err: errors.New(`ent: missing required field "Reviewer.created_dtime"`)}
	}
	if v, ok := rc.mutation.ID(); ok {
		if err := reviewer.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Reviewer.id": %w`, err)}
		}
	}
	return nil
}

func (rc *ReviewerCreate) sqlSave(ctx context.Context) (*Reviewer, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Reviewer.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (rc *ReviewerCreate) createSpec() (*Reviewer, *sqlgraph.CreateSpec) {
	var (
		_node = &Reviewer{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: reviewer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: reviewer.FieldID,
			},
		}
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.ReviewerName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reviewer.FieldReviewerName,
		})
		_node.ReviewerName = value
	}
	if value, ok := rc.mutation.IimsRole(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: reviewer.FieldIimsRole,
		})
		_node.IimsRole = value
	}
	if value, ok := rc.mutation.CreatedDtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reviewer.FieldCreatedDtime,
		})
		_node.CreatedDtime = value
	}
	return _node, _spec
}

// ReviewerCreateBulk is the builder for creating many Reviewer entities in bulk.
type ReviewerCreateBulk struct {
	config
	builders []*ReviewerCreate
}

// Save creates the Reviewer entities in the database.
func (rcb *ReviewerCreateBulk) Save(ctx context.Context) ([]*Reviewer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Reviewer, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReviewerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReviewerCreateBulk) SaveX(ctx context.Context) []*Reviewer {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReviewerCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReviewerCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
