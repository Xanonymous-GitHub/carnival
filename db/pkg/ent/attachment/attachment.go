// Code generated by entc, DO NOT EDIT.

package attachment

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the attachment type in the database.
	Label = "attachment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldApplicationID holds the string denoting the application_id field in the database.
	FieldApplicationID = "application_id"
	// FieldTicketID holds the string denoting the ticket_id field in the database.
	FieldTicketID = "ticket_id"
	// FieldAttachmentType holds the string denoting the attachment_type field in the database.
	FieldAttachmentType = "attachment_type"
	// FieldObsOid holds the string denoting the obs_oid field in the database.
	FieldObsOid = "obs_oid"
	// FieldObsHash holds the string denoting the obs_hash field in the database.
	FieldObsHash = "obs_hash"
	// FieldCreatedDtime holds the string denoting the created_dtime field in the database.
	FieldCreatedDtime = "created_dtime"
	// EdgeApplications holds the string denoting the applications edge name in mutations.
	EdgeApplications = "applications"
	// EdgeTickets holds the string denoting the tickets edge name in mutations.
	EdgeTickets = "tickets"
	// ApplicationFieldID holds the string denoting the ID field of the Application.
	ApplicationFieldID = "application_id"
	// TicketFieldID holds the string denoting the ID field of the Ticket.
	TicketFieldID = "ticket_id"
	// Table holds the table name of the attachment in the database.
	Table = "attachments"
	// ApplicationsTable is the table that holds the applications relation/edge.
	ApplicationsTable = "attachments"
	// ApplicationsInverseTable is the table name for the Application entity.
	// It exists in this package in order to avoid circular dependency with the "application" package.
	ApplicationsInverseTable = "applications"
	// ApplicationsColumn is the table column denoting the applications relation/edge.
	ApplicationsColumn = "application_id"
	// TicketsTable is the table that holds the tickets relation/edge.
	TicketsTable = "attachments"
	// TicketsInverseTable is the table name for the Ticket entity.
	// It exists in this package in order to avoid circular dependency with the "ticket" package.
	TicketsInverseTable = "tickets"
	// TicketsColumn is the table column denoting the tickets relation/edge.
	TicketsColumn = "ticket_id"
)

// Columns holds all SQL columns for attachment fields.
var Columns = []string{
	FieldID,
	FieldApplicationID,
	FieldTicketID,
	FieldAttachmentType,
	FieldObsOid,
	FieldObsHash,
	FieldCreatedDtime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ObsOidValidator is a validator for the "obs_oid" field. It is called by the builders before save.
	ObsOidValidator func(string) error
	// ObsHashValidator is a validator for the "obs_hash" field. It is called by the builders before save.
	ObsHashValidator func(string) error
	// DefaultCreatedDtime holds the default value on creation for the "created_dtime" field.
	DefaultCreatedDtime func() time.Time
)

// AttachmentType defines the type for the "attachment_type" enum field.
type AttachmentType string

// AttachmentType values.
const (
	AttachmentTypeBizCert         AttachmentType = "biz_cert"
	AttachmentTypeStoreAppearance AttachmentType = "store_appearance"
	AttachmentTypeIDDocument      AttachmentType = "id_document"
	AttachmentTypeOther           AttachmentType = "other"
	AttachmentTypeSupplement      AttachmentType = "supplement"
	AttachmentTypeReference       AttachmentType = "reference"
)

func (at AttachmentType) String() string {
	return string(at)
}

// AttachmentTypeValidator is a validator for the "attachment_type" field enum values. It is called by the builders before save.
func AttachmentTypeValidator(at AttachmentType) error {
	switch at {
	case AttachmentTypeBizCert, AttachmentTypeStoreAppearance, AttachmentTypeIDDocument, AttachmentTypeOther, AttachmentTypeSupplement, AttachmentTypeReference:
		return nil
	default:
		return fmt.Errorf("attachment: invalid enum value for attachment_type field: %q", at)
	}
}
