// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/application"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/attachment"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/predicate"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/ticket"
	"github.com/google/uuid"
)

// TicketUpdate is the builder for updating Ticket entities.
type TicketUpdate struct {
	config
	hooks    []Hook
	mutation *TicketMutation
}

// Where appends a list predicates to the TicketUpdate builder.
func (tu *TicketUpdate) Where(ps ...predicate.Ticket) *TicketUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetApplicationID sets the "application_id" field.
func (tu *TicketUpdate) SetApplicationID(u uuid.UUID) *TicketUpdate {
	tu.mutation.SetApplicationID(u)
	return tu
}

// SetStatus sets the "status" field.
func (tu *TicketUpdate) SetStatus(t ticket.Status) *TicketUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetCreator sets the "creator" field.
func (tu *TicketUpdate) SetCreator(s string) *TicketUpdate {
	tu.mutation.SetCreator(s)
	return tu
}

// SetContent sets the "content" field.
func (tu *TicketUpdate) SetContent(s string) *TicketUpdate {
	tu.mutation.SetContent(s)
	return tu
}

// SetReply sets the "reply" field.
func (tu *TicketUpdate) SetReply(s string) *TicketUpdate {
	tu.mutation.SetReply(s)
	return tu
}

// SetReplier sets the "replier" field.
func (tu *TicketUpdate) SetReplier(s string) *TicketUpdate {
	tu.mutation.SetReplier(s)
	return tu
}

// SetReviewer sets the "reviewer" field.
func (tu *TicketUpdate) SetReviewer(s string) *TicketUpdate {
	tu.mutation.SetReviewer(s)
	return tu
}

// SetReviewRemark sets the "review_remark" field.
func (tu *TicketUpdate) SetReviewRemark(s string) *TicketUpdate {
	tu.mutation.SetReviewRemark(s)
	return tu
}

// SetRepliedDtime sets the "replied_dtime" field.
func (tu *TicketUpdate) SetRepliedDtime(t time.Time) *TicketUpdate {
	tu.mutation.SetRepliedDtime(t)
	return tu
}

// SetReviewedDtime sets the "reviewed_dtime" field.
func (tu *TicketUpdate) SetReviewedDtime(t time.Time) *TicketUpdate {
	tu.mutation.SetReviewedDtime(t)
	return tu
}

// SetUpdatedDtime sets the "updated_dtime" field.
func (tu *TicketUpdate) SetUpdatedDtime(t time.Time) *TicketUpdate {
	tu.mutation.SetUpdatedDtime(t)
	return tu
}

// SetApplicationsID sets the "applications" edge to the Application entity by ID.
func (tu *TicketUpdate) SetApplicationsID(id uuid.UUID) *TicketUpdate {
	tu.mutation.SetApplicationsID(id)
	return tu
}

// SetApplications sets the "applications" edge to the Application entity.
func (tu *TicketUpdate) SetApplications(a *Application) *TicketUpdate {
	return tu.SetApplicationsID(a.ID)
}

// AddAttachmentIDs adds the "attachments" edge to the Attachment entity by IDs.
func (tu *TicketUpdate) AddAttachmentIDs(ids ...int) *TicketUpdate {
	tu.mutation.AddAttachmentIDs(ids...)
	return tu
}

// AddAttachments adds the "attachments" edges to the Attachment entity.
func (tu *TicketUpdate) AddAttachments(a ...*Attachment) *TicketUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.AddAttachmentIDs(ids...)
}

// Mutation returns the TicketMutation object of the builder.
func (tu *TicketUpdate) Mutation() *TicketMutation {
	return tu.mutation
}

// ClearApplications clears the "applications" edge to the Application entity.
func (tu *TicketUpdate) ClearApplications() *TicketUpdate {
	tu.mutation.ClearApplications()
	return tu
}

// ClearAttachments clears all "attachments" edges to the Attachment entity.
func (tu *TicketUpdate) ClearAttachments() *TicketUpdate {
	tu.mutation.ClearAttachments()
	return tu
}

// RemoveAttachmentIDs removes the "attachments" edge to Attachment entities by IDs.
func (tu *TicketUpdate) RemoveAttachmentIDs(ids ...int) *TicketUpdate {
	tu.mutation.RemoveAttachmentIDs(ids...)
	return tu
}

// RemoveAttachments removes "attachments" edges to Attachment entities.
func (tu *TicketUpdate) RemoveAttachments(a ...*Attachment) *TicketUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.RemoveAttachmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TicketUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TicketMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TicketUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TicketUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TicketUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TicketUpdate) check() error {
	if v, ok := tu.mutation.Status(); ok {
		if err := ticket.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Ticket.status": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Creator(); ok {
		if err := ticket.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`ent: validator failed for field "Ticket.creator": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Replier(); ok {
		if err := ticket.ReplierValidator(v); err != nil {
			return &ValidationError{Name: "replier", err: fmt.Errorf(`ent: validator failed for field "Ticket.replier": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Reviewer(); ok {
		if err := ticket.ReviewerValidator(v); err != nil {
			return &ValidationError{Name: "reviewer", err: fmt.Errorf(`ent: validator failed for field "Ticket.reviewer": %w`, err)}
		}
	}
	if _, ok := tu.mutation.ApplicationsID(); tu.mutation.ApplicationsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Ticket.applications"`)
	}
	return nil
}

func (tu *TicketUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ticket.Table,
			Columns: ticket.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ticket.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: ticket.FieldStatus,
		})
	}
	if value, ok := tu.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticket.FieldCreator,
		})
	}
	if value, ok := tu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticket.FieldContent,
		})
	}
	if value, ok := tu.mutation.Reply(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticket.FieldReply,
		})
	}
	if value, ok := tu.mutation.Replier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticket.FieldReplier,
		})
	}
	if value, ok := tu.mutation.Reviewer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticket.FieldReviewer,
		})
	}
	if value, ok := tu.mutation.ReviewRemark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticket.FieldReviewRemark,
		})
	}
	if value, ok := tu.mutation.RepliedDtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ticket.FieldRepliedDtime,
		})
	}
	if value, ok := tu.mutation.ReviewedDtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ticket.FieldReviewedDtime,
		})
	}
	if value, ok := tu.mutation.UpdatedDtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ticket.FieldUpdatedDtime,
		})
	}
	if tu.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.ApplicationsTable,
			Columns: []string{ticket.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: application.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.ApplicationsTable,
			Columns: []string{ticket.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: application.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.AttachmentsTable,
			Columns: []string{ticket.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedAttachmentsIDs(); len(nodes) > 0 && !tu.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.AttachmentsTable,
			Columns: []string{ticket.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.AttachmentsTable,
			Columns: []string{ticket.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TicketUpdateOne is the builder for updating a single Ticket entity.
type TicketUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TicketMutation
}

// SetApplicationID sets the "application_id" field.
func (tuo *TicketUpdateOne) SetApplicationID(u uuid.UUID) *TicketUpdateOne {
	tuo.mutation.SetApplicationID(u)
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TicketUpdateOne) SetStatus(t ticket.Status) *TicketUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetCreator sets the "creator" field.
func (tuo *TicketUpdateOne) SetCreator(s string) *TicketUpdateOne {
	tuo.mutation.SetCreator(s)
	return tuo
}

// SetContent sets the "content" field.
func (tuo *TicketUpdateOne) SetContent(s string) *TicketUpdateOne {
	tuo.mutation.SetContent(s)
	return tuo
}

// SetReply sets the "reply" field.
func (tuo *TicketUpdateOne) SetReply(s string) *TicketUpdateOne {
	tuo.mutation.SetReply(s)
	return tuo
}

// SetReplier sets the "replier" field.
func (tuo *TicketUpdateOne) SetReplier(s string) *TicketUpdateOne {
	tuo.mutation.SetReplier(s)
	return tuo
}

// SetReviewer sets the "reviewer" field.
func (tuo *TicketUpdateOne) SetReviewer(s string) *TicketUpdateOne {
	tuo.mutation.SetReviewer(s)
	return tuo
}

// SetReviewRemark sets the "review_remark" field.
func (tuo *TicketUpdateOne) SetReviewRemark(s string) *TicketUpdateOne {
	tuo.mutation.SetReviewRemark(s)
	return tuo
}

// SetRepliedDtime sets the "replied_dtime" field.
func (tuo *TicketUpdateOne) SetRepliedDtime(t time.Time) *TicketUpdateOne {
	tuo.mutation.SetRepliedDtime(t)
	return tuo
}

// SetReviewedDtime sets the "reviewed_dtime" field.
func (tuo *TicketUpdateOne) SetReviewedDtime(t time.Time) *TicketUpdateOne {
	tuo.mutation.SetReviewedDtime(t)
	return tuo
}

// SetUpdatedDtime sets the "updated_dtime" field.
func (tuo *TicketUpdateOne) SetUpdatedDtime(t time.Time) *TicketUpdateOne {
	tuo.mutation.SetUpdatedDtime(t)
	return tuo
}

// SetApplicationsID sets the "applications" edge to the Application entity by ID.
func (tuo *TicketUpdateOne) SetApplicationsID(id uuid.UUID) *TicketUpdateOne {
	tuo.mutation.SetApplicationsID(id)
	return tuo
}

// SetApplications sets the "applications" edge to the Application entity.
func (tuo *TicketUpdateOne) SetApplications(a *Application) *TicketUpdateOne {
	return tuo.SetApplicationsID(a.ID)
}

// AddAttachmentIDs adds the "attachments" edge to the Attachment entity by IDs.
func (tuo *TicketUpdateOne) AddAttachmentIDs(ids ...int) *TicketUpdateOne {
	tuo.mutation.AddAttachmentIDs(ids...)
	return tuo
}

// AddAttachments adds the "attachments" edges to the Attachment entity.
func (tuo *TicketUpdateOne) AddAttachments(a ...*Attachment) *TicketUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.AddAttachmentIDs(ids...)
}

// Mutation returns the TicketMutation object of the builder.
func (tuo *TicketUpdateOne) Mutation() *TicketMutation {
	return tuo.mutation
}

// ClearApplications clears the "applications" edge to the Application entity.
func (tuo *TicketUpdateOne) ClearApplications() *TicketUpdateOne {
	tuo.mutation.ClearApplications()
	return tuo
}

// ClearAttachments clears all "attachments" edges to the Attachment entity.
func (tuo *TicketUpdateOne) ClearAttachments() *TicketUpdateOne {
	tuo.mutation.ClearAttachments()
	return tuo
}

// RemoveAttachmentIDs removes the "attachments" edge to Attachment entities by IDs.
func (tuo *TicketUpdateOne) RemoveAttachmentIDs(ids ...int) *TicketUpdateOne {
	tuo.mutation.RemoveAttachmentIDs(ids...)
	return tuo
}

// RemoveAttachments removes "attachments" edges to Attachment entities.
func (tuo *TicketUpdateOne) RemoveAttachments(a ...*Attachment) *TicketUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.RemoveAttachmentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TicketUpdateOne) Select(field string, fields ...string) *TicketUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Ticket entity.
func (tuo *TicketUpdateOne) Save(ctx context.Context) (*Ticket, error) {
	var (
		err  error
		node *Ticket
	)
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TicketMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TicketUpdateOne) SaveX(ctx context.Context) *Ticket {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TicketUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TicketUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TicketUpdateOne) check() error {
	if v, ok := tuo.mutation.Status(); ok {
		if err := ticket.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Ticket.status": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Creator(); ok {
		if err := ticket.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`ent: validator failed for field "Ticket.creator": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Replier(); ok {
		if err := ticket.ReplierValidator(v); err != nil {
			return &ValidationError{Name: "replier", err: fmt.Errorf(`ent: validator failed for field "Ticket.replier": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Reviewer(); ok {
		if err := ticket.ReviewerValidator(v); err != nil {
			return &ValidationError{Name: "reviewer", err: fmt.Errorf(`ent: validator failed for field "Ticket.reviewer": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.ApplicationsID(); tuo.mutation.ApplicationsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Ticket.applications"`)
	}
	return nil
}

func (tuo *TicketUpdateOne) sqlSave(ctx context.Context) (_node *Ticket, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ticket.Table,
			Columns: ticket.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ticket.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ticket.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ticket.FieldID)
		for _, f := range fields {
			if !ticket.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ticket.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: ticket.FieldStatus,
		})
	}
	if value, ok := tuo.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticket.FieldCreator,
		})
	}
	if value, ok := tuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticket.FieldContent,
		})
	}
	if value, ok := tuo.mutation.Reply(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticket.FieldReply,
		})
	}
	if value, ok := tuo.mutation.Replier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticket.FieldReplier,
		})
	}
	if value, ok := tuo.mutation.Reviewer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticket.FieldReviewer,
		})
	}
	if value, ok := tuo.mutation.ReviewRemark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticket.FieldReviewRemark,
		})
	}
	if value, ok := tuo.mutation.RepliedDtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ticket.FieldRepliedDtime,
		})
	}
	if value, ok := tuo.mutation.ReviewedDtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ticket.FieldReviewedDtime,
		})
	}
	if value, ok := tuo.mutation.UpdatedDtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ticket.FieldUpdatedDtime,
		})
	}
	if tuo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.ApplicationsTable,
			Columns: []string{ticket.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: application.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.ApplicationsTable,
			Columns: []string{ticket.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: application.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.AttachmentsTable,
			Columns: []string{ticket.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedAttachmentsIDs(); len(nodes) > 0 && !tuo.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.AttachmentsTable,
			Columns: []string{ticket.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.AttachmentsTable,
			Columns: []string{ticket.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ticket{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
