// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/application"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/applicationassignmenthistory"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/predicate"
	"github.com/google/uuid"
)

// ApplicationAssignmentHistoryUpdate is the builder for updating ApplicationAssignmentHistory entities.
type ApplicationAssignmentHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *ApplicationAssignmentHistoryMutation
}

// Where appends a list predicates to the ApplicationAssignmentHistoryUpdate builder.
func (aahu *ApplicationAssignmentHistoryUpdate) Where(ps ...predicate.ApplicationAssignmentHistory) *ApplicationAssignmentHistoryUpdate {
	aahu.mutation.Where(ps...)
	return aahu
}

// SetApplicationID sets the "application_id" field.
func (aahu *ApplicationAssignmentHistoryUpdate) SetApplicationID(u uuid.UUID) *ApplicationAssignmentHistoryUpdate {
	aahu.mutation.SetApplicationID(u)
	return aahu
}

// SetAssigner sets the "assigner" field.
func (aahu *ApplicationAssignmentHistoryUpdate) SetAssigner(s string) *ApplicationAssignmentHistoryUpdate {
	aahu.mutation.SetAssigner(s)
	return aahu
}

// SetAssignee sets the "assignee" field.
func (aahu *ApplicationAssignmentHistoryUpdate) SetAssignee(s string) *ApplicationAssignmentHistoryUpdate {
	aahu.mutation.SetAssignee(s)
	return aahu
}

// SetApplicationsID sets the "applications" edge to the Application entity by ID.
func (aahu *ApplicationAssignmentHistoryUpdate) SetApplicationsID(id uuid.UUID) *ApplicationAssignmentHistoryUpdate {
	aahu.mutation.SetApplicationsID(id)
	return aahu
}

// SetApplications sets the "applications" edge to the Application entity.
func (aahu *ApplicationAssignmentHistoryUpdate) SetApplications(a *Application) *ApplicationAssignmentHistoryUpdate {
	return aahu.SetApplicationsID(a.ID)
}

// Mutation returns the ApplicationAssignmentHistoryMutation object of the builder.
func (aahu *ApplicationAssignmentHistoryUpdate) Mutation() *ApplicationAssignmentHistoryMutation {
	return aahu.mutation
}

// ClearApplications clears the "applications" edge to the Application entity.
func (aahu *ApplicationAssignmentHistoryUpdate) ClearApplications() *ApplicationAssignmentHistoryUpdate {
	aahu.mutation.ClearApplications()
	return aahu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aahu *ApplicationAssignmentHistoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(aahu.hooks) == 0 {
		if err = aahu.check(); err != nil {
			return 0, err
		}
		affected, err = aahu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ApplicationAssignmentHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aahu.check(); err != nil {
				return 0, err
			}
			aahu.mutation = mutation
			affected, err = aahu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aahu.hooks) - 1; i >= 0; i-- {
			if aahu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aahu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aahu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aahu *ApplicationAssignmentHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := aahu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aahu *ApplicationAssignmentHistoryUpdate) Exec(ctx context.Context) error {
	_, err := aahu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aahu *ApplicationAssignmentHistoryUpdate) ExecX(ctx context.Context) {
	if err := aahu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aahu *ApplicationAssignmentHistoryUpdate) check() error {
	if v, ok := aahu.mutation.Assigner(); ok {
		if err := applicationassignmenthistory.AssignerValidator(v); err != nil {
			return &ValidationError{Name: "assigner", err: fmt.Errorf(`ent: validator failed for field "ApplicationAssignmentHistory.assigner": %w`, err)}
		}
	}
	if v, ok := aahu.mutation.Assignee(); ok {
		if err := applicationassignmenthistory.AssigneeValidator(v); err != nil {
			return &ValidationError{Name: "assignee", err: fmt.Errorf(`ent: validator failed for field "ApplicationAssignmentHistory.assignee": %w`, err)}
		}
	}
	if _, ok := aahu.mutation.ApplicationsID(); aahu.mutation.ApplicationsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ApplicationAssignmentHistory.applications"`)
	}
	return nil
}

func (aahu *ApplicationAssignmentHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   applicationassignmenthistory.Table,
			Columns: applicationassignmenthistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: applicationassignmenthistory.FieldID,
			},
		},
	}
	if ps := aahu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aahu.mutation.ApplicationID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: applicationassignmenthistory.FieldApplicationID,
		})
	}
	if value, ok := aahu.mutation.Assigner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: applicationassignmenthistory.FieldAssigner,
		})
	}
	if value, ok := aahu.mutation.Assignee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: applicationassignmenthistory.FieldAssignee,
		})
	}
	if aahu.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicationassignmenthistory.ApplicationsTable,
			Columns: []string{applicationassignmenthistory.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: application.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aahu.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicationassignmenthistory.ApplicationsTable,
			Columns: []string{applicationassignmenthistory.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: application.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aahu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applicationassignmenthistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ApplicationAssignmentHistoryUpdateOne is the builder for updating a single ApplicationAssignmentHistory entity.
type ApplicationAssignmentHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApplicationAssignmentHistoryMutation
}

// SetApplicationID sets the "application_id" field.
func (aahuo *ApplicationAssignmentHistoryUpdateOne) SetApplicationID(u uuid.UUID) *ApplicationAssignmentHistoryUpdateOne {
	aahuo.mutation.SetApplicationID(u)
	return aahuo
}

// SetAssigner sets the "assigner" field.
func (aahuo *ApplicationAssignmentHistoryUpdateOne) SetAssigner(s string) *ApplicationAssignmentHistoryUpdateOne {
	aahuo.mutation.SetAssigner(s)
	return aahuo
}

// SetAssignee sets the "assignee" field.
func (aahuo *ApplicationAssignmentHistoryUpdateOne) SetAssignee(s string) *ApplicationAssignmentHistoryUpdateOne {
	aahuo.mutation.SetAssignee(s)
	return aahuo
}

// SetApplicationsID sets the "applications" edge to the Application entity by ID.
func (aahuo *ApplicationAssignmentHistoryUpdateOne) SetApplicationsID(id uuid.UUID) *ApplicationAssignmentHistoryUpdateOne {
	aahuo.mutation.SetApplicationsID(id)
	return aahuo
}

// SetApplications sets the "applications" edge to the Application entity.
func (aahuo *ApplicationAssignmentHistoryUpdateOne) SetApplications(a *Application) *ApplicationAssignmentHistoryUpdateOne {
	return aahuo.SetApplicationsID(a.ID)
}

// Mutation returns the ApplicationAssignmentHistoryMutation object of the builder.
func (aahuo *ApplicationAssignmentHistoryUpdateOne) Mutation() *ApplicationAssignmentHistoryMutation {
	return aahuo.mutation
}

// ClearApplications clears the "applications" edge to the Application entity.
func (aahuo *ApplicationAssignmentHistoryUpdateOne) ClearApplications() *ApplicationAssignmentHistoryUpdateOne {
	aahuo.mutation.ClearApplications()
	return aahuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aahuo *ApplicationAssignmentHistoryUpdateOne) Select(field string, fields ...string) *ApplicationAssignmentHistoryUpdateOne {
	aahuo.fields = append([]string{field}, fields...)
	return aahuo
}

// Save executes the query and returns the updated ApplicationAssignmentHistory entity.
func (aahuo *ApplicationAssignmentHistoryUpdateOne) Save(ctx context.Context) (*ApplicationAssignmentHistory, error) {
	var (
		err  error
		node *ApplicationAssignmentHistory
	)
	if len(aahuo.hooks) == 0 {
		if err = aahuo.check(); err != nil {
			return nil, err
		}
		node, err = aahuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ApplicationAssignmentHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aahuo.check(); err != nil {
				return nil, err
			}
			aahuo.mutation = mutation
			node, err = aahuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aahuo.hooks) - 1; i >= 0; i-- {
			if aahuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aahuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aahuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aahuo *ApplicationAssignmentHistoryUpdateOne) SaveX(ctx context.Context) *ApplicationAssignmentHistory {
	node, err := aahuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aahuo *ApplicationAssignmentHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := aahuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aahuo *ApplicationAssignmentHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := aahuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aahuo *ApplicationAssignmentHistoryUpdateOne) check() error {
	if v, ok := aahuo.mutation.Assigner(); ok {
		if err := applicationassignmenthistory.AssignerValidator(v); err != nil {
			return &ValidationError{Name: "assigner", err: fmt.Errorf(`ent: validator failed for field "ApplicationAssignmentHistory.assigner": %w`, err)}
		}
	}
	if v, ok := aahuo.mutation.Assignee(); ok {
		if err := applicationassignmenthistory.AssigneeValidator(v); err != nil {
			return &ValidationError{Name: "assignee", err: fmt.Errorf(`ent: validator failed for field "ApplicationAssignmentHistory.assignee": %w`, err)}
		}
	}
	if _, ok := aahuo.mutation.ApplicationsID(); aahuo.mutation.ApplicationsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ApplicationAssignmentHistory.applications"`)
	}
	return nil
}

func (aahuo *ApplicationAssignmentHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ApplicationAssignmentHistory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   applicationassignmenthistory.Table,
			Columns: applicationassignmenthistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: applicationassignmenthistory.FieldID,
			},
		},
	}
	id, ok := aahuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ApplicationAssignmentHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aahuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, applicationassignmenthistory.FieldID)
		for _, f := range fields {
			if !applicationassignmenthistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != applicationassignmenthistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aahuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aahuo.mutation.ApplicationID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: applicationassignmenthistory.FieldApplicationID,
		})
	}
	if value, ok := aahuo.mutation.Assigner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: applicationassignmenthistory.FieldAssigner,
		})
	}
	if value, ok := aahuo.mutation.Assignee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: applicationassignmenthistory.FieldAssignee,
		})
	}
	if aahuo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicationassignmenthistory.ApplicationsTable,
			Columns: []string{applicationassignmenthistory.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: application.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aahuo.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicationassignmenthistory.ApplicationsTable,
			Columns: []string{applicationassignmenthistory.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: application.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ApplicationAssignmentHistory{config: aahuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aahuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applicationassignmenthistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
