// Code generated by entc, DO NOT EDIT.

package applicationassignmenthistory

import (
	"time"
)

const (
	// Label holds the string label denoting the applicationassignmenthistory type in the database.
	Label = "application_assignment_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldApplicationID holds the string denoting the application_id field in the database.
	FieldApplicationID = "application_id"
	// FieldAssigner holds the string denoting the assigner field in the database.
	FieldAssigner = "assigner"
	// FieldAssignee holds the string denoting the assignee field in the database.
	FieldAssignee = "assignee"
	// FieldCreatedTime holds the string denoting the created_time field in the database.
	FieldCreatedTime = "created_time"
	// EdgeApplications holds the string denoting the applications edge name in mutations.
	EdgeApplications = "applications"
	// ApplicationFieldID holds the string denoting the ID field of the Application.
	ApplicationFieldID = "application_id"
	// Table holds the table name of the applicationassignmenthistory in the database.
	Table = "application_assignment_histories"
	// ApplicationsTable is the table that holds the applications relation/edge.
	ApplicationsTable = "application_assignment_histories"
	// ApplicationsInverseTable is the table name for the Application entity.
	// It exists in this package in order to avoid circular dependency with the "application" package.
	ApplicationsInverseTable = "applications"
	// ApplicationsColumn is the table column denoting the applications relation/edge.
	ApplicationsColumn = "application_assignment_histories"
)

// Columns holds all SQL columns for applicationassignmenthistory fields.
var Columns = []string{
	FieldID,
	FieldApplicationID,
	FieldAssigner,
	FieldAssignee,
	FieldCreatedTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "application_assignment_histories"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"application_assignment_histories",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// AssignerValidator is a validator for the "assigner" field. It is called by the builders before save.
	AssignerValidator func(string) error
	// AssigneeValidator is a validator for the "assignee" field. It is called by the builders before save.
	AssigneeValidator func(string) error
	// DefaultCreatedTime holds the default value on creation for the "created_time" field.
	DefaultCreatedTime func() time.Time
)
