// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/application"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/applicationassignmenthistory"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/applicationstatushistory"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/attachment"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/predicate"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/reviewer"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/ticket"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeApplication                  = "Application"
	TypeApplicationAssignmentHistory = "ApplicationAssignmentHistory"
	TypeApplicationStatusHistory     = "ApplicationStatusHistory"
	TypeAttachment                   = "Attachment"
	TypeReviewer                     = "Reviewer"
	TypeTicket                       = "Ticket"
)

// ApplicationMutation represents an operation that mutates the Application nodes in the graph.
type ApplicationMutation struct {
	config
	op                          Op
	typ                         string
	id                          *uuid.UUID
	basic_id                    *string
	premium_id                  *string
	bot_display_name            *string
	bot_mid                     *string
	bot_active_status           *application.BotActiveStatus
	bot_suspend_reason          *application.BotSuspendReason
	applicant_name              *string
	applicant_biz_id            *string
	applicant_mid               *string
	applicant_email             *string
	remark                      *string
	store_type                  *application.StoreType
	website_url                 *string
	application_status          *application.ApplicationStatus
	review_comment              *string
	assigner                    *string
	assignee                    *string
	created_dtime               *time.Time
	updated_dtime               *time.Time
	clearedFields               map[string]struct{}
	tickets                     map[int]struct{}
	removedtickets              map[int]struct{}
	clearedtickets              bool
	assignment_histories        map[int]struct{}
	removedassignment_histories map[int]struct{}
	clearedassignment_histories bool
	status_histories            map[int]struct{}
	removedstatus_histories     map[int]struct{}
	clearedstatus_histories     bool
	attachments                 map[int]struct{}
	removedattachments          map[int]struct{}
	clearedattachments          bool
	done                        bool
	oldValue                    func(context.Context) (*Application, error)
	predicates                  []predicate.Application
}

var _ ent.Mutation = (*ApplicationMutation)(nil)

// applicationOption allows management of the mutation configuration using functional options.
type applicationOption func(*ApplicationMutation)

// newApplicationMutation creates new mutation for the Application entity.
func newApplicationMutation(c config, op Op, opts ...applicationOption) *ApplicationMutation {
	m := &ApplicationMutation{
		config:        c,
		op:            op,
		typ:           TypeApplication,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withApplicationID sets the ID field of the mutation.
func withApplicationID(id uuid.UUID) applicationOption {
	return func(m *ApplicationMutation) {
		var (
			err   error
			once  sync.Once
			value *Application
		)
		m.oldValue = func(ctx context.Context) (*Application, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Application.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApplication sets the old Application of the mutation.
func withApplication(node *Application) applicationOption {
	return func(m *ApplicationMutation) {
		m.oldValue = func(context.Context) (*Application, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ApplicationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ApplicationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Application entities.
func (m *ApplicationMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ApplicationMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ApplicationMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Application.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBasicID sets the "basic_id" field.
func (m *ApplicationMutation) SetBasicID(s string) {
	m.basic_id = &s
}

// BasicID returns the value of the "basic_id" field in the mutation.
func (m *ApplicationMutation) BasicID() (r string, exists bool) {
	v := m.basic_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBasicID returns the old "basic_id" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldBasicID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBasicID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBasicID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBasicID: %w", err)
	}
	return oldValue.BasicID, nil
}

// ResetBasicID resets all changes to the "basic_id" field.
func (m *ApplicationMutation) ResetBasicID() {
	m.basic_id = nil
}

// SetPremiumID sets the "premium_id" field.
func (m *ApplicationMutation) SetPremiumID(s string) {
	m.premium_id = &s
}

// PremiumID returns the value of the "premium_id" field in the mutation.
func (m *ApplicationMutation) PremiumID() (r string, exists bool) {
	v := m.premium_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPremiumID returns the old "premium_id" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldPremiumID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPremiumID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPremiumID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPremiumID: %w", err)
	}
	return oldValue.PremiumID, nil
}

// ResetPremiumID resets all changes to the "premium_id" field.
func (m *ApplicationMutation) ResetPremiumID() {
	m.premium_id = nil
}

// SetBotDisplayName sets the "bot_display_name" field.
func (m *ApplicationMutation) SetBotDisplayName(s string) {
	m.bot_display_name = &s
}

// BotDisplayName returns the value of the "bot_display_name" field in the mutation.
func (m *ApplicationMutation) BotDisplayName() (r string, exists bool) {
	v := m.bot_display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldBotDisplayName returns the old "bot_display_name" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldBotDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBotDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBotDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBotDisplayName: %w", err)
	}
	return oldValue.BotDisplayName, nil
}

// ResetBotDisplayName resets all changes to the "bot_display_name" field.
func (m *ApplicationMutation) ResetBotDisplayName() {
	m.bot_display_name = nil
}

// SetBotMid sets the "bot_mid" field.
func (m *ApplicationMutation) SetBotMid(s string) {
	m.bot_mid = &s
}

// BotMid returns the value of the "bot_mid" field in the mutation.
func (m *ApplicationMutation) BotMid() (r string, exists bool) {
	v := m.bot_mid
	if v == nil {
		return
	}
	return *v, true
}

// OldBotMid returns the old "bot_mid" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldBotMid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBotMid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBotMid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBotMid: %w", err)
	}
	return oldValue.BotMid, nil
}

// ResetBotMid resets all changes to the "bot_mid" field.
func (m *ApplicationMutation) ResetBotMid() {
	m.bot_mid = nil
}

// SetBotActiveStatus sets the "bot_active_status" field.
func (m *ApplicationMutation) SetBotActiveStatus(aas application.BotActiveStatus) {
	m.bot_active_status = &aas
}

// BotActiveStatus returns the value of the "bot_active_status" field in the mutation.
func (m *ApplicationMutation) BotActiveStatus() (r application.BotActiveStatus, exists bool) {
	v := m.bot_active_status
	if v == nil {
		return
	}
	return *v, true
}

// OldBotActiveStatus returns the old "bot_active_status" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldBotActiveStatus(ctx context.Context) (v application.BotActiveStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBotActiveStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBotActiveStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBotActiveStatus: %w", err)
	}
	return oldValue.BotActiveStatus, nil
}

// ResetBotActiveStatus resets all changes to the "bot_active_status" field.
func (m *ApplicationMutation) ResetBotActiveStatus() {
	m.bot_active_status = nil
}

// SetBotSuspendReason sets the "bot_suspend_reason" field.
func (m *ApplicationMutation) SetBotSuspendReason(asr application.BotSuspendReason) {
	m.bot_suspend_reason = &asr
}

// BotSuspendReason returns the value of the "bot_suspend_reason" field in the mutation.
func (m *ApplicationMutation) BotSuspendReason() (r application.BotSuspendReason, exists bool) {
	v := m.bot_suspend_reason
	if v == nil {
		return
	}
	return *v, true
}

// OldBotSuspendReason returns the old "bot_suspend_reason" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldBotSuspendReason(ctx context.Context) (v application.BotSuspendReason, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBotSuspendReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBotSuspendReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBotSuspendReason: %w", err)
	}
	return oldValue.BotSuspendReason, nil
}

// ResetBotSuspendReason resets all changes to the "bot_suspend_reason" field.
func (m *ApplicationMutation) ResetBotSuspendReason() {
	m.bot_suspend_reason = nil
}

// SetApplicantName sets the "applicant_name" field.
func (m *ApplicationMutation) SetApplicantName(s string) {
	m.applicant_name = &s
}

// ApplicantName returns the value of the "applicant_name" field in the mutation.
func (m *ApplicationMutation) ApplicantName() (r string, exists bool) {
	v := m.applicant_name
	if v == nil {
		return
	}
	return *v, true
}

// OldApplicantName returns the old "applicant_name" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldApplicantName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApplicantName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApplicantName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApplicantName: %w", err)
	}
	return oldValue.ApplicantName, nil
}

// ResetApplicantName resets all changes to the "applicant_name" field.
func (m *ApplicationMutation) ResetApplicantName() {
	m.applicant_name = nil
}

// SetApplicantBizID sets the "applicant_biz_id" field.
func (m *ApplicationMutation) SetApplicantBizID(s string) {
	m.applicant_biz_id = &s
}

// ApplicantBizID returns the value of the "applicant_biz_id" field in the mutation.
func (m *ApplicationMutation) ApplicantBizID() (r string, exists bool) {
	v := m.applicant_biz_id
	if v == nil {
		return
	}
	return *v, true
}

// OldApplicantBizID returns the old "applicant_biz_id" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldApplicantBizID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApplicantBizID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApplicantBizID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApplicantBizID: %w", err)
	}
	return oldValue.ApplicantBizID, nil
}

// ResetApplicantBizID resets all changes to the "applicant_biz_id" field.
func (m *ApplicationMutation) ResetApplicantBizID() {
	m.applicant_biz_id = nil
}

// SetApplicantMid sets the "applicant_mid" field.
func (m *ApplicationMutation) SetApplicantMid(s string) {
	m.applicant_mid = &s
}

// ApplicantMid returns the value of the "applicant_mid" field in the mutation.
func (m *ApplicationMutation) ApplicantMid() (r string, exists bool) {
	v := m.applicant_mid
	if v == nil {
		return
	}
	return *v, true
}

// OldApplicantMid returns the old "applicant_mid" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldApplicantMid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApplicantMid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApplicantMid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApplicantMid: %w", err)
	}
	return oldValue.ApplicantMid, nil
}

// ResetApplicantMid resets all changes to the "applicant_mid" field.
func (m *ApplicationMutation) ResetApplicantMid() {
	m.applicant_mid = nil
}

// SetApplicantEmail sets the "applicant_email" field.
func (m *ApplicationMutation) SetApplicantEmail(s string) {
	m.applicant_email = &s
}

// ApplicantEmail returns the value of the "applicant_email" field in the mutation.
func (m *ApplicationMutation) ApplicantEmail() (r string, exists bool) {
	v := m.applicant_email
	if v == nil {
		return
	}
	return *v, true
}

// OldApplicantEmail returns the old "applicant_email" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldApplicantEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApplicantEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApplicantEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApplicantEmail: %w", err)
	}
	return oldValue.ApplicantEmail, nil
}

// ResetApplicantEmail resets all changes to the "applicant_email" field.
func (m *ApplicationMutation) ResetApplicantEmail() {
	m.applicant_email = nil
}

// SetRemark sets the "remark" field.
func (m *ApplicationMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *ApplicationMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ResetRemark resets all changes to the "remark" field.
func (m *ApplicationMutation) ResetRemark() {
	m.remark = nil
}

// SetStoreType sets the "store_type" field.
func (m *ApplicationMutation) SetStoreType(at application.StoreType) {
	m.store_type = &at
}

// StoreType returns the value of the "store_type" field in the mutation.
func (m *ApplicationMutation) StoreType() (r application.StoreType, exists bool) {
	v := m.store_type
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreType returns the old "store_type" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldStoreType(ctx context.Context) (v application.StoreType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreType: %w", err)
	}
	return oldValue.StoreType, nil
}

// ResetStoreType resets all changes to the "store_type" field.
func (m *ApplicationMutation) ResetStoreType() {
	m.store_type = nil
}

// SetWebsiteURL sets the "website_url" field.
func (m *ApplicationMutation) SetWebsiteURL(s string) {
	m.website_url = &s
}

// WebsiteURL returns the value of the "website_url" field in the mutation.
func (m *ApplicationMutation) WebsiteURL() (r string, exists bool) {
	v := m.website_url
	if v == nil {
		return
	}
	return *v, true
}

// OldWebsiteURL returns the old "website_url" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldWebsiteURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebsiteURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebsiteURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebsiteURL: %w", err)
	}
	return oldValue.WebsiteURL, nil
}

// ResetWebsiteURL resets all changes to the "website_url" field.
func (m *ApplicationMutation) ResetWebsiteURL() {
	m.website_url = nil
}

// SetApplicationStatus sets the "application_status" field.
func (m *ApplicationMutation) SetApplicationStatus(as application.ApplicationStatus) {
	m.application_status = &as
}

// ApplicationStatus returns the value of the "application_status" field in the mutation.
func (m *ApplicationMutation) ApplicationStatus() (r application.ApplicationStatus, exists bool) {
	v := m.application_status
	if v == nil {
		return
	}
	return *v, true
}

// OldApplicationStatus returns the old "application_status" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldApplicationStatus(ctx context.Context) (v application.ApplicationStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApplicationStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApplicationStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApplicationStatus: %w", err)
	}
	return oldValue.ApplicationStatus, nil
}

// ResetApplicationStatus resets all changes to the "application_status" field.
func (m *ApplicationMutation) ResetApplicationStatus() {
	m.application_status = nil
}

// SetReviewComment sets the "review_comment" field.
func (m *ApplicationMutation) SetReviewComment(s string) {
	m.review_comment = &s
}

// ReviewComment returns the value of the "review_comment" field in the mutation.
func (m *ApplicationMutation) ReviewComment() (r string, exists bool) {
	v := m.review_comment
	if v == nil {
		return
	}
	return *v, true
}

// OldReviewComment returns the old "review_comment" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldReviewComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReviewComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReviewComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReviewComment: %w", err)
	}
	return oldValue.ReviewComment, nil
}

// ResetReviewComment resets all changes to the "review_comment" field.
func (m *ApplicationMutation) ResetReviewComment() {
	m.review_comment = nil
}

// SetAssigner sets the "assigner" field.
func (m *ApplicationMutation) SetAssigner(s string) {
	m.assigner = &s
}

// Assigner returns the value of the "assigner" field in the mutation.
func (m *ApplicationMutation) Assigner() (r string, exists bool) {
	v := m.assigner
	if v == nil {
		return
	}
	return *v, true
}

// OldAssigner returns the old "assigner" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldAssigner(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAssigner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAssigner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAssigner: %w", err)
	}
	return oldValue.Assigner, nil
}

// ResetAssigner resets all changes to the "assigner" field.
func (m *ApplicationMutation) ResetAssigner() {
	m.assigner = nil
}

// SetAssignee sets the "assignee" field.
func (m *ApplicationMutation) SetAssignee(s string) {
	m.assignee = &s
}

// Assignee returns the value of the "assignee" field in the mutation.
func (m *ApplicationMutation) Assignee() (r string, exists bool) {
	v := m.assignee
	if v == nil {
		return
	}
	return *v, true
}

// OldAssignee returns the old "assignee" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldAssignee(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAssignee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAssignee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAssignee: %w", err)
	}
	return oldValue.Assignee, nil
}

// ResetAssignee resets all changes to the "assignee" field.
func (m *ApplicationMutation) ResetAssignee() {
	m.assignee = nil
}

// SetCreatedDtime sets the "created_dtime" field.
func (m *ApplicationMutation) SetCreatedDtime(t time.Time) {
	m.created_dtime = &t
}

// CreatedDtime returns the value of the "created_dtime" field in the mutation.
func (m *ApplicationMutation) CreatedDtime() (r time.Time, exists bool) {
	v := m.created_dtime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedDtime returns the old "created_dtime" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldCreatedDtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedDtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedDtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedDtime: %w", err)
	}
	return oldValue.CreatedDtime, nil
}

// ResetCreatedDtime resets all changes to the "created_dtime" field.
func (m *ApplicationMutation) ResetCreatedDtime() {
	m.created_dtime = nil
}

// SetUpdatedDtime sets the "updated_dtime" field.
func (m *ApplicationMutation) SetUpdatedDtime(t time.Time) {
	m.updated_dtime = &t
}

// UpdatedDtime returns the value of the "updated_dtime" field in the mutation.
func (m *ApplicationMutation) UpdatedDtime() (r time.Time, exists bool) {
	v := m.updated_dtime
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedDtime returns the old "updated_dtime" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldUpdatedDtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedDtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedDtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedDtime: %w", err)
	}
	return oldValue.UpdatedDtime, nil
}

// ResetUpdatedDtime resets all changes to the "updated_dtime" field.
func (m *ApplicationMutation) ResetUpdatedDtime() {
	m.updated_dtime = nil
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by ids.
func (m *ApplicationMutation) AddTicketIDs(ids ...int) {
	if m.tickets == nil {
		m.tickets = make(map[int]struct{})
	}
	for i := range ids {
		m.tickets[ids[i]] = struct{}{}
	}
}

// ClearTickets clears the "tickets" edge to the Ticket entity.
func (m *ApplicationMutation) ClearTickets() {
	m.clearedtickets = true
}

// TicketsCleared reports if the "tickets" edge to the Ticket entity was cleared.
func (m *ApplicationMutation) TicketsCleared() bool {
	return m.clearedtickets
}

// RemoveTicketIDs removes the "tickets" edge to the Ticket entity by IDs.
func (m *ApplicationMutation) RemoveTicketIDs(ids ...int) {
	if m.removedtickets == nil {
		m.removedtickets = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tickets, ids[i])
		m.removedtickets[ids[i]] = struct{}{}
	}
}

// RemovedTickets returns the removed IDs of the "tickets" edge to the Ticket entity.
func (m *ApplicationMutation) RemovedTicketsIDs() (ids []int) {
	for id := range m.removedtickets {
		ids = append(ids, id)
	}
	return
}

// TicketsIDs returns the "tickets" edge IDs in the mutation.
func (m *ApplicationMutation) TicketsIDs() (ids []int) {
	for id := range m.tickets {
		ids = append(ids, id)
	}
	return
}

// ResetTickets resets all changes to the "tickets" edge.
func (m *ApplicationMutation) ResetTickets() {
	m.tickets = nil
	m.clearedtickets = false
	m.removedtickets = nil
}

// AddAssignmentHistoryIDs adds the "assignment_histories" edge to the ApplicationAssignmentHistory entity by ids.
func (m *ApplicationMutation) AddAssignmentHistoryIDs(ids ...int) {
	if m.assignment_histories == nil {
		m.assignment_histories = make(map[int]struct{})
	}
	for i := range ids {
		m.assignment_histories[ids[i]] = struct{}{}
	}
}

// ClearAssignmentHistories clears the "assignment_histories" edge to the ApplicationAssignmentHistory entity.
func (m *ApplicationMutation) ClearAssignmentHistories() {
	m.clearedassignment_histories = true
}

// AssignmentHistoriesCleared reports if the "assignment_histories" edge to the ApplicationAssignmentHistory entity was cleared.
func (m *ApplicationMutation) AssignmentHistoriesCleared() bool {
	return m.clearedassignment_histories
}

// RemoveAssignmentHistoryIDs removes the "assignment_histories" edge to the ApplicationAssignmentHistory entity by IDs.
func (m *ApplicationMutation) RemoveAssignmentHistoryIDs(ids ...int) {
	if m.removedassignment_histories == nil {
		m.removedassignment_histories = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.assignment_histories, ids[i])
		m.removedassignment_histories[ids[i]] = struct{}{}
	}
}

// RemovedAssignmentHistories returns the removed IDs of the "assignment_histories" edge to the ApplicationAssignmentHistory entity.
func (m *ApplicationMutation) RemovedAssignmentHistoriesIDs() (ids []int) {
	for id := range m.removedassignment_histories {
		ids = append(ids, id)
	}
	return
}

// AssignmentHistoriesIDs returns the "assignment_histories" edge IDs in the mutation.
func (m *ApplicationMutation) AssignmentHistoriesIDs() (ids []int) {
	for id := range m.assignment_histories {
		ids = append(ids, id)
	}
	return
}

// ResetAssignmentHistories resets all changes to the "assignment_histories" edge.
func (m *ApplicationMutation) ResetAssignmentHistories() {
	m.assignment_histories = nil
	m.clearedassignment_histories = false
	m.removedassignment_histories = nil
}

// AddStatusHistoryIDs adds the "status_histories" edge to the ApplicationStatusHistory entity by ids.
func (m *ApplicationMutation) AddStatusHistoryIDs(ids ...int) {
	if m.status_histories == nil {
		m.status_histories = make(map[int]struct{})
	}
	for i := range ids {
		m.status_histories[ids[i]] = struct{}{}
	}
}

// ClearStatusHistories clears the "status_histories" edge to the ApplicationStatusHistory entity.
func (m *ApplicationMutation) ClearStatusHistories() {
	m.clearedstatus_histories = true
}

// StatusHistoriesCleared reports if the "status_histories" edge to the ApplicationStatusHistory entity was cleared.
func (m *ApplicationMutation) StatusHistoriesCleared() bool {
	return m.clearedstatus_histories
}

// RemoveStatusHistoryIDs removes the "status_histories" edge to the ApplicationStatusHistory entity by IDs.
func (m *ApplicationMutation) RemoveStatusHistoryIDs(ids ...int) {
	if m.removedstatus_histories == nil {
		m.removedstatus_histories = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.status_histories, ids[i])
		m.removedstatus_histories[ids[i]] = struct{}{}
	}
}

// RemovedStatusHistories returns the removed IDs of the "status_histories" edge to the ApplicationStatusHistory entity.
func (m *ApplicationMutation) RemovedStatusHistoriesIDs() (ids []int) {
	for id := range m.removedstatus_histories {
		ids = append(ids, id)
	}
	return
}

// StatusHistoriesIDs returns the "status_histories" edge IDs in the mutation.
func (m *ApplicationMutation) StatusHistoriesIDs() (ids []int) {
	for id := range m.status_histories {
		ids = append(ids, id)
	}
	return
}

// ResetStatusHistories resets all changes to the "status_histories" edge.
func (m *ApplicationMutation) ResetStatusHistories() {
	m.status_histories = nil
	m.clearedstatus_histories = false
	m.removedstatus_histories = nil
}

// AddAttachmentIDs adds the "attachments" edge to the Attachment entity by ids.
func (m *ApplicationMutation) AddAttachmentIDs(ids ...int) {
	if m.attachments == nil {
		m.attachments = make(map[int]struct{})
	}
	for i := range ids {
		m.attachments[ids[i]] = struct{}{}
	}
}

// ClearAttachments clears the "attachments" edge to the Attachment entity.
func (m *ApplicationMutation) ClearAttachments() {
	m.clearedattachments = true
}

// AttachmentsCleared reports if the "attachments" edge to the Attachment entity was cleared.
func (m *ApplicationMutation) AttachmentsCleared() bool {
	return m.clearedattachments
}

// RemoveAttachmentIDs removes the "attachments" edge to the Attachment entity by IDs.
func (m *ApplicationMutation) RemoveAttachmentIDs(ids ...int) {
	if m.removedattachments == nil {
		m.removedattachments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.attachments, ids[i])
		m.removedattachments[ids[i]] = struct{}{}
	}
}

// RemovedAttachments returns the removed IDs of the "attachments" edge to the Attachment entity.
func (m *ApplicationMutation) RemovedAttachmentsIDs() (ids []int) {
	for id := range m.removedattachments {
		ids = append(ids, id)
	}
	return
}

// AttachmentsIDs returns the "attachments" edge IDs in the mutation.
func (m *ApplicationMutation) AttachmentsIDs() (ids []int) {
	for id := range m.attachments {
		ids = append(ids, id)
	}
	return
}

// ResetAttachments resets all changes to the "attachments" edge.
func (m *ApplicationMutation) ResetAttachments() {
	m.attachments = nil
	m.clearedattachments = false
	m.removedattachments = nil
}

// Where appends a list predicates to the ApplicationMutation builder.
func (m *ApplicationMutation) Where(ps ...predicate.Application) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ApplicationMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Application).
func (m *ApplicationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ApplicationMutation) Fields() []string {
	fields := make([]string, 0, 19)
	if m.basic_id != nil {
		fields = append(fields, application.FieldBasicID)
	}
	if m.premium_id != nil {
		fields = append(fields, application.FieldPremiumID)
	}
	if m.bot_display_name != nil {
		fields = append(fields, application.FieldBotDisplayName)
	}
	if m.bot_mid != nil {
		fields = append(fields, application.FieldBotMid)
	}
	if m.bot_active_status != nil {
		fields = append(fields, application.FieldBotActiveStatus)
	}
	if m.bot_suspend_reason != nil {
		fields = append(fields, application.FieldBotSuspendReason)
	}
	if m.applicant_name != nil {
		fields = append(fields, application.FieldApplicantName)
	}
	if m.applicant_biz_id != nil {
		fields = append(fields, application.FieldApplicantBizID)
	}
	if m.applicant_mid != nil {
		fields = append(fields, application.FieldApplicantMid)
	}
	if m.applicant_email != nil {
		fields = append(fields, application.FieldApplicantEmail)
	}
	if m.remark != nil {
		fields = append(fields, application.FieldRemark)
	}
	if m.store_type != nil {
		fields = append(fields, application.FieldStoreType)
	}
	if m.website_url != nil {
		fields = append(fields, application.FieldWebsiteURL)
	}
	if m.application_status != nil {
		fields = append(fields, application.FieldApplicationStatus)
	}
	if m.review_comment != nil {
		fields = append(fields, application.FieldReviewComment)
	}
	if m.assigner != nil {
		fields = append(fields, application.FieldAssigner)
	}
	if m.assignee != nil {
		fields = append(fields, application.FieldAssignee)
	}
	if m.created_dtime != nil {
		fields = append(fields, application.FieldCreatedDtime)
	}
	if m.updated_dtime != nil {
		fields = append(fields, application.FieldUpdatedDtime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ApplicationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case application.FieldBasicID:
		return m.BasicID()
	case application.FieldPremiumID:
		return m.PremiumID()
	case application.FieldBotDisplayName:
		return m.BotDisplayName()
	case application.FieldBotMid:
		return m.BotMid()
	case application.FieldBotActiveStatus:
		return m.BotActiveStatus()
	case application.FieldBotSuspendReason:
		return m.BotSuspendReason()
	case application.FieldApplicantName:
		return m.ApplicantName()
	case application.FieldApplicantBizID:
		return m.ApplicantBizID()
	case application.FieldApplicantMid:
		return m.ApplicantMid()
	case application.FieldApplicantEmail:
		return m.ApplicantEmail()
	case application.FieldRemark:
		return m.Remark()
	case application.FieldStoreType:
		return m.StoreType()
	case application.FieldWebsiteURL:
		return m.WebsiteURL()
	case application.FieldApplicationStatus:
		return m.ApplicationStatus()
	case application.FieldReviewComment:
		return m.ReviewComment()
	case application.FieldAssigner:
		return m.Assigner()
	case application.FieldAssignee:
		return m.Assignee()
	case application.FieldCreatedDtime:
		return m.CreatedDtime()
	case application.FieldUpdatedDtime:
		return m.UpdatedDtime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ApplicationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case application.FieldBasicID:
		return m.OldBasicID(ctx)
	case application.FieldPremiumID:
		return m.OldPremiumID(ctx)
	case application.FieldBotDisplayName:
		return m.OldBotDisplayName(ctx)
	case application.FieldBotMid:
		return m.OldBotMid(ctx)
	case application.FieldBotActiveStatus:
		return m.OldBotActiveStatus(ctx)
	case application.FieldBotSuspendReason:
		return m.OldBotSuspendReason(ctx)
	case application.FieldApplicantName:
		return m.OldApplicantName(ctx)
	case application.FieldApplicantBizID:
		return m.OldApplicantBizID(ctx)
	case application.FieldApplicantMid:
		return m.OldApplicantMid(ctx)
	case application.FieldApplicantEmail:
		return m.OldApplicantEmail(ctx)
	case application.FieldRemark:
		return m.OldRemark(ctx)
	case application.FieldStoreType:
		return m.OldStoreType(ctx)
	case application.FieldWebsiteURL:
		return m.OldWebsiteURL(ctx)
	case application.FieldApplicationStatus:
		return m.OldApplicationStatus(ctx)
	case application.FieldReviewComment:
		return m.OldReviewComment(ctx)
	case application.FieldAssigner:
		return m.OldAssigner(ctx)
	case application.FieldAssignee:
		return m.OldAssignee(ctx)
	case application.FieldCreatedDtime:
		return m.OldCreatedDtime(ctx)
	case application.FieldUpdatedDtime:
		return m.OldUpdatedDtime(ctx)
	}
	return nil, fmt.Errorf("unknown Application field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApplicationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case application.FieldBasicID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBasicID(v)
		return nil
	case application.FieldPremiumID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPremiumID(v)
		return nil
	case application.FieldBotDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBotDisplayName(v)
		return nil
	case application.FieldBotMid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBotMid(v)
		return nil
	case application.FieldBotActiveStatus:
		v, ok := value.(application.BotActiveStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBotActiveStatus(v)
		return nil
	case application.FieldBotSuspendReason:
		v, ok := value.(application.BotSuspendReason)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBotSuspendReason(v)
		return nil
	case application.FieldApplicantName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApplicantName(v)
		return nil
	case application.FieldApplicantBizID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApplicantBizID(v)
		return nil
	case application.FieldApplicantMid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApplicantMid(v)
		return nil
	case application.FieldApplicantEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApplicantEmail(v)
		return nil
	case application.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case application.FieldStoreType:
		v, ok := value.(application.StoreType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreType(v)
		return nil
	case application.FieldWebsiteURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebsiteURL(v)
		return nil
	case application.FieldApplicationStatus:
		v, ok := value.(application.ApplicationStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApplicationStatus(v)
		return nil
	case application.FieldReviewComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReviewComment(v)
		return nil
	case application.FieldAssigner:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAssigner(v)
		return nil
	case application.FieldAssignee:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAssignee(v)
		return nil
	case application.FieldCreatedDtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedDtime(v)
		return nil
	case application.FieldUpdatedDtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedDtime(v)
		return nil
	}
	return fmt.Errorf("unknown Application field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ApplicationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ApplicationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApplicationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Application numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ApplicationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ApplicationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ApplicationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Application nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ApplicationMutation) ResetField(name string) error {
	switch name {
	case application.FieldBasicID:
		m.ResetBasicID()
		return nil
	case application.FieldPremiumID:
		m.ResetPremiumID()
		return nil
	case application.FieldBotDisplayName:
		m.ResetBotDisplayName()
		return nil
	case application.FieldBotMid:
		m.ResetBotMid()
		return nil
	case application.FieldBotActiveStatus:
		m.ResetBotActiveStatus()
		return nil
	case application.FieldBotSuspendReason:
		m.ResetBotSuspendReason()
		return nil
	case application.FieldApplicantName:
		m.ResetApplicantName()
		return nil
	case application.FieldApplicantBizID:
		m.ResetApplicantBizID()
		return nil
	case application.FieldApplicantMid:
		m.ResetApplicantMid()
		return nil
	case application.FieldApplicantEmail:
		m.ResetApplicantEmail()
		return nil
	case application.FieldRemark:
		m.ResetRemark()
		return nil
	case application.FieldStoreType:
		m.ResetStoreType()
		return nil
	case application.FieldWebsiteURL:
		m.ResetWebsiteURL()
		return nil
	case application.FieldApplicationStatus:
		m.ResetApplicationStatus()
		return nil
	case application.FieldReviewComment:
		m.ResetReviewComment()
		return nil
	case application.FieldAssigner:
		m.ResetAssigner()
		return nil
	case application.FieldAssignee:
		m.ResetAssignee()
		return nil
	case application.FieldCreatedDtime:
		m.ResetCreatedDtime()
		return nil
	case application.FieldUpdatedDtime:
		m.ResetUpdatedDtime()
		return nil
	}
	return fmt.Errorf("unknown Application field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ApplicationMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.tickets != nil {
		edges = append(edges, application.EdgeTickets)
	}
	if m.assignment_histories != nil {
		edges = append(edges, application.EdgeAssignmentHistories)
	}
	if m.status_histories != nil {
		edges = append(edges, application.EdgeStatusHistories)
	}
	if m.attachments != nil {
		edges = append(edges, application.EdgeAttachments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ApplicationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case application.EdgeTickets:
		ids := make([]ent.Value, 0, len(m.tickets))
		for id := range m.tickets {
			ids = append(ids, id)
		}
		return ids
	case application.EdgeAssignmentHistories:
		ids := make([]ent.Value, 0, len(m.assignment_histories))
		for id := range m.assignment_histories {
			ids = append(ids, id)
		}
		return ids
	case application.EdgeStatusHistories:
		ids := make([]ent.Value, 0, len(m.status_histories))
		for id := range m.status_histories {
			ids = append(ids, id)
		}
		return ids
	case application.EdgeAttachments:
		ids := make([]ent.Value, 0, len(m.attachments))
		for id := range m.attachments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ApplicationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedtickets != nil {
		edges = append(edges, application.EdgeTickets)
	}
	if m.removedassignment_histories != nil {
		edges = append(edges, application.EdgeAssignmentHistories)
	}
	if m.removedstatus_histories != nil {
		edges = append(edges, application.EdgeStatusHistories)
	}
	if m.removedattachments != nil {
		edges = append(edges, application.EdgeAttachments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ApplicationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case application.EdgeTickets:
		ids := make([]ent.Value, 0, len(m.removedtickets))
		for id := range m.removedtickets {
			ids = append(ids, id)
		}
		return ids
	case application.EdgeAssignmentHistories:
		ids := make([]ent.Value, 0, len(m.removedassignment_histories))
		for id := range m.removedassignment_histories {
			ids = append(ids, id)
		}
		return ids
	case application.EdgeStatusHistories:
		ids := make([]ent.Value, 0, len(m.removedstatus_histories))
		for id := range m.removedstatus_histories {
			ids = append(ids, id)
		}
		return ids
	case application.EdgeAttachments:
		ids := make([]ent.Value, 0, len(m.removedattachments))
		for id := range m.removedattachments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ApplicationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedtickets {
		edges = append(edges, application.EdgeTickets)
	}
	if m.clearedassignment_histories {
		edges = append(edges, application.EdgeAssignmentHistories)
	}
	if m.clearedstatus_histories {
		edges = append(edges, application.EdgeStatusHistories)
	}
	if m.clearedattachments {
		edges = append(edges, application.EdgeAttachments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ApplicationMutation) EdgeCleared(name string) bool {
	switch name {
	case application.EdgeTickets:
		return m.clearedtickets
	case application.EdgeAssignmentHistories:
		return m.clearedassignment_histories
	case application.EdgeStatusHistories:
		return m.clearedstatus_histories
	case application.EdgeAttachments:
		return m.clearedattachments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ApplicationMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Application unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ApplicationMutation) ResetEdge(name string) error {
	switch name {
	case application.EdgeTickets:
		m.ResetTickets()
		return nil
	case application.EdgeAssignmentHistories:
		m.ResetAssignmentHistories()
		return nil
	case application.EdgeStatusHistories:
		m.ResetStatusHistories()
		return nil
	case application.EdgeAttachments:
		m.ResetAttachments()
		return nil
	}
	return fmt.Errorf("unknown Application edge %s", name)
}

// ApplicationAssignmentHistoryMutation represents an operation that mutates the ApplicationAssignmentHistory nodes in the graph.
type ApplicationAssignmentHistoryMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	assigner            *string
	assignee            *string
	created_time        *time.Time
	clearedFields       map[string]struct{}
	applications        *uuid.UUID
	clearedapplications bool
	done                bool
	oldValue            func(context.Context) (*ApplicationAssignmentHistory, error)
	predicates          []predicate.ApplicationAssignmentHistory
}

var _ ent.Mutation = (*ApplicationAssignmentHistoryMutation)(nil)

// applicationassignmenthistoryOption allows management of the mutation configuration using functional options.
type applicationassignmenthistoryOption func(*ApplicationAssignmentHistoryMutation)

// newApplicationAssignmentHistoryMutation creates new mutation for the ApplicationAssignmentHistory entity.
func newApplicationAssignmentHistoryMutation(c config, op Op, opts ...applicationassignmenthistoryOption) *ApplicationAssignmentHistoryMutation {
	m := &ApplicationAssignmentHistoryMutation{
		config:        c,
		op:            op,
		typ:           TypeApplicationAssignmentHistory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withApplicationAssignmentHistoryID sets the ID field of the mutation.
func withApplicationAssignmentHistoryID(id int) applicationassignmenthistoryOption {
	return func(m *ApplicationAssignmentHistoryMutation) {
		var (
			err   error
			once  sync.Once
			value *ApplicationAssignmentHistory
		)
		m.oldValue = func(ctx context.Context) (*ApplicationAssignmentHistory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ApplicationAssignmentHistory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApplicationAssignmentHistory sets the old ApplicationAssignmentHistory of the mutation.
func withApplicationAssignmentHistory(node *ApplicationAssignmentHistory) applicationassignmenthistoryOption {
	return func(m *ApplicationAssignmentHistoryMutation) {
		m.oldValue = func(context.Context) (*ApplicationAssignmentHistory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ApplicationAssignmentHistoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ApplicationAssignmentHistoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ApplicationAssignmentHistoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ApplicationAssignmentHistoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ApplicationAssignmentHistory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetApplicationID sets the "application_id" field.
func (m *ApplicationAssignmentHistoryMutation) SetApplicationID(u uuid.UUID) {
	m.applications = &u
}

// ApplicationID returns the value of the "application_id" field in the mutation.
func (m *ApplicationAssignmentHistoryMutation) ApplicationID() (r uuid.UUID, exists bool) {
	v := m.applications
	if v == nil {
		return
	}
	return *v, true
}

// OldApplicationID returns the old "application_id" field's value of the ApplicationAssignmentHistory entity.
// If the ApplicationAssignmentHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationAssignmentHistoryMutation) OldApplicationID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApplicationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApplicationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApplicationID: %w", err)
	}
	return oldValue.ApplicationID, nil
}

// ResetApplicationID resets all changes to the "application_id" field.
func (m *ApplicationAssignmentHistoryMutation) ResetApplicationID() {
	m.applications = nil
}

// SetAssigner sets the "assigner" field.
func (m *ApplicationAssignmentHistoryMutation) SetAssigner(s string) {
	m.assigner = &s
}

// Assigner returns the value of the "assigner" field in the mutation.
func (m *ApplicationAssignmentHistoryMutation) Assigner() (r string, exists bool) {
	v := m.assigner
	if v == nil {
		return
	}
	return *v, true
}

// OldAssigner returns the old "assigner" field's value of the ApplicationAssignmentHistory entity.
// If the ApplicationAssignmentHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationAssignmentHistoryMutation) OldAssigner(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAssigner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAssigner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAssigner: %w", err)
	}
	return oldValue.Assigner, nil
}

// ResetAssigner resets all changes to the "assigner" field.
func (m *ApplicationAssignmentHistoryMutation) ResetAssigner() {
	m.assigner = nil
}

// SetAssignee sets the "assignee" field.
func (m *ApplicationAssignmentHistoryMutation) SetAssignee(s string) {
	m.assignee = &s
}

// Assignee returns the value of the "assignee" field in the mutation.
func (m *ApplicationAssignmentHistoryMutation) Assignee() (r string, exists bool) {
	v := m.assignee
	if v == nil {
		return
	}
	return *v, true
}

// OldAssignee returns the old "assignee" field's value of the ApplicationAssignmentHistory entity.
// If the ApplicationAssignmentHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationAssignmentHistoryMutation) OldAssignee(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAssignee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAssignee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAssignee: %w", err)
	}
	return oldValue.Assignee, nil
}

// ResetAssignee resets all changes to the "assignee" field.
func (m *ApplicationAssignmentHistoryMutation) ResetAssignee() {
	m.assignee = nil
}

// SetCreatedTime sets the "created_time" field.
func (m *ApplicationAssignmentHistoryMutation) SetCreatedTime(t time.Time) {
	m.created_time = &t
}

// CreatedTime returns the value of the "created_time" field in the mutation.
func (m *ApplicationAssignmentHistoryMutation) CreatedTime() (r time.Time, exists bool) {
	v := m.created_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedTime returns the old "created_time" field's value of the ApplicationAssignmentHistory entity.
// If the ApplicationAssignmentHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationAssignmentHistoryMutation) OldCreatedTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedTime: %w", err)
	}
	return oldValue.CreatedTime, nil
}

// ResetCreatedTime resets all changes to the "created_time" field.
func (m *ApplicationAssignmentHistoryMutation) ResetCreatedTime() {
	m.created_time = nil
}

// SetApplicationsID sets the "applications" edge to the Application entity by id.
func (m *ApplicationAssignmentHistoryMutation) SetApplicationsID(id uuid.UUID) {
	m.applications = &id
}

// ClearApplications clears the "applications" edge to the Application entity.
func (m *ApplicationAssignmentHistoryMutation) ClearApplications() {
	m.clearedapplications = true
}

// ApplicationsCleared reports if the "applications" edge to the Application entity was cleared.
func (m *ApplicationAssignmentHistoryMutation) ApplicationsCleared() bool {
	return m.clearedapplications
}

// ApplicationsID returns the "applications" edge ID in the mutation.
func (m *ApplicationAssignmentHistoryMutation) ApplicationsID() (id uuid.UUID, exists bool) {
	if m.applications != nil {
		return *m.applications, true
	}
	return
}

// ApplicationsIDs returns the "applications" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ApplicationsID instead. It exists only for internal usage by the builders.
func (m *ApplicationAssignmentHistoryMutation) ApplicationsIDs() (ids []uuid.UUID) {
	if id := m.applications; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetApplications resets all changes to the "applications" edge.
func (m *ApplicationAssignmentHistoryMutation) ResetApplications() {
	m.applications = nil
	m.clearedapplications = false
}

// Where appends a list predicates to the ApplicationAssignmentHistoryMutation builder.
func (m *ApplicationAssignmentHistoryMutation) Where(ps ...predicate.ApplicationAssignmentHistory) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ApplicationAssignmentHistoryMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ApplicationAssignmentHistory).
func (m *ApplicationAssignmentHistoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ApplicationAssignmentHistoryMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.applications != nil {
		fields = append(fields, applicationassignmenthistory.FieldApplicationID)
	}
	if m.assigner != nil {
		fields = append(fields, applicationassignmenthistory.FieldAssigner)
	}
	if m.assignee != nil {
		fields = append(fields, applicationassignmenthistory.FieldAssignee)
	}
	if m.created_time != nil {
		fields = append(fields, applicationassignmenthistory.FieldCreatedTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ApplicationAssignmentHistoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case applicationassignmenthistory.FieldApplicationID:
		return m.ApplicationID()
	case applicationassignmenthistory.FieldAssigner:
		return m.Assigner()
	case applicationassignmenthistory.FieldAssignee:
		return m.Assignee()
	case applicationassignmenthistory.FieldCreatedTime:
		return m.CreatedTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ApplicationAssignmentHistoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case applicationassignmenthistory.FieldApplicationID:
		return m.OldApplicationID(ctx)
	case applicationassignmenthistory.FieldAssigner:
		return m.OldAssigner(ctx)
	case applicationassignmenthistory.FieldAssignee:
		return m.OldAssignee(ctx)
	case applicationassignmenthistory.FieldCreatedTime:
		return m.OldCreatedTime(ctx)
	}
	return nil, fmt.Errorf("unknown ApplicationAssignmentHistory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApplicationAssignmentHistoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case applicationassignmenthistory.FieldApplicationID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApplicationID(v)
		return nil
	case applicationassignmenthistory.FieldAssigner:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAssigner(v)
		return nil
	case applicationassignmenthistory.FieldAssignee:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAssignee(v)
		return nil
	case applicationassignmenthistory.FieldCreatedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedTime(v)
		return nil
	}
	return fmt.Errorf("unknown ApplicationAssignmentHistory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ApplicationAssignmentHistoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ApplicationAssignmentHistoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApplicationAssignmentHistoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ApplicationAssignmentHistory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ApplicationAssignmentHistoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ApplicationAssignmentHistoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ApplicationAssignmentHistoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ApplicationAssignmentHistory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ApplicationAssignmentHistoryMutation) ResetField(name string) error {
	switch name {
	case applicationassignmenthistory.FieldApplicationID:
		m.ResetApplicationID()
		return nil
	case applicationassignmenthistory.FieldAssigner:
		m.ResetAssigner()
		return nil
	case applicationassignmenthistory.FieldAssignee:
		m.ResetAssignee()
		return nil
	case applicationassignmenthistory.FieldCreatedTime:
		m.ResetCreatedTime()
		return nil
	}
	return fmt.Errorf("unknown ApplicationAssignmentHistory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ApplicationAssignmentHistoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.applications != nil {
		edges = append(edges, applicationassignmenthistory.EdgeApplications)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ApplicationAssignmentHistoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case applicationassignmenthistory.EdgeApplications:
		if id := m.applications; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ApplicationAssignmentHistoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ApplicationAssignmentHistoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ApplicationAssignmentHistoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedapplications {
		edges = append(edges, applicationassignmenthistory.EdgeApplications)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ApplicationAssignmentHistoryMutation) EdgeCleared(name string) bool {
	switch name {
	case applicationassignmenthistory.EdgeApplications:
		return m.clearedapplications
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ApplicationAssignmentHistoryMutation) ClearEdge(name string) error {
	switch name {
	case applicationassignmenthistory.EdgeApplications:
		m.ClearApplications()
		return nil
	}
	return fmt.Errorf("unknown ApplicationAssignmentHistory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ApplicationAssignmentHistoryMutation) ResetEdge(name string) error {
	switch name {
	case applicationassignmenthistory.EdgeApplications:
		m.ResetApplications()
		return nil
	}
	return fmt.Errorf("unknown ApplicationAssignmentHistory edge %s", name)
}

// ApplicationStatusHistoryMutation represents an operation that mutates the ApplicationStatusHistory nodes in the graph.
type ApplicationStatusHistoryMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	status              *applicationstatushistory.Status
	created_time        *time.Time
	clearedFields       map[string]struct{}
	applications        *uuid.UUID
	clearedapplications bool
	done                bool
	oldValue            func(context.Context) (*ApplicationStatusHistory, error)
	predicates          []predicate.ApplicationStatusHistory
}

var _ ent.Mutation = (*ApplicationStatusHistoryMutation)(nil)

// applicationstatushistoryOption allows management of the mutation configuration using functional options.
type applicationstatushistoryOption func(*ApplicationStatusHistoryMutation)

// newApplicationStatusHistoryMutation creates new mutation for the ApplicationStatusHistory entity.
func newApplicationStatusHistoryMutation(c config, op Op, opts ...applicationstatushistoryOption) *ApplicationStatusHistoryMutation {
	m := &ApplicationStatusHistoryMutation{
		config:        c,
		op:            op,
		typ:           TypeApplicationStatusHistory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withApplicationStatusHistoryID sets the ID field of the mutation.
func withApplicationStatusHistoryID(id int) applicationstatushistoryOption {
	return func(m *ApplicationStatusHistoryMutation) {
		var (
			err   error
			once  sync.Once
			value *ApplicationStatusHistory
		)
		m.oldValue = func(ctx context.Context) (*ApplicationStatusHistory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ApplicationStatusHistory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApplicationStatusHistory sets the old ApplicationStatusHistory of the mutation.
func withApplicationStatusHistory(node *ApplicationStatusHistory) applicationstatushistoryOption {
	return func(m *ApplicationStatusHistoryMutation) {
		m.oldValue = func(context.Context) (*ApplicationStatusHistory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ApplicationStatusHistoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ApplicationStatusHistoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ApplicationStatusHistoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ApplicationStatusHistoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ApplicationStatusHistory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetApplicationID sets the "application_id" field.
func (m *ApplicationStatusHistoryMutation) SetApplicationID(u uuid.UUID) {
	m.applications = &u
}

// ApplicationID returns the value of the "application_id" field in the mutation.
func (m *ApplicationStatusHistoryMutation) ApplicationID() (r uuid.UUID, exists bool) {
	v := m.applications
	if v == nil {
		return
	}
	return *v, true
}

// OldApplicationID returns the old "application_id" field's value of the ApplicationStatusHistory entity.
// If the ApplicationStatusHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationStatusHistoryMutation) OldApplicationID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApplicationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApplicationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApplicationID: %w", err)
	}
	return oldValue.ApplicationID, nil
}

// ResetApplicationID resets all changes to the "application_id" field.
func (m *ApplicationStatusHistoryMutation) ResetApplicationID() {
	m.applications = nil
}

// SetStatus sets the "status" field.
func (m *ApplicationStatusHistoryMutation) SetStatus(a applicationstatushistory.Status) {
	m.status = &a
}

// Status returns the value of the "status" field in the mutation.
func (m *ApplicationStatusHistoryMutation) Status() (r applicationstatushistory.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ApplicationStatusHistory entity.
// If the ApplicationStatusHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationStatusHistoryMutation) OldStatus(ctx context.Context) (v applicationstatushistory.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ApplicationStatusHistoryMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedTime sets the "created_time" field.
func (m *ApplicationStatusHistoryMutation) SetCreatedTime(t time.Time) {
	m.created_time = &t
}

// CreatedTime returns the value of the "created_time" field in the mutation.
func (m *ApplicationStatusHistoryMutation) CreatedTime() (r time.Time, exists bool) {
	v := m.created_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedTime returns the old "created_time" field's value of the ApplicationStatusHistory entity.
// If the ApplicationStatusHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationStatusHistoryMutation) OldCreatedTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedTime: %w", err)
	}
	return oldValue.CreatedTime, nil
}

// ResetCreatedTime resets all changes to the "created_time" field.
func (m *ApplicationStatusHistoryMutation) ResetCreatedTime() {
	m.created_time = nil
}

// SetApplicationsID sets the "applications" edge to the Application entity by id.
func (m *ApplicationStatusHistoryMutation) SetApplicationsID(id uuid.UUID) {
	m.applications = &id
}

// ClearApplications clears the "applications" edge to the Application entity.
func (m *ApplicationStatusHistoryMutation) ClearApplications() {
	m.clearedapplications = true
}

// ApplicationsCleared reports if the "applications" edge to the Application entity was cleared.
func (m *ApplicationStatusHistoryMutation) ApplicationsCleared() bool {
	return m.clearedapplications
}

// ApplicationsID returns the "applications" edge ID in the mutation.
func (m *ApplicationStatusHistoryMutation) ApplicationsID() (id uuid.UUID, exists bool) {
	if m.applications != nil {
		return *m.applications, true
	}
	return
}

// ApplicationsIDs returns the "applications" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ApplicationsID instead. It exists only for internal usage by the builders.
func (m *ApplicationStatusHistoryMutation) ApplicationsIDs() (ids []uuid.UUID) {
	if id := m.applications; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetApplications resets all changes to the "applications" edge.
func (m *ApplicationStatusHistoryMutation) ResetApplications() {
	m.applications = nil
	m.clearedapplications = false
}

// Where appends a list predicates to the ApplicationStatusHistoryMutation builder.
func (m *ApplicationStatusHistoryMutation) Where(ps ...predicate.ApplicationStatusHistory) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ApplicationStatusHistoryMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ApplicationStatusHistory).
func (m *ApplicationStatusHistoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ApplicationStatusHistoryMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.applications != nil {
		fields = append(fields, applicationstatushistory.FieldApplicationID)
	}
	if m.status != nil {
		fields = append(fields, applicationstatushistory.FieldStatus)
	}
	if m.created_time != nil {
		fields = append(fields, applicationstatushistory.FieldCreatedTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ApplicationStatusHistoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case applicationstatushistory.FieldApplicationID:
		return m.ApplicationID()
	case applicationstatushistory.FieldStatus:
		return m.Status()
	case applicationstatushistory.FieldCreatedTime:
		return m.CreatedTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ApplicationStatusHistoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case applicationstatushistory.FieldApplicationID:
		return m.OldApplicationID(ctx)
	case applicationstatushistory.FieldStatus:
		return m.OldStatus(ctx)
	case applicationstatushistory.FieldCreatedTime:
		return m.OldCreatedTime(ctx)
	}
	return nil, fmt.Errorf("unknown ApplicationStatusHistory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApplicationStatusHistoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case applicationstatushistory.FieldApplicationID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApplicationID(v)
		return nil
	case applicationstatushistory.FieldStatus:
		v, ok := value.(applicationstatushistory.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case applicationstatushistory.FieldCreatedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedTime(v)
		return nil
	}
	return fmt.Errorf("unknown ApplicationStatusHistory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ApplicationStatusHistoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ApplicationStatusHistoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApplicationStatusHistoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ApplicationStatusHistory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ApplicationStatusHistoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ApplicationStatusHistoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ApplicationStatusHistoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ApplicationStatusHistory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ApplicationStatusHistoryMutation) ResetField(name string) error {
	switch name {
	case applicationstatushistory.FieldApplicationID:
		m.ResetApplicationID()
		return nil
	case applicationstatushistory.FieldStatus:
		m.ResetStatus()
		return nil
	case applicationstatushistory.FieldCreatedTime:
		m.ResetCreatedTime()
		return nil
	}
	return fmt.Errorf("unknown ApplicationStatusHistory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ApplicationStatusHistoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.applications != nil {
		edges = append(edges, applicationstatushistory.EdgeApplications)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ApplicationStatusHistoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case applicationstatushistory.EdgeApplications:
		if id := m.applications; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ApplicationStatusHistoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ApplicationStatusHistoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ApplicationStatusHistoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedapplications {
		edges = append(edges, applicationstatushistory.EdgeApplications)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ApplicationStatusHistoryMutation) EdgeCleared(name string) bool {
	switch name {
	case applicationstatushistory.EdgeApplications:
		return m.clearedapplications
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ApplicationStatusHistoryMutation) ClearEdge(name string) error {
	switch name {
	case applicationstatushistory.EdgeApplications:
		m.ClearApplications()
		return nil
	}
	return fmt.Errorf("unknown ApplicationStatusHistory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ApplicationStatusHistoryMutation) ResetEdge(name string) error {
	switch name {
	case applicationstatushistory.EdgeApplications:
		m.ResetApplications()
		return nil
	}
	return fmt.Errorf("unknown ApplicationStatusHistory edge %s", name)
}

// AttachmentMutation represents an operation that mutates the Attachment nodes in the graph.
type AttachmentMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	attachment_type     *attachment.AttachmentType
	obs_oid             *string
	obs_hash            *string
	created_dtime       *time.Time
	clearedFields       map[string]struct{}
	applications        *uuid.UUID
	clearedapplications bool
	tickets             *int
	clearedtickets      bool
	done                bool
	oldValue            func(context.Context) (*Attachment, error)
	predicates          []predicate.Attachment
}

var _ ent.Mutation = (*AttachmentMutation)(nil)

// attachmentOption allows management of the mutation configuration using functional options.
type attachmentOption func(*AttachmentMutation)

// newAttachmentMutation creates new mutation for the Attachment entity.
func newAttachmentMutation(c config, op Op, opts ...attachmentOption) *AttachmentMutation {
	m := &AttachmentMutation{
		config:        c,
		op:            op,
		typ:           TypeAttachment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttachmentID sets the ID field of the mutation.
func withAttachmentID(id int) attachmentOption {
	return func(m *AttachmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Attachment
		)
		m.oldValue = func(ctx context.Context) (*Attachment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Attachment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttachment sets the old Attachment of the mutation.
func withAttachment(node *Attachment) attachmentOption {
	return func(m *AttachmentMutation) {
		m.oldValue = func(context.Context) (*Attachment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttachmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttachmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttachmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AttachmentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Attachment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetApplicationID sets the "application_id" field.
func (m *AttachmentMutation) SetApplicationID(u uuid.UUID) {
	m.applications = &u
}

// ApplicationID returns the value of the "application_id" field in the mutation.
func (m *AttachmentMutation) ApplicationID() (r uuid.UUID, exists bool) {
	v := m.applications
	if v == nil {
		return
	}
	return *v, true
}

// OldApplicationID returns the old "application_id" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldApplicationID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApplicationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApplicationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApplicationID: %w", err)
	}
	return oldValue.ApplicationID, nil
}

// ResetApplicationID resets all changes to the "application_id" field.
func (m *AttachmentMutation) ResetApplicationID() {
	m.applications = nil
}

// SetTicketID sets the "ticket_id" field.
func (m *AttachmentMutation) SetTicketID(i int) {
	m.tickets = &i
}

// TicketID returns the value of the "ticket_id" field in the mutation.
func (m *AttachmentMutation) TicketID() (r int, exists bool) {
	v := m.tickets
	if v == nil {
		return
	}
	return *v, true
}

// OldTicketID returns the old "ticket_id" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldTicketID(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTicketID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTicketID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTicketID: %w", err)
	}
	return oldValue.TicketID, nil
}

// ClearTicketID clears the value of the "ticket_id" field.
func (m *AttachmentMutation) ClearTicketID() {
	m.tickets = nil
	m.clearedFields[attachment.FieldTicketID] = struct{}{}
}

// TicketIDCleared returns if the "ticket_id" field was cleared in this mutation.
func (m *AttachmentMutation) TicketIDCleared() bool {
	_, ok := m.clearedFields[attachment.FieldTicketID]
	return ok
}

// ResetTicketID resets all changes to the "ticket_id" field.
func (m *AttachmentMutation) ResetTicketID() {
	m.tickets = nil
	delete(m.clearedFields, attachment.FieldTicketID)
}

// SetAttachmentType sets the "attachment_type" field.
func (m *AttachmentMutation) SetAttachmentType(at attachment.AttachmentType) {
	m.attachment_type = &at
}

// AttachmentType returns the value of the "attachment_type" field in the mutation.
func (m *AttachmentMutation) AttachmentType() (r attachment.AttachmentType, exists bool) {
	v := m.attachment_type
	if v == nil {
		return
	}
	return *v, true
}

// OldAttachmentType returns the old "attachment_type" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldAttachmentType(ctx context.Context) (v attachment.AttachmentType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttachmentType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttachmentType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttachmentType: %w", err)
	}
	return oldValue.AttachmentType, nil
}

// ResetAttachmentType resets all changes to the "attachment_type" field.
func (m *AttachmentMutation) ResetAttachmentType() {
	m.attachment_type = nil
}

// SetObsOid sets the "obs_oid" field.
func (m *AttachmentMutation) SetObsOid(s string) {
	m.obs_oid = &s
}

// ObsOid returns the value of the "obs_oid" field in the mutation.
func (m *AttachmentMutation) ObsOid() (r string, exists bool) {
	v := m.obs_oid
	if v == nil {
		return
	}
	return *v, true
}

// OldObsOid returns the old "obs_oid" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldObsOid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldObsOid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldObsOid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldObsOid: %w", err)
	}
	return oldValue.ObsOid, nil
}

// ResetObsOid resets all changes to the "obs_oid" field.
func (m *AttachmentMutation) ResetObsOid() {
	m.obs_oid = nil
}

// SetObsHash sets the "obs_hash" field.
func (m *AttachmentMutation) SetObsHash(s string) {
	m.obs_hash = &s
}

// ObsHash returns the value of the "obs_hash" field in the mutation.
func (m *AttachmentMutation) ObsHash() (r string, exists bool) {
	v := m.obs_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldObsHash returns the old "obs_hash" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldObsHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldObsHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldObsHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldObsHash: %w", err)
	}
	return oldValue.ObsHash, nil
}

// ResetObsHash resets all changes to the "obs_hash" field.
func (m *AttachmentMutation) ResetObsHash() {
	m.obs_hash = nil
}

// SetCreatedDtime sets the "created_dtime" field.
func (m *AttachmentMutation) SetCreatedDtime(t time.Time) {
	m.created_dtime = &t
}

// CreatedDtime returns the value of the "created_dtime" field in the mutation.
func (m *AttachmentMutation) CreatedDtime() (r time.Time, exists bool) {
	v := m.created_dtime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedDtime returns the old "created_dtime" field's value of the Attachment entity.
// If the Attachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttachmentMutation) OldCreatedDtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedDtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedDtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedDtime: %w", err)
	}
	return oldValue.CreatedDtime, nil
}

// ResetCreatedDtime resets all changes to the "created_dtime" field.
func (m *AttachmentMutation) ResetCreatedDtime() {
	m.created_dtime = nil
}

// SetApplicationsID sets the "applications" edge to the Application entity by id.
func (m *AttachmentMutation) SetApplicationsID(id uuid.UUID) {
	m.applications = &id
}

// ClearApplications clears the "applications" edge to the Application entity.
func (m *AttachmentMutation) ClearApplications() {
	m.clearedapplications = true
}

// ApplicationsCleared reports if the "applications" edge to the Application entity was cleared.
func (m *AttachmentMutation) ApplicationsCleared() bool {
	return m.clearedapplications
}

// ApplicationsID returns the "applications" edge ID in the mutation.
func (m *AttachmentMutation) ApplicationsID() (id uuid.UUID, exists bool) {
	if m.applications != nil {
		return *m.applications, true
	}
	return
}

// ApplicationsIDs returns the "applications" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ApplicationsID instead. It exists only for internal usage by the builders.
func (m *AttachmentMutation) ApplicationsIDs() (ids []uuid.UUID) {
	if id := m.applications; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetApplications resets all changes to the "applications" edge.
func (m *AttachmentMutation) ResetApplications() {
	m.applications = nil
	m.clearedapplications = false
}

// SetTicketsID sets the "tickets" edge to the Ticket entity by id.
func (m *AttachmentMutation) SetTicketsID(id int) {
	m.tickets = &id
}

// ClearTickets clears the "tickets" edge to the Ticket entity.
func (m *AttachmentMutation) ClearTickets() {
	m.clearedtickets = true
}

// TicketsCleared reports if the "tickets" edge to the Ticket entity was cleared.
func (m *AttachmentMutation) TicketsCleared() bool {
	return m.TicketIDCleared() || m.clearedtickets
}

// TicketsID returns the "tickets" edge ID in the mutation.
func (m *AttachmentMutation) TicketsID() (id int, exists bool) {
	if m.tickets != nil {
		return *m.tickets, true
	}
	return
}

// TicketsIDs returns the "tickets" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TicketsID instead. It exists only for internal usage by the builders.
func (m *AttachmentMutation) TicketsIDs() (ids []int) {
	if id := m.tickets; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTickets resets all changes to the "tickets" edge.
func (m *AttachmentMutation) ResetTickets() {
	m.tickets = nil
	m.clearedtickets = false
}

// Where appends a list predicates to the AttachmentMutation builder.
func (m *AttachmentMutation) Where(ps ...predicate.Attachment) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AttachmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Attachment).
func (m *AttachmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttachmentMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.applications != nil {
		fields = append(fields, attachment.FieldApplicationID)
	}
	if m.tickets != nil {
		fields = append(fields, attachment.FieldTicketID)
	}
	if m.attachment_type != nil {
		fields = append(fields, attachment.FieldAttachmentType)
	}
	if m.obs_oid != nil {
		fields = append(fields, attachment.FieldObsOid)
	}
	if m.obs_hash != nil {
		fields = append(fields, attachment.FieldObsHash)
	}
	if m.created_dtime != nil {
		fields = append(fields, attachment.FieldCreatedDtime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttachmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attachment.FieldApplicationID:
		return m.ApplicationID()
	case attachment.FieldTicketID:
		return m.TicketID()
	case attachment.FieldAttachmentType:
		return m.AttachmentType()
	case attachment.FieldObsOid:
		return m.ObsOid()
	case attachment.FieldObsHash:
		return m.ObsHash()
	case attachment.FieldCreatedDtime:
		return m.CreatedDtime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttachmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attachment.FieldApplicationID:
		return m.OldApplicationID(ctx)
	case attachment.FieldTicketID:
		return m.OldTicketID(ctx)
	case attachment.FieldAttachmentType:
		return m.OldAttachmentType(ctx)
	case attachment.FieldObsOid:
		return m.OldObsOid(ctx)
	case attachment.FieldObsHash:
		return m.OldObsHash(ctx)
	case attachment.FieldCreatedDtime:
		return m.OldCreatedDtime(ctx)
	}
	return nil, fmt.Errorf("unknown Attachment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttachmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attachment.FieldApplicationID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApplicationID(v)
		return nil
	case attachment.FieldTicketID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTicketID(v)
		return nil
	case attachment.FieldAttachmentType:
		v, ok := value.(attachment.AttachmentType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttachmentType(v)
		return nil
	case attachment.FieldObsOid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetObsOid(v)
		return nil
	case attachment.FieldObsHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetObsHash(v)
		return nil
	case attachment.FieldCreatedDtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedDtime(v)
		return nil
	}
	return fmt.Errorf("unknown Attachment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttachmentMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttachmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttachmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Attachment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttachmentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(attachment.FieldTicketID) {
		fields = append(fields, attachment.FieldTicketID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttachmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttachmentMutation) ClearField(name string) error {
	switch name {
	case attachment.FieldTicketID:
		m.ClearTicketID()
		return nil
	}
	return fmt.Errorf("unknown Attachment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttachmentMutation) ResetField(name string) error {
	switch name {
	case attachment.FieldApplicationID:
		m.ResetApplicationID()
		return nil
	case attachment.FieldTicketID:
		m.ResetTicketID()
		return nil
	case attachment.FieldAttachmentType:
		m.ResetAttachmentType()
		return nil
	case attachment.FieldObsOid:
		m.ResetObsOid()
		return nil
	case attachment.FieldObsHash:
		m.ResetObsHash()
		return nil
	case attachment.FieldCreatedDtime:
		m.ResetCreatedDtime()
		return nil
	}
	return fmt.Errorf("unknown Attachment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttachmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.applications != nil {
		edges = append(edges, attachment.EdgeApplications)
	}
	if m.tickets != nil {
		edges = append(edges, attachment.EdgeTickets)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttachmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case attachment.EdgeApplications:
		if id := m.applications; id != nil {
			return []ent.Value{*id}
		}
	case attachment.EdgeTickets:
		if id := m.tickets; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttachmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttachmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttachmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedapplications {
		edges = append(edges, attachment.EdgeApplications)
	}
	if m.clearedtickets {
		edges = append(edges, attachment.EdgeTickets)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttachmentMutation) EdgeCleared(name string) bool {
	switch name {
	case attachment.EdgeApplications:
		return m.clearedapplications
	case attachment.EdgeTickets:
		return m.clearedtickets
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttachmentMutation) ClearEdge(name string) error {
	switch name {
	case attachment.EdgeApplications:
		m.ClearApplications()
		return nil
	case attachment.EdgeTickets:
		m.ClearTickets()
		return nil
	}
	return fmt.Errorf("unknown Attachment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttachmentMutation) ResetEdge(name string) error {
	switch name {
	case attachment.EdgeApplications:
		m.ResetApplications()
		return nil
	case attachment.EdgeTickets:
		m.ResetTickets()
		return nil
	}
	return fmt.Errorf("unknown Attachment edge %s", name)
}

// ReviewerMutation represents an operation that mutates the Reviewer nodes in the graph.
type ReviewerMutation struct {
	config
	op            Op
	typ           string
	id            *int
	reviewer_id   *string
	reviewer_name *string
	iims_role     *reviewer.IimsRole
	created_dtime *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Reviewer, error)
	predicates    []predicate.Reviewer
}

var _ ent.Mutation = (*ReviewerMutation)(nil)

// reviewerOption allows management of the mutation configuration using functional options.
type reviewerOption func(*ReviewerMutation)

// newReviewerMutation creates new mutation for the Reviewer entity.
func newReviewerMutation(c config, op Op, opts ...reviewerOption) *ReviewerMutation {
	m := &ReviewerMutation{
		config:        c,
		op:            op,
		typ:           TypeReviewer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withReviewerID sets the ID field of the mutation.
func withReviewerID(id int) reviewerOption {
	return func(m *ReviewerMutation) {
		var (
			err   error
			once  sync.Once
			value *Reviewer
		)
		m.oldValue = func(ctx context.Context) (*Reviewer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Reviewer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withReviewer sets the old Reviewer of the mutation.
func withReviewer(node *Reviewer) reviewerOption {
	return func(m *ReviewerMutation) {
		m.oldValue = func(context.Context) (*Reviewer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ReviewerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ReviewerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ReviewerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ReviewerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Reviewer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetReviewerID sets the "reviewer_id" field.
func (m *ReviewerMutation) SetReviewerID(s string) {
	m.reviewer_id = &s
}

// ReviewerID returns the value of the "reviewer_id" field in the mutation.
func (m *ReviewerMutation) ReviewerID() (r string, exists bool) {
	v := m.reviewer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldReviewerID returns the old "reviewer_id" field's value of the Reviewer entity.
// If the Reviewer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReviewerMutation) OldReviewerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReviewerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReviewerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReviewerID: %w", err)
	}
	return oldValue.ReviewerID, nil
}

// ResetReviewerID resets all changes to the "reviewer_id" field.
func (m *ReviewerMutation) ResetReviewerID() {
	m.reviewer_id = nil
}

// SetReviewerName sets the "reviewer_name" field.
func (m *ReviewerMutation) SetReviewerName(s string) {
	m.reviewer_name = &s
}

// ReviewerName returns the value of the "reviewer_name" field in the mutation.
func (m *ReviewerMutation) ReviewerName() (r string, exists bool) {
	v := m.reviewer_name
	if v == nil {
		return
	}
	return *v, true
}

// OldReviewerName returns the old "reviewer_name" field's value of the Reviewer entity.
// If the Reviewer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReviewerMutation) OldReviewerName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReviewerName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReviewerName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReviewerName: %w", err)
	}
	return oldValue.ReviewerName, nil
}

// ResetReviewerName resets all changes to the "reviewer_name" field.
func (m *ReviewerMutation) ResetReviewerName() {
	m.reviewer_name = nil
}

// SetIimsRole sets the "iims_role" field.
func (m *ReviewerMutation) SetIimsRole(rr reviewer.IimsRole) {
	m.iims_role = &rr
}

// IimsRole returns the value of the "iims_role" field in the mutation.
func (m *ReviewerMutation) IimsRole() (r reviewer.IimsRole, exists bool) {
	v := m.iims_role
	if v == nil {
		return
	}
	return *v, true
}

// OldIimsRole returns the old "iims_role" field's value of the Reviewer entity.
// If the Reviewer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReviewerMutation) OldIimsRole(ctx context.Context) (v reviewer.IimsRole, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIimsRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIimsRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIimsRole: %w", err)
	}
	return oldValue.IimsRole, nil
}

// ResetIimsRole resets all changes to the "iims_role" field.
func (m *ReviewerMutation) ResetIimsRole() {
	m.iims_role = nil
}

// SetCreatedDtime sets the "created_dtime" field.
func (m *ReviewerMutation) SetCreatedDtime(t time.Time) {
	m.created_dtime = &t
}

// CreatedDtime returns the value of the "created_dtime" field in the mutation.
func (m *ReviewerMutation) CreatedDtime() (r time.Time, exists bool) {
	v := m.created_dtime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedDtime returns the old "created_dtime" field's value of the Reviewer entity.
// If the Reviewer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReviewerMutation) OldCreatedDtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedDtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedDtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedDtime: %w", err)
	}
	return oldValue.CreatedDtime, nil
}

// ResetCreatedDtime resets all changes to the "created_dtime" field.
func (m *ReviewerMutation) ResetCreatedDtime() {
	m.created_dtime = nil
}

// Where appends a list predicates to the ReviewerMutation builder.
func (m *ReviewerMutation) Where(ps ...predicate.Reviewer) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ReviewerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Reviewer).
func (m *ReviewerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ReviewerMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.reviewer_id != nil {
		fields = append(fields, reviewer.FieldReviewerID)
	}
	if m.reviewer_name != nil {
		fields = append(fields, reviewer.FieldReviewerName)
	}
	if m.iims_role != nil {
		fields = append(fields, reviewer.FieldIimsRole)
	}
	if m.created_dtime != nil {
		fields = append(fields, reviewer.FieldCreatedDtime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ReviewerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case reviewer.FieldReviewerID:
		return m.ReviewerID()
	case reviewer.FieldReviewerName:
		return m.ReviewerName()
	case reviewer.FieldIimsRole:
		return m.IimsRole()
	case reviewer.FieldCreatedDtime:
		return m.CreatedDtime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ReviewerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case reviewer.FieldReviewerID:
		return m.OldReviewerID(ctx)
	case reviewer.FieldReviewerName:
		return m.OldReviewerName(ctx)
	case reviewer.FieldIimsRole:
		return m.OldIimsRole(ctx)
	case reviewer.FieldCreatedDtime:
		return m.OldCreatedDtime(ctx)
	}
	return nil, fmt.Errorf("unknown Reviewer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReviewerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case reviewer.FieldReviewerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReviewerID(v)
		return nil
	case reviewer.FieldReviewerName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReviewerName(v)
		return nil
	case reviewer.FieldIimsRole:
		v, ok := value.(reviewer.IimsRole)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIimsRole(v)
		return nil
	case reviewer.FieldCreatedDtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedDtime(v)
		return nil
	}
	return fmt.Errorf("unknown Reviewer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ReviewerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ReviewerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReviewerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Reviewer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ReviewerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ReviewerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ReviewerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Reviewer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ReviewerMutation) ResetField(name string) error {
	switch name {
	case reviewer.FieldReviewerID:
		m.ResetReviewerID()
		return nil
	case reviewer.FieldReviewerName:
		m.ResetReviewerName()
		return nil
	case reviewer.FieldIimsRole:
		m.ResetIimsRole()
		return nil
	case reviewer.FieldCreatedDtime:
		m.ResetCreatedDtime()
		return nil
	}
	return fmt.Errorf("unknown Reviewer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ReviewerMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ReviewerMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ReviewerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ReviewerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ReviewerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ReviewerMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ReviewerMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Reviewer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ReviewerMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Reviewer edge %s", name)
}

// TicketMutation represents an operation that mutates the Ticket nodes in the graph.
type TicketMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	status              *ticket.Status
	creator             *string
	content             *string
	reply               *string
	replier             *string
	reviewer            *string
	review_remark       *string
	replied_dtime       *time.Time
	reviewed_dtime      *time.Time
	created_dtime       *time.Time
	updated_dtime       *time.Time
	clearedFields       map[string]struct{}
	applications        *uuid.UUID
	clearedapplications bool
	attachments         map[int]struct{}
	removedattachments  map[int]struct{}
	clearedattachments  bool
	done                bool
	oldValue            func(context.Context) (*Ticket, error)
	predicates          []predicate.Ticket
}

var _ ent.Mutation = (*TicketMutation)(nil)

// ticketOption allows management of the mutation configuration using functional options.
type ticketOption func(*TicketMutation)

// newTicketMutation creates new mutation for the Ticket entity.
func newTicketMutation(c config, op Op, opts ...ticketOption) *TicketMutation {
	m := &TicketMutation{
		config:        c,
		op:            op,
		typ:           TypeTicket,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTicketID sets the ID field of the mutation.
func withTicketID(id int) ticketOption {
	return func(m *TicketMutation) {
		var (
			err   error
			once  sync.Once
			value *Ticket
		)
		m.oldValue = func(ctx context.Context) (*Ticket, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Ticket.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTicket sets the old Ticket of the mutation.
func withTicket(node *Ticket) ticketOption {
	return func(m *TicketMutation) {
		m.oldValue = func(context.Context) (*Ticket, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TicketMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TicketMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Ticket entities.
func (m *TicketMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TicketMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TicketMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Ticket.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetApplicationID sets the "application_id" field.
func (m *TicketMutation) SetApplicationID(u uuid.UUID) {
	m.applications = &u
}

// ApplicationID returns the value of the "application_id" field in the mutation.
func (m *TicketMutation) ApplicationID() (r uuid.UUID, exists bool) {
	v := m.applications
	if v == nil {
		return
	}
	return *v, true
}

// OldApplicationID returns the old "application_id" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldApplicationID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApplicationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApplicationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApplicationID: %w", err)
	}
	return oldValue.ApplicationID, nil
}

// ResetApplicationID resets all changes to the "application_id" field.
func (m *TicketMutation) ResetApplicationID() {
	m.applications = nil
}

// SetStatus sets the "status" field.
func (m *TicketMutation) SetStatus(t ticket.Status) {
	m.status = &t
}

// Status returns the value of the "status" field in the mutation.
func (m *TicketMutation) Status() (r ticket.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldStatus(ctx context.Context) (v ticket.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *TicketMutation) ResetStatus() {
	m.status = nil
}

// SetCreator sets the "creator" field.
func (m *TicketMutation) SetCreator(s string) {
	m.creator = &s
}

// Creator returns the value of the "creator" field in the mutation.
func (m *TicketMutation) Creator() (r string, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldCreator(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ResetCreator resets all changes to the "creator" field.
func (m *TicketMutation) ResetCreator() {
	m.creator = nil
}

// SetContent sets the "content" field.
func (m *TicketMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *TicketMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *TicketMutation) ResetContent() {
	m.content = nil
}

// SetReply sets the "reply" field.
func (m *TicketMutation) SetReply(s string) {
	m.reply = &s
}

// Reply returns the value of the "reply" field in the mutation.
func (m *TicketMutation) Reply() (r string, exists bool) {
	v := m.reply
	if v == nil {
		return
	}
	return *v, true
}

// OldReply returns the old "reply" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldReply(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReply is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReply requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReply: %w", err)
	}
	return oldValue.Reply, nil
}

// ResetReply resets all changes to the "reply" field.
func (m *TicketMutation) ResetReply() {
	m.reply = nil
}

// SetReplier sets the "replier" field.
func (m *TicketMutation) SetReplier(s string) {
	m.replier = &s
}

// Replier returns the value of the "replier" field in the mutation.
func (m *TicketMutation) Replier() (r string, exists bool) {
	v := m.replier
	if v == nil {
		return
	}
	return *v, true
}

// OldReplier returns the old "replier" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldReplier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReplier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReplier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReplier: %w", err)
	}
	return oldValue.Replier, nil
}

// ResetReplier resets all changes to the "replier" field.
func (m *TicketMutation) ResetReplier() {
	m.replier = nil
}

// SetReviewer sets the "reviewer" field.
func (m *TicketMutation) SetReviewer(s string) {
	m.reviewer = &s
}

// Reviewer returns the value of the "reviewer" field in the mutation.
func (m *TicketMutation) Reviewer() (r string, exists bool) {
	v := m.reviewer
	if v == nil {
		return
	}
	return *v, true
}

// OldReviewer returns the old "reviewer" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldReviewer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReviewer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReviewer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReviewer: %w", err)
	}
	return oldValue.Reviewer, nil
}

// ResetReviewer resets all changes to the "reviewer" field.
func (m *TicketMutation) ResetReviewer() {
	m.reviewer = nil
}

// SetReviewRemark sets the "review_remark" field.
func (m *TicketMutation) SetReviewRemark(s string) {
	m.review_remark = &s
}

// ReviewRemark returns the value of the "review_remark" field in the mutation.
func (m *TicketMutation) ReviewRemark() (r string, exists bool) {
	v := m.review_remark
	if v == nil {
		return
	}
	return *v, true
}

// OldReviewRemark returns the old "review_remark" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldReviewRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReviewRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReviewRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReviewRemark: %w", err)
	}
	return oldValue.ReviewRemark, nil
}

// ResetReviewRemark resets all changes to the "review_remark" field.
func (m *TicketMutation) ResetReviewRemark() {
	m.review_remark = nil
}

// SetRepliedDtime sets the "replied_dtime" field.
func (m *TicketMutation) SetRepliedDtime(t time.Time) {
	m.replied_dtime = &t
}

// RepliedDtime returns the value of the "replied_dtime" field in the mutation.
func (m *TicketMutation) RepliedDtime() (r time.Time, exists bool) {
	v := m.replied_dtime
	if v == nil {
		return
	}
	return *v, true
}

// OldRepliedDtime returns the old "replied_dtime" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldRepliedDtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRepliedDtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRepliedDtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepliedDtime: %w", err)
	}
	return oldValue.RepliedDtime, nil
}

// ResetRepliedDtime resets all changes to the "replied_dtime" field.
func (m *TicketMutation) ResetRepliedDtime() {
	m.replied_dtime = nil
}

// SetReviewedDtime sets the "reviewed_dtime" field.
func (m *TicketMutation) SetReviewedDtime(t time.Time) {
	m.reviewed_dtime = &t
}

// ReviewedDtime returns the value of the "reviewed_dtime" field in the mutation.
func (m *TicketMutation) ReviewedDtime() (r time.Time, exists bool) {
	v := m.reviewed_dtime
	if v == nil {
		return
	}
	return *v, true
}

// OldReviewedDtime returns the old "reviewed_dtime" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldReviewedDtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReviewedDtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReviewedDtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReviewedDtime: %w", err)
	}
	return oldValue.ReviewedDtime, nil
}

// ResetReviewedDtime resets all changes to the "reviewed_dtime" field.
func (m *TicketMutation) ResetReviewedDtime() {
	m.reviewed_dtime = nil
}

// SetCreatedDtime sets the "created_dtime" field.
func (m *TicketMutation) SetCreatedDtime(t time.Time) {
	m.created_dtime = &t
}

// CreatedDtime returns the value of the "created_dtime" field in the mutation.
func (m *TicketMutation) CreatedDtime() (r time.Time, exists bool) {
	v := m.created_dtime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedDtime returns the old "created_dtime" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldCreatedDtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedDtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedDtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedDtime: %w", err)
	}
	return oldValue.CreatedDtime, nil
}

// ResetCreatedDtime resets all changes to the "created_dtime" field.
func (m *TicketMutation) ResetCreatedDtime() {
	m.created_dtime = nil
}

// SetUpdatedDtime sets the "updated_dtime" field.
func (m *TicketMutation) SetUpdatedDtime(t time.Time) {
	m.updated_dtime = &t
}

// UpdatedDtime returns the value of the "updated_dtime" field in the mutation.
func (m *TicketMutation) UpdatedDtime() (r time.Time, exists bool) {
	v := m.updated_dtime
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedDtime returns the old "updated_dtime" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldUpdatedDtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedDtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedDtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedDtime: %w", err)
	}
	return oldValue.UpdatedDtime, nil
}

// ResetUpdatedDtime resets all changes to the "updated_dtime" field.
func (m *TicketMutation) ResetUpdatedDtime() {
	m.updated_dtime = nil
}

// SetApplicationsID sets the "applications" edge to the Application entity by id.
func (m *TicketMutation) SetApplicationsID(id uuid.UUID) {
	m.applications = &id
}

// ClearApplications clears the "applications" edge to the Application entity.
func (m *TicketMutation) ClearApplications() {
	m.clearedapplications = true
}

// ApplicationsCleared reports if the "applications" edge to the Application entity was cleared.
func (m *TicketMutation) ApplicationsCleared() bool {
	return m.clearedapplications
}

// ApplicationsID returns the "applications" edge ID in the mutation.
func (m *TicketMutation) ApplicationsID() (id uuid.UUID, exists bool) {
	if m.applications != nil {
		return *m.applications, true
	}
	return
}

// ApplicationsIDs returns the "applications" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ApplicationsID instead. It exists only for internal usage by the builders.
func (m *TicketMutation) ApplicationsIDs() (ids []uuid.UUID) {
	if id := m.applications; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetApplications resets all changes to the "applications" edge.
func (m *TicketMutation) ResetApplications() {
	m.applications = nil
	m.clearedapplications = false
}

// AddAttachmentIDs adds the "attachments" edge to the Attachment entity by ids.
func (m *TicketMutation) AddAttachmentIDs(ids ...int) {
	if m.attachments == nil {
		m.attachments = make(map[int]struct{})
	}
	for i := range ids {
		m.attachments[ids[i]] = struct{}{}
	}
}

// ClearAttachments clears the "attachments" edge to the Attachment entity.
func (m *TicketMutation) ClearAttachments() {
	m.clearedattachments = true
}

// AttachmentsCleared reports if the "attachments" edge to the Attachment entity was cleared.
func (m *TicketMutation) AttachmentsCleared() bool {
	return m.clearedattachments
}

// RemoveAttachmentIDs removes the "attachments" edge to the Attachment entity by IDs.
func (m *TicketMutation) RemoveAttachmentIDs(ids ...int) {
	if m.removedattachments == nil {
		m.removedattachments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.attachments, ids[i])
		m.removedattachments[ids[i]] = struct{}{}
	}
}

// RemovedAttachments returns the removed IDs of the "attachments" edge to the Attachment entity.
func (m *TicketMutation) RemovedAttachmentsIDs() (ids []int) {
	for id := range m.removedattachments {
		ids = append(ids, id)
	}
	return
}

// AttachmentsIDs returns the "attachments" edge IDs in the mutation.
func (m *TicketMutation) AttachmentsIDs() (ids []int) {
	for id := range m.attachments {
		ids = append(ids, id)
	}
	return
}

// ResetAttachments resets all changes to the "attachments" edge.
func (m *TicketMutation) ResetAttachments() {
	m.attachments = nil
	m.clearedattachments = false
	m.removedattachments = nil
}

// Where appends a list predicates to the TicketMutation builder.
func (m *TicketMutation) Where(ps ...predicate.Ticket) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TicketMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Ticket).
func (m *TicketMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TicketMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.applications != nil {
		fields = append(fields, ticket.FieldApplicationID)
	}
	if m.status != nil {
		fields = append(fields, ticket.FieldStatus)
	}
	if m.creator != nil {
		fields = append(fields, ticket.FieldCreator)
	}
	if m.content != nil {
		fields = append(fields, ticket.FieldContent)
	}
	if m.reply != nil {
		fields = append(fields, ticket.FieldReply)
	}
	if m.replier != nil {
		fields = append(fields, ticket.FieldReplier)
	}
	if m.reviewer != nil {
		fields = append(fields, ticket.FieldReviewer)
	}
	if m.review_remark != nil {
		fields = append(fields, ticket.FieldReviewRemark)
	}
	if m.replied_dtime != nil {
		fields = append(fields, ticket.FieldRepliedDtime)
	}
	if m.reviewed_dtime != nil {
		fields = append(fields, ticket.FieldReviewedDtime)
	}
	if m.created_dtime != nil {
		fields = append(fields, ticket.FieldCreatedDtime)
	}
	if m.updated_dtime != nil {
		fields = append(fields, ticket.FieldUpdatedDtime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TicketMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ticket.FieldApplicationID:
		return m.ApplicationID()
	case ticket.FieldStatus:
		return m.Status()
	case ticket.FieldCreator:
		return m.Creator()
	case ticket.FieldContent:
		return m.Content()
	case ticket.FieldReply:
		return m.Reply()
	case ticket.FieldReplier:
		return m.Replier()
	case ticket.FieldReviewer:
		return m.Reviewer()
	case ticket.FieldReviewRemark:
		return m.ReviewRemark()
	case ticket.FieldRepliedDtime:
		return m.RepliedDtime()
	case ticket.FieldReviewedDtime:
		return m.ReviewedDtime()
	case ticket.FieldCreatedDtime:
		return m.CreatedDtime()
	case ticket.FieldUpdatedDtime:
		return m.UpdatedDtime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TicketMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ticket.FieldApplicationID:
		return m.OldApplicationID(ctx)
	case ticket.FieldStatus:
		return m.OldStatus(ctx)
	case ticket.FieldCreator:
		return m.OldCreator(ctx)
	case ticket.FieldContent:
		return m.OldContent(ctx)
	case ticket.FieldReply:
		return m.OldReply(ctx)
	case ticket.FieldReplier:
		return m.OldReplier(ctx)
	case ticket.FieldReviewer:
		return m.OldReviewer(ctx)
	case ticket.FieldReviewRemark:
		return m.OldReviewRemark(ctx)
	case ticket.FieldRepliedDtime:
		return m.OldRepliedDtime(ctx)
	case ticket.FieldReviewedDtime:
		return m.OldReviewedDtime(ctx)
	case ticket.FieldCreatedDtime:
		return m.OldCreatedDtime(ctx)
	case ticket.FieldUpdatedDtime:
		return m.OldUpdatedDtime(ctx)
	}
	return nil, fmt.Errorf("unknown Ticket field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TicketMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ticket.FieldApplicationID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApplicationID(v)
		return nil
	case ticket.FieldStatus:
		v, ok := value.(ticket.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case ticket.FieldCreator:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case ticket.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case ticket.FieldReply:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReply(v)
		return nil
	case ticket.FieldReplier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReplier(v)
		return nil
	case ticket.FieldReviewer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReviewer(v)
		return nil
	case ticket.FieldReviewRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReviewRemark(v)
		return nil
	case ticket.FieldRepliedDtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepliedDtime(v)
		return nil
	case ticket.FieldReviewedDtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReviewedDtime(v)
		return nil
	case ticket.FieldCreatedDtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedDtime(v)
		return nil
	case ticket.FieldUpdatedDtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedDtime(v)
		return nil
	}
	return fmt.Errorf("unknown Ticket field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TicketMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TicketMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TicketMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Ticket numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TicketMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TicketMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TicketMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Ticket nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TicketMutation) ResetField(name string) error {
	switch name {
	case ticket.FieldApplicationID:
		m.ResetApplicationID()
		return nil
	case ticket.FieldStatus:
		m.ResetStatus()
		return nil
	case ticket.FieldCreator:
		m.ResetCreator()
		return nil
	case ticket.FieldContent:
		m.ResetContent()
		return nil
	case ticket.FieldReply:
		m.ResetReply()
		return nil
	case ticket.FieldReplier:
		m.ResetReplier()
		return nil
	case ticket.FieldReviewer:
		m.ResetReviewer()
		return nil
	case ticket.FieldReviewRemark:
		m.ResetReviewRemark()
		return nil
	case ticket.FieldRepliedDtime:
		m.ResetRepliedDtime()
		return nil
	case ticket.FieldReviewedDtime:
		m.ResetReviewedDtime()
		return nil
	case ticket.FieldCreatedDtime:
		m.ResetCreatedDtime()
		return nil
	case ticket.FieldUpdatedDtime:
		m.ResetUpdatedDtime()
		return nil
	}
	return fmt.Errorf("unknown Ticket field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TicketMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.applications != nil {
		edges = append(edges, ticket.EdgeApplications)
	}
	if m.attachments != nil {
		edges = append(edges, ticket.EdgeAttachments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TicketMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ticket.EdgeApplications:
		if id := m.applications; id != nil {
			return []ent.Value{*id}
		}
	case ticket.EdgeAttachments:
		ids := make([]ent.Value, 0, len(m.attachments))
		for id := range m.attachments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TicketMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedattachments != nil {
		edges = append(edges, ticket.EdgeAttachments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TicketMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case ticket.EdgeAttachments:
		ids := make([]ent.Value, 0, len(m.removedattachments))
		for id := range m.removedattachments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TicketMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedapplications {
		edges = append(edges, ticket.EdgeApplications)
	}
	if m.clearedattachments {
		edges = append(edges, ticket.EdgeAttachments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TicketMutation) EdgeCleared(name string) bool {
	switch name {
	case ticket.EdgeApplications:
		return m.clearedapplications
	case ticket.EdgeAttachments:
		return m.clearedattachments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TicketMutation) ClearEdge(name string) error {
	switch name {
	case ticket.EdgeApplications:
		m.ClearApplications()
		return nil
	}
	return fmt.Errorf("unknown Ticket unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TicketMutation) ResetEdge(name string) error {
	switch name {
	case ticket.EdgeApplications:
		m.ResetApplications()
		return nil
	case ticket.EdgeAttachments:
		m.ResetAttachments()
		return nil
	}
	return fmt.Errorf("unknown Ticket edge %s", name)
}
