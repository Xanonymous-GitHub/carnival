// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/application"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/applicationstatushistory"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/predicate"
	"github.com/google/uuid"
)

// ApplicationStatusHistoryUpdate is the builder for updating ApplicationStatusHistory entities.
type ApplicationStatusHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *ApplicationStatusHistoryMutation
}

// Where appends a list predicates to the ApplicationStatusHistoryUpdate builder.
func (ashu *ApplicationStatusHistoryUpdate) Where(ps ...predicate.ApplicationStatusHistory) *ApplicationStatusHistoryUpdate {
	ashu.mutation.Where(ps...)
	return ashu
}

// SetApplicationID sets the "application_id" field.
func (ashu *ApplicationStatusHistoryUpdate) SetApplicationID(u uuid.UUID) *ApplicationStatusHistoryUpdate {
	ashu.mutation.SetApplicationID(u)
	return ashu
}

// SetStatus sets the "status" field.
func (ashu *ApplicationStatusHistoryUpdate) SetStatus(a applicationstatushistory.Status) *ApplicationStatusHistoryUpdate {
	ashu.mutation.SetStatus(a)
	return ashu
}

// SetApplicationsID sets the "applications" edge to the Application entity by ID.
func (ashu *ApplicationStatusHistoryUpdate) SetApplicationsID(id uuid.UUID) *ApplicationStatusHistoryUpdate {
	ashu.mutation.SetApplicationsID(id)
	return ashu
}

// SetApplications sets the "applications" edge to the Application entity.
func (ashu *ApplicationStatusHistoryUpdate) SetApplications(a *Application) *ApplicationStatusHistoryUpdate {
	return ashu.SetApplicationsID(a.ID)
}

// Mutation returns the ApplicationStatusHistoryMutation object of the builder.
func (ashu *ApplicationStatusHistoryUpdate) Mutation() *ApplicationStatusHistoryMutation {
	return ashu.mutation
}

// ClearApplications clears the "applications" edge to the Application entity.
func (ashu *ApplicationStatusHistoryUpdate) ClearApplications() *ApplicationStatusHistoryUpdate {
	ashu.mutation.ClearApplications()
	return ashu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ashu *ApplicationStatusHistoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ashu.hooks) == 0 {
		if err = ashu.check(); err != nil {
			return 0, err
		}
		affected, err = ashu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ApplicationStatusHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ashu.check(); err != nil {
				return 0, err
			}
			ashu.mutation = mutation
			affected, err = ashu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ashu.hooks) - 1; i >= 0; i-- {
			if ashu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ashu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ashu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ashu *ApplicationStatusHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ashu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ashu *ApplicationStatusHistoryUpdate) Exec(ctx context.Context) error {
	_, err := ashu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ashu *ApplicationStatusHistoryUpdate) ExecX(ctx context.Context) {
	if err := ashu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ashu *ApplicationStatusHistoryUpdate) check() error {
	if v, ok := ashu.mutation.Status(); ok {
		if err := applicationstatushistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ApplicationStatusHistory.status": %w`, err)}
		}
	}
	if _, ok := ashu.mutation.ApplicationsID(); ashu.mutation.ApplicationsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ApplicationStatusHistory.applications"`)
	}
	return nil
}

func (ashu *ApplicationStatusHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   applicationstatushistory.Table,
			Columns: applicationstatushistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: applicationstatushistory.FieldID,
			},
		},
	}
	if ps := ashu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ashu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: applicationstatushistory.FieldStatus,
		})
	}
	if ashu.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicationstatushistory.ApplicationsTable,
			Columns: []string{applicationstatushistory.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: application.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ashu.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicationstatushistory.ApplicationsTable,
			Columns: []string{applicationstatushistory.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: application.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ashu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applicationstatushistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ApplicationStatusHistoryUpdateOne is the builder for updating a single ApplicationStatusHistory entity.
type ApplicationStatusHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApplicationStatusHistoryMutation
}

// SetApplicationID sets the "application_id" field.
func (ashuo *ApplicationStatusHistoryUpdateOne) SetApplicationID(u uuid.UUID) *ApplicationStatusHistoryUpdateOne {
	ashuo.mutation.SetApplicationID(u)
	return ashuo
}

// SetStatus sets the "status" field.
func (ashuo *ApplicationStatusHistoryUpdateOne) SetStatus(a applicationstatushistory.Status) *ApplicationStatusHistoryUpdateOne {
	ashuo.mutation.SetStatus(a)
	return ashuo
}

// SetApplicationsID sets the "applications" edge to the Application entity by ID.
func (ashuo *ApplicationStatusHistoryUpdateOne) SetApplicationsID(id uuid.UUID) *ApplicationStatusHistoryUpdateOne {
	ashuo.mutation.SetApplicationsID(id)
	return ashuo
}

// SetApplications sets the "applications" edge to the Application entity.
func (ashuo *ApplicationStatusHistoryUpdateOne) SetApplications(a *Application) *ApplicationStatusHistoryUpdateOne {
	return ashuo.SetApplicationsID(a.ID)
}

// Mutation returns the ApplicationStatusHistoryMutation object of the builder.
func (ashuo *ApplicationStatusHistoryUpdateOne) Mutation() *ApplicationStatusHistoryMutation {
	return ashuo.mutation
}

// ClearApplications clears the "applications" edge to the Application entity.
func (ashuo *ApplicationStatusHistoryUpdateOne) ClearApplications() *ApplicationStatusHistoryUpdateOne {
	ashuo.mutation.ClearApplications()
	return ashuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ashuo *ApplicationStatusHistoryUpdateOne) Select(field string, fields ...string) *ApplicationStatusHistoryUpdateOne {
	ashuo.fields = append([]string{field}, fields...)
	return ashuo
}

// Save executes the query and returns the updated ApplicationStatusHistory entity.
func (ashuo *ApplicationStatusHistoryUpdateOne) Save(ctx context.Context) (*ApplicationStatusHistory, error) {
	var (
		err  error
		node *ApplicationStatusHistory
	)
	if len(ashuo.hooks) == 0 {
		if err = ashuo.check(); err != nil {
			return nil, err
		}
		node, err = ashuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ApplicationStatusHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ashuo.check(); err != nil {
				return nil, err
			}
			ashuo.mutation = mutation
			node, err = ashuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ashuo.hooks) - 1; i >= 0; i-- {
			if ashuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ashuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ashuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ashuo *ApplicationStatusHistoryUpdateOne) SaveX(ctx context.Context) *ApplicationStatusHistory {
	node, err := ashuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ashuo *ApplicationStatusHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ashuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ashuo *ApplicationStatusHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := ashuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ashuo *ApplicationStatusHistoryUpdateOne) check() error {
	if v, ok := ashuo.mutation.Status(); ok {
		if err := applicationstatushistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ApplicationStatusHistory.status": %w`, err)}
		}
	}
	if _, ok := ashuo.mutation.ApplicationsID(); ashuo.mutation.ApplicationsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ApplicationStatusHistory.applications"`)
	}
	return nil
}

func (ashuo *ApplicationStatusHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ApplicationStatusHistory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   applicationstatushistory.Table,
			Columns: applicationstatushistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: applicationstatushistory.FieldID,
			},
		},
	}
	id, ok := ashuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ApplicationStatusHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ashuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, applicationstatushistory.FieldID)
		for _, f := range fields {
			if !applicationstatushistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != applicationstatushistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ashuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ashuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: applicationstatushistory.FieldStatus,
		})
	}
	if ashuo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicationstatushistory.ApplicationsTable,
			Columns: []string{applicationstatushistory.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: application.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ashuo.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicationstatushistory.ApplicationsTable,
			Columns: []string{applicationstatushistory.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: application.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ApplicationStatusHistory{config: ashuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ashuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applicationstatushistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
