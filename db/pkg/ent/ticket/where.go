// Code generated by entc, DO NOT EDIT.

package ticket

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ApplicationID applies equality check predicate on the "application_id" field. It's identical to ApplicationIDEQ.
func ApplicationID(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApplicationID), v))
	})
}

// Creator applies equality check predicate on the "creator" field. It's identical to CreatorEQ.
func Creator(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreator), v))
	})
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// Reply applies equality check predicate on the "reply" field. It's identical to ReplyEQ.
func Reply(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReply), v))
	})
}

// Replier applies equality check predicate on the "replier" field. It's identical to ReplierEQ.
func Replier(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReplier), v))
	})
}

// Reviewer applies equality check predicate on the "reviewer" field. It's identical to ReviewerEQ.
func Reviewer(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReviewer), v))
	})
}

// ReviewRemark applies equality check predicate on the "review_remark" field. It's identical to ReviewRemarkEQ.
func ReviewRemark(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReviewRemark), v))
	})
}

// RepliedDtime applies equality check predicate on the "replied_dtime" field. It's identical to RepliedDtimeEQ.
func RepliedDtime(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepliedDtime), v))
	})
}

// ReviewedDtime applies equality check predicate on the "reviewed_dtime" field. It's identical to ReviewedDtimeEQ.
func ReviewedDtime(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReviewedDtime), v))
	})
}

// CreatedDtime applies equality check predicate on the "created_dtime" field. It's identical to CreatedDtimeEQ.
func CreatedDtime(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedDtime), v))
	})
}

// UpdatedDtime applies equality check predicate on the "updated_dtime" field. It's identical to UpdatedDtimeEQ.
func UpdatedDtime(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedDtime), v))
	})
}

// ApplicationIDEQ applies the EQ predicate on the "application_id" field.
func ApplicationIDEQ(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApplicationID), v))
	})
}

// ApplicationIDNEQ applies the NEQ predicate on the "application_id" field.
func ApplicationIDNEQ(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldApplicationID), v))
	})
}

// ApplicationIDIn applies the In predicate on the "application_id" field.
func ApplicationIDIn(vs ...uuid.UUID) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldApplicationID), v...))
	})
}

// ApplicationIDNotIn applies the NotIn predicate on the "application_id" field.
func ApplicationIDNotIn(vs ...uuid.UUID) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldApplicationID), v...))
	})
}

// ApplicationIDGT applies the GT predicate on the "application_id" field.
func ApplicationIDGT(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldApplicationID), v))
	})
}

// ApplicationIDGTE applies the GTE predicate on the "application_id" field.
func ApplicationIDGTE(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldApplicationID), v))
	})
}

// ApplicationIDLT applies the LT predicate on the "application_id" field.
func ApplicationIDLT(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldApplicationID), v))
	})
}

// ApplicationIDLTE applies the LTE predicate on the "application_id" field.
func ApplicationIDLTE(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldApplicationID), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// CreatorEQ applies the EQ predicate on the "creator" field.
func CreatorEQ(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreator), v))
	})
}

// CreatorNEQ applies the NEQ predicate on the "creator" field.
func CreatorNEQ(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreator), v))
	})
}

// CreatorIn applies the In predicate on the "creator" field.
func CreatorIn(vs ...string) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreator), v...))
	})
}

// CreatorNotIn applies the NotIn predicate on the "creator" field.
func CreatorNotIn(vs ...string) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreator), v...))
	})
}

// CreatorGT applies the GT predicate on the "creator" field.
func CreatorGT(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreator), v))
	})
}

// CreatorGTE applies the GTE predicate on the "creator" field.
func CreatorGTE(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreator), v))
	})
}

// CreatorLT applies the LT predicate on the "creator" field.
func CreatorLT(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreator), v))
	})
}

// CreatorLTE applies the LTE predicate on the "creator" field.
func CreatorLTE(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreator), v))
	})
}

// CreatorContains applies the Contains predicate on the "creator" field.
func CreatorContains(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreator), v))
	})
}

// CreatorHasPrefix applies the HasPrefix predicate on the "creator" field.
func CreatorHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreator), v))
	})
}

// CreatorHasSuffix applies the HasSuffix predicate on the "creator" field.
func CreatorHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreator), v))
	})
}

// CreatorEqualFold applies the EqualFold predicate on the "creator" field.
func CreatorEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreator), v))
	})
}

// CreatorContainsFold applies the ContainsFold predicate on the "creator" field.
func CreatorContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreator), v))
	})
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContent), v))
	})
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContent), v...))
	})
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContent), v...))
	})
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContent), v))
	})
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContent), v))
	})
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContent), v))
	})
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContent), v))
	})
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContent), v))
	})
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContent), v))
	})
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContent), v))
	})
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContent), v))
	})
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContent), v))
	})
}

// ReplyEQ applies the EQ predicate on the "reply" field.
func ReplyEQ(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReply), v))
	})
}

// ReplyNEQ applies the NEQ predicate on the "reply" field.
func ReplyNEQ(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReply), v))
	})
}

// ReplyIn applies the In predicate on the "reply" field.
func ReplyIn(vs ...string) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReply), v...))
	})
}

// ReplyNotIn applies the NotIn predicate on the "reply" field.
func ReplyNotIn(vs ...string) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReply), v...))
	})
}

// ReplyGT applies the GT predicate on the "reply" field.
func ReplyGT(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReply), v))
	})
}

// ReplyGTE applies the GTE predicate on the "reply" field.
func ReplyGTE(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReply), v))
	})
}

// ReplyLT applies the LT predicate on the "reply" field.
func ReplyLT(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReply), v))
	})
}

// ReplyLTE applies the LTE predicate on the "reply" field.
func ReplyLTE(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReply), v))
	})
}

// ReplyContains applies the Contains predicate on the "reply" field.
func ReplyContains(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReply), v))
	})
}

// ReplyHasPrefix applies the HasPrefix predicate on the "reply" field.
func ReplyHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReply), v))
	})
}

// ReplyHasSuffix applies the HasSuffix predicate on the "reply" field.
func ReplyHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReply), v))
	})
}

// ReplyEqualFold applies the EqualFold predicate on the "reply" field.
func ReplyEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReply), v))
	})
}

// ReplyContainsFold applies the ContainsFold predicate on the "reply" field.
func ReplyContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReply), v))
	})
}

// ReplierEQ applies the EQ predicate on the "replier" field.
func ReplierEQ(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReplier), v))
	})
}

// ReplierNEQ applies the NEQ predicate on the "replier" field.
func ReplierNEQ(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReplier), v))
	})
}

// ReplierIn applies the In predicate on the "replier" field.
func ReplierIn(vs ...string) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReplier), v...))
	})
}

// ReplierNotIn applies the NotIn predicate on the "replier" field.
func ReplierNotIn(vs ...string) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReplier), v...))
	})
}

// ReplierGT applies the GT predicate on the "replier" field.
func ReplierGT(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReplier), v))
	})
}

// ReplierGTE applies the GTE predicate on the "replier" field.
func ReplierGTE(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReplier), v))
	})
}

// ReplierLT applies the LT predicate on the "replier" field.
func ReplierLT(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReplier), v))
	})
}

// ReplierLTE applies the LTE predicate on the "replier" field.
func ReplierLTE(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReplier), v))
	})
}

// ReplierContains applies the Contains predicate on the "replier" field.
func ReplierContains(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReplier), v))
	})
}

// ReplierHasPrefix applies the HasPrefix predicate on the "replier" field.
func ReplierHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReplier), v))
	})
}

// ReplierHasSuffix applies the HasSuffix predicate on the "replier" field.
func ReplierHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReplier), v))
	})
}

// ReplierEqualFold applies the EqualFold predicate on the "replier" field.
func ReplierEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReplier), v))
	})
}

// ReplierContainsFold applies the ContainsFold predicate on the "replier" field.
func ReplierContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReplier), v))
	})
}

// ReviewerEQ applies the EQ predicate on the "reviewer" field.
func ReviewerEQ(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReviewer), v))
	})
}

// ReviewerNEQ applies the NEQ predicate on the "reviewer" field.
func ReviewerNEQ(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReviewer), v))
	})
}

// ReviewerIn applies the In predicate on the "reviewer" field.
func ReviewerIn(vs ...string) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReviewer), v...))
	})
}

// ReviewerNotIn applies the NotIn predicate on the "reviewer" field.
func ReviewerNotIn(vs ...string) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReviewer), v...))
	})
}

// ReviewerGT applies the GT predicate on the "reviewer" field.
func ReviewerGT(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReviewer), v))
	})
}

// ReviewerGTE applies the GTE predicate on the "reviewer" field.
func ReviewerGTE(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReviewer), v))
	})
}

// ReviewerLT applies the LT predicate on the "reviewer" field.
func ReviewerLT(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReviewer), v))
	})
}

// ReviewerLTE applies the LTE predicate on the "reviewer" field.
func ReviewerLTE(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReviewer), v))
	})
}

// ReviewerContains applies the Contains predicate on the "reviewer" field.
func ReviewerContains(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReviewer), v))
	})
}

// ReviewerHasPrefix applies the HasPrefix predicate on the "reviewer" field.
func ReviewerHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReviewer), v))
	})
}

// ReviewerHasSuffix applies the HasSuffix predicate on the "reviewer" field.
func ReviewerHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReviewer), v))
	})
}

// ReviewerEqualFold applies the EqualFold predicate on the "reviewer" field.
func ReviewerEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReviewer), v))
	})
}

// ReviewerContainsFold applies the ContainsFold predicate on the "reviewer" field.
func ReviewerContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReviewer), v))
	})
}

// ReviewRemarkEQ applies the EQ predicate on the "review_remark" field.
func ReviewRemarkEQ(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReviewRemark), v))
	})
}

// ReviewRemarkNEQ applies the NEQ predicate on the "review_remark" field.
func ReviewRemarkNEQ(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReviewRemark), v))
	})
}

// ReviewRemarkIn applies the In predicate on the "review_remark" field.
func ReviewRemarkIn(vs ...string) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReviewRemark), v...))
	})
}

// ReviewRemarkNotIn applies the NotIn predicate on the "review_remark" field.
func ReviewRemarkNotIn(vs ...string) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReviewRemark), v...))
	})
}

// ReviewRemarkGT applies the GT predicate on the "review_remark" field.
func ReviewRemarkGT(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReviewRemark), v))
	})
}

// ReviewRemarkGTE applies the GTE predicate on the "review_remark" field.
func ReviewRemarkGTE(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReviewRemark), v))
	})
}

// ReviewRemarkLT applies the LT predicate on the "review_remark" field.
func ReviewRemarkLT(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReviewRemark), v))
	})
}

// ReviewRemarkLTE applies the LTE predicate on the "review_remark" field.
func ReviewRemarkLTE(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReviewRemark), v))
	})
}

// ReviewRemarkContains applies the Contains predicate on the "review_remark" field.
func ReviewRemarkContains(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReviewRemark), v))
	})
}

// ReviewRemarkHasPrefix applies the HasPrefix predicate on the "review_remark" field.
func ReviewRemarkHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReviewRemark), v))
	})
}

// ReviewRemarkHasSuffix applies the HasSuffix predicate on the "review_remark" field.
func ReviewRemarkHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReviewRemark), v))
	})
}

// ReviewRemarkEqualFold applies the EqualFold predicate on the "review_remark" field.
func ReviewRemarkEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReviewRemark), v))
	})
}

// ReviewRemarkContainsFold applies the ContainsFold predicate on the "review_remark" field.
func ReviewRemarkContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReviewRemark), v))
	})
}

// RepliedDtimeEQ applies the EQ predicate on the "replied_dtime" field.
func RepliedDtimeEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepliedDtime), v))
	})
}

// RepliedDtimeNEQ applies the NEQ predicate on the "replied_dtime" field.
func RepliedDtimeNEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRepliedDtime), v))
	})
}

// RepliedDtimeIn applies the In predicate on the "replied_dtime" field.
func RepliedDtimeIn(vs ...time.Time) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRepliedDtime), v...))
	})
}

// RepliedDtimeNotIn applies the NotIn predicate on the "replied_dtime" field.
func RepliedDtimeNotIn(vs ...time.Time) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRepliedDtime), v...))
	})
}

// RepliedDtimeGT applies the GT predicate on the "replied_dtime" field.
func RepliedDtimeGT(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRepliedDtime), v))
	})
}

// RepliedDtimeGTE applies the GTE predicate on the "replied_dtime" field.
func RepliedDtimeGTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRepliedDtime), v))
	})
}

// RepliedDtimeLT applies the LT predicate on the "replied_dtime" field.
func RepliedDtimeLT(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRepliedDtime), v))
	})
}

// RepliedDtimeLTE applies the LTE predicate on the "replied_dtime" field.
func RepliedDtimeLTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRepliedDtime), v))
	})
}

// ReviewedDtimeEQ applies the EQ predicate on the "reviewed_dtime" field.
func ReviewedDtimeEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReviewedDtime), v))
	})
}

// ReviewedDtimeNEQ applies the NEQ predicate on the "reviewed_dtime" field.
func ReviewedDtimeNEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReviewedDtime), v))
	})
}

// ReviewedDtimeIn applies the In predicate on the "reviewed_dtime" field.
func ReviewedDtimeIn(vs ...time.Time) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReviewedDtime), v...))
	})
}

// ReviewedDtimeNotIn applies the NotIn predicate on the "reviewed_dtime" field.
func ReviewedDtimeNotIn(vs ...time.Time) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReviewedDtime), v...))
	})
}

// ReviewedDtimeGT applies the GT predicate on the "reviewed_dtime" field.
func ReviewedDtimeGT(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReviewedDtime), v))
	})
}

// ReviewedDtimeGTE applies the GTE predicate on the "reviewed_dtime" field.
func ReviewedDtimeGTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReviewedDtime), v))
	})
}

// ReviewedDtimeLT applies the LT predicate on the "reviewed_dtime" field.
func ReviewedDtimeLT(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReviewedDtime), v))
	})
}

// ReviewedDtimeLTE applies the LTE predicate on the "reviewed_dtime" field.
func ReviewedDtimeLTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReviewedDtime), v))
	})
}

// CreatedDtimeEQ applies the EQ predicate on the "created_dtime" field.
func CreatedDtimeEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedDtime), v))
	})
}

// CreatedDtimeNEQ applies the NEQ predicate on the "created_dtime" field.
func CreatedDtimeNEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedDtime), v))
	})
}

// CreatedDtimeIn applies the In predicate on the "created_dtime" field.
func CreatedDtimeIn(vs ...time.Time) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedDtime), v...))
	})
}

// CreatedDtimeNotIn applies the NotIn predicate on the "created_dtime" field.
func CreatedDtimeNotIn(vs ...time.Time) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedDtime), v...))
	})
}

// CreatedDtimeGT applies the GT predicate on the "created_dtime" field.
func CreatedDtimeGT(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedDtime), v))
	})
}

// CreatedDtimeGTE applies the GTE predicate on the "created_dtime" field.
func CreatedDtimeGTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedDtime), v))
	})
}

// CreatedDtimeLT applies the LT predicate on the "created_dtime" field.
func CreatedDtimeLT(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedDtime), v))
	})
}

// CreatedDtimeLTE applies the LTE predicate on the "created_dtime" field.
func CreatedDtimeLTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedDtime), v))
	})
}

// UpdatedDtimeEQ applies the EQ predicate on the "updated_dtime" field.
func UpdatedDtimeEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedDtime), v))
	})
}

// UpdatedDtimeNEQ applies the NEQ predicate on the "updated_dtime" field.
func UpdatedDtimeNEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedDtime), v))
	})
}

// UpdatedDtimeIn applies the In predicate on the "updated_dtime" field.
func UpdatedDtimeIn(vs ...time.Time) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedDtime), v...))
	})
}

// UpdatedDtimeNotIn applies the NotIn predicate on the "updated_dtime" field.
func UpdatedDtimeNotIn(vs ...time.Time) predicate.Ticket {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedDtime), v...))
	})
}

// UpdatedDtimeGT applies the GT predicate on the "updated_dtime" field.
func UpdatedDtimeGT(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedDtime), v))
	})
}

// UpdatedDtimeGTE applies the GTE predicate on the "updated_dtime" field.
func UpdatedDtimeGTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedDtime), v))
	})
}

// UpdatedDtimeLT applies the LT predicate on the "updated_dtime" field.
func UpdatedDtimeLT(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedDtime), v))
	})
}

// UpdatedDtimeLTE applies the LTE predicate on the "updated_dtime" field.
func UpdatedDtimeLTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedDtime), v))
	})
}

// HasApplications applies the HasEdge predicate on the "applications" edge.
func HasApplications() predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ApplicationsTable, ApplicationFieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ApplicationsTable, ApplicationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplicationsWith applies the HasEdge predicate on the "applications" edge with a given conditions (other predicates).
func HasApplicationsWith(preds ...predicate.Application) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ApplicationsInverseTable, ApplicationFieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ApplicationsTable, ApplicationsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAttachments applies the HasEdge predicate on the "attachments" edge.
func HasAttachments() predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttachmentsTable, AttachmentFieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttachmentsTable, AttachmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttachmentsWith applies the HasEdge predicate on the "attachments" edge with a given conditions (other predicates).
func HasAttachmentsWith(preds ...predicate.Attachment) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttachmentsInverseTable, AttachmentFieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttachmentsTable, AttachmentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		p(s.Not())
	})
}
