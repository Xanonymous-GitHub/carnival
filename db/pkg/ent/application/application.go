// Code generated by entc, DO NOT EDIT.

package application

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the application type in the database.
	Label = "application"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "application_id"
	// FieldBasicID holds the string denoting the basic_id field in the database.
	FieldBasicID = "basic_id"
	// FieldPremiumID holds the string denoting the premium_id field in the database.
	FieldPremiumID = "premium_id"
	// FieldBotDisplayName holds the string denoting the bot_display_name field in the database.
	FieldBotDisplayName = "bot_display_name"
	// FieldBotMid holds the string denoting the bot_mid field in the database.
	FieldBotMid = "bot_mid"
	// FieldBotActiveStatus holds the string denoting the bot_active_status field in the database.
	FieldBotActiveStatus = "bot_active_status"
	// FieldApplicantName holds the string denoting the applicant_name field in the database.
	FieldApplicantName = "applicant_name"
	// FieldApplicantEmail holds the string denoting the applicant_email field in the database.
	FieldApplicantEmail = "applicant_email"
	// FieldApplicationMid holds the string denoting the application_mid field in the database.
	FieldApplicationMid = "application_mid"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldStoreType holds the string denoting the store_type field in the database.
	FieldStoreType = "store_type"
	// FieldWebsiteURL holds the string denoting the website_url field in the database.
	FieldWebsiteURL = "website_url"
	// FieldApplicationStatus holds the string denoting the application_status field in the database.
	FieldApplicationStatus = "application_status"
	// FieldReviewComment holds the string denoting the review_comment field in the database.
	FieldReviewComment = "review_comment"
	// FieldAssigner holds the string denoting the assigner field in the database.
	FieldAssigner = "assigner"
	// FieldAssignee holds the string denoting the assignee field in the database.
	FieldAssignee = "assignee"
	// FieldCreatedDtime holds the string denoting the created_dtime field in the database.
	FieldCreatedDtime = "created_dtime"
	// FieldUpdateDtime holds the string denoting the update_dtime field in the database.
	FieldUpdateDtime = "update_dtime"
	// EdgeTickets holds the string denoting the tickets edge name in mutations.
	EdgeTickets = "tickets"
	// EdgeAssignmentHistories holds the string denoting the assignment_histories edge name in mutations.
	EdgeAssignmentHistories = "assignment_histories"
	// EdgeStatusHistories holds the string denoting the status_histories edge name in mutations.
	EdgeStatusHistories = "status_histories"
	// EdgeAttachments holds the string denoting the attachments edge name in mutations.
	EdgeAttachments = "attachments"
	// TicketFieldID holds the string denoting the ID field of the Ticket.
	TicketFieldID = "ticket_id"
	// ApplicationAssignmentHistoryFieldID holds the string denoting the ID field of the ApplicationAssignmentHistory.
	ApplicationAssignmentHistoryFieldID = "id"
	// ApplicationStatusHistoryFieldID holds the string denoting the ID field of the ApplicationStatusHistory.
	ApplicationStatusHistoryFieldID = "id"
	// AttachmentFieldID holds the string denoting the ID field of the Attachment.
	AttachmentFieldID = "id"
	// Table holds the table name of the application in the database.
	Table = "applications"
	// TicketsTable is the table that holds the tickets relation/edge.
	TicketsTable = "tickets"
	// TicketsInverseTable is the table name for the Ticket entity.
	// It exists in this package in order to avoid circular dependency with the "ticket" package.
	TicketsInverseTable = "tickets"
	// TicketsColumn is the table column denoting the tickets relation/edge.
	TicketsColumn = "application_tickets"
	// AssignmentHistoriesTable is the table that holds the assignment_histories relation/edge.
	AssignmentHistoriesTable = "application_assignment_histories"
	// AssignmentHistoriesInverseTable is the table name for the ApplicationAssignmentHistory entity.
	// It exists in this package in order to avoid circular dependency with the "applicationassignmenthistory" package.
	AssignmentHistoriesInverseTable = "application_assignment_histories"
	// AssignmentHistoriesColumn is the table column denoting the assignment_histories relation/edge.
	AssignmentHistoriesColumn = "application_assignment_histories"
	// StatusHistoriesTable is the table that holds the status_histories relation/edge.
	StatusHistoriesTable = "application_status_histories"
	// StatusHistoriesInverseTable is the table name for the ApplicationStatusHistory entity.
	// It exists in this package in order to avoid circular dependency with the "applicationstatushistory" package.
	StatusHistoriesInverseTable = "application_status_histories"
	// StatusHistoriesColumn is the table column denoting the status_histories relation/edge.
	StatusHistoriesColumn = "application_status_histories"
	// AttachmentsTable is the table that holds the attachments relation/edge.
	AttachmentsTable = "attachments"
	// AttachmentsInverseTable is the table name for the Attachment entity.
	// It exists in this package in order to avoid circular dependency with the "attachment" package.
	AttachmentsInverseTable = "attachments"
	// AttachmentsColumn is the table column denoting the attachments relation/edge.
	AttachmentsColumn = "application_attachments"
)

// Columns holds all SQL columns for application fields.
var Columns = []string{
	FieldID,
	FieldBasicID,
	FieldPremiumID,
	FieldBotDisplayName,
	FieldBotMid,
	FieldBotActiveStatus,
	FieldApplicantName,
	FieldApplicantEmail,
	FieldApplicationMid,
	FieldRemark,
	FieldStoreType,
	FieldWebsiteURL,
	FieldApplicationStatus,
	FieldReviewComment,
	FieldAssigner,
	FieldAssignee,
	FieldCreatedDtime,
	FieldUpdateDtime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// BasicIDValidator is a validator for the "basic_id" field. It is called by the builders before save.
	BasicIDValidator func(string) error
	// PremiumIDValidator is a validator for the "premium_id" field. It is called by the builders before save.
	PremiumIDValidator func(string) error
	// BotDisplayNameValidator is a validator for the "bot_display_name" field. It is called by the builders before save.
	BotDisplayNameValidator func(string) error
	// BotMidValidator is a validator for the "bot_mid" field. It is called by the builders before save.
	BotMidValidator func(string) error
	// ApplicantNameValidator is a validator for the "applicant_name" field. It is called by the builders before save.
	ApplicantNameValidator func(string) error
	// ApplicantEmailValidator is a validator for the "applicant_email" field. It is called by the builders before save.
	ApplicantEmailValidator func(string) error
	// ApplicationMidValidator is a validator for the "application_mid" field. It is called by the builders before save.
	ApplicationMidValidator func(string) error
	// RemarkValidator is a validator for the "remark" field. It is called by the builders before save.
	RemarkValidator func(string) error
	// ReviewCommentValidator is a validator for the "review_comment" field. It is called by the builders before save.
	ReviewCommentValidator func(string) error
	// AssignerValidator is a validator for the "assigner" field. It is called by the builders before save.
	AssignerValidator func(string) error
	// AssigneeValidator is a validator for the "assignee" field. It is called by the builders before save.
	AssigneeValidator func(string) error
	// DefaultCreatedDtime holds the default value on creation for the "created_dtime" field.
	DefaultCreatedDtime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// BotActiveStatus defines the type for the "bot_active_status" enum field.
type BotActiveStatus string

// BotActiveStatus values.
const (
	BotActiveStatusActive  BotActiveStatus = "active"
	BotActiveStatusSuspend BotActiveStatus = "suspend"
	BotActiveStatusDelete  BotActiveStatus = "delete"
)

func (bas BotActiveStatus) String() string {
	return string(bas)
}

// BotActiveStatusValidator is a validator for the "bot_active_status" field enum values. It is called by the builders before save.
func BotActiveStatusValidator(bas BotActiveStatus) error {
	switch bas {
	case BotActiveStatusActive, BotActiveStatusSuspend, BotActiveStatusDelete:
		return nil
	default:
		return fmt.Errorf("application: invalid enum value for bot_active_status field: %q", bas)
	}
}

// StoreType defines the type for the "store_type" enum field.
type StoreType string

// StoreType values.
const (
	StoreTypeOnlineStore   StoreType = "online_store"
	StoreTypePhysicalStore StoreType = "physical_store"
)

func (st StoreType) String() string {
	return string(st)
}

// StoreTypeValidator is a validator for the "store_type" field enum values. It is called by the builders before save.
func StoreTypeValidator(st StoreType) error {
	switch st {
	case StoreTypeOnlineStore, StoreTypePhysicalStore:
		return nil
	default:
		return fmt.Errorf("application: invalid enum value for store_type field: %q", st)
	}
}

// ApplicationStatus defines the type for the "application_status" enum field.
type ApplicationStatus string

// ApplicationStatus values.
const (
	ApplicationStatusWip       ApplicationStatus = "wip"
	ApplicationStatusReviewing ApplicationStatus = "reviewing"
	ApplicationStatusVerified  ApplicationStatus = "verified"
	ApplicationStatusRejected  ApplicationStatus = "rejected"
	ApplicationStatusWaiting   ApplicationStatus = "waiting"
	ApplicationStatusReplied   ApplicationStatus = "replied"
	ApplicationStatusRevoked   ApplicationStatus = "revoked"
	ApplicationStatusCanceling ApplicationStatus = "canceling"
)

func (as ApplicationStatus) String() string {
	return string(as)
}

// ApplicationStatusValidator is a validator for the "application_status" field enum values. It is called by the builders before save.
func ApplicationStatusValidator(as ApplicationStatus) error {
	switch as {
	case ApplicationStatusWip, ApplicationStatusReviewing, ApplicationStatusVerified, ApplicationStatusRejected, ApplicationStatusWaiting, ApplicationStatusReplied, ApplicationStatusRevoked, ApplicationStatusCanceling:
		return nil
	default:
		return fmt.Errorf("application: invalid enum value for application_status field: %q", as)
	}
}
