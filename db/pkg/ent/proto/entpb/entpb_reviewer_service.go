// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/Xanonymous-GitHub/carnival/db/pkg/ent"
	reviewer "github.com/Xanonymous-GitHub/carnival/db/pkg/ent/reviewer"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strings "strings"
)

// ReviewerService implements ReviewerServiceServer
type ReviewerService struct {
	client *ent.Client
	UnimplementedReviewerServiceServer
}

// NewReviewerService returns a new ReviewerService
func NewReviewerService(client *ent.Client) *ReviewerService {
	return &ReviewerService{
		client: client,
	}
}

func toProtoReviewer_IimsRole(e reviewer.IimsRole) Reviewer_IimsRole {
	if v, ok := Reviewer_IimsRole_value[strings.ToUpper(string(e))]; ok {
		return Reviewer_IimsRole(v)
	}
	return Reviewer_IimsRole(0)
}

func toEntReviewer_IimsRole(e Reviewer_IimsRole) reviewer.IimsRole {
	if v, ok := Reviewer_IimsRole_name[int32(e)]; ok {
		return reviewer.IimsRole(strings.ToLower(v))
	}
	return ""
}

// toProtoReviewer transforms the ent type to the pb type
func toProtoReviewer(e *ent.Reviewer) (*Reviewer, error) {
	v := &Reviewer{}
	createddtime := timestamppb.New(e.CreatedDtime)
	v.CreatedDtime = createddtime
	id := e.ID
	v.Id = id
	iimsrole := toProtoReviewer_IimsRole(e.IimsRole)
	v.IimsRole = iimsrole
	reviewername := e.ReviewerName
	v.ReviewerName = reviewername
	return v, nil
}

// Create implements ReviewerServiceServer.Create
func (svc *ReviewerService) Create(ctx context.Context, req *CreateReviewerRequest) (*Reviewer, error) {
	reviewer := req.GetReviewer()
	m := svc.client.Reviewer.Create()
	reviewerCreatedDtime := runtime.ExtractTime(reviewer.GetCreatedDtime())
	m.SetCreatedDtime(reviewerCreatedDtime)
	reviewerIimsRole := toEntReviewer_IimsRole(reviewer.GetIimsRole())
	m.SetIimsRole(reviewerIimsRole)
	reviewerReviewerName := reviewer.GetReviewerName()
	m.SetReviewerName(reviewerReviewerName)
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoReviewer(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements ReviewerServiceServer.Get
func (svc *ReviewerService) Get(ctx context.Context, req *GetReviewerRequest) (*Reviewer, error) {
	var (
		err error
		get *ent.Reviewer
	)
	id := req.GetId()
	switch req.GetView() {
	case GetReviewerRequest_VIEW_UNSPECIFIED, GetReviewerRequest_BASIC:
		get, err = svc.client.Reviewer.Get(ctx, id)
	case GetReviewerRequest_WITH_EDGE_IDS:
		get, err = svc.client.Reviewer.Query().
			Where(reviewer.ID(id)).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoReviewer(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}
	return nil, nil

}

// Update implements ReviewerServiceServer.Update
func (svc *ReviewerService) Update(ctx context.Context, req *UpdateReviewerRequest) (*Reviewer, error) {
	reviewer := req.GetReviewer()
	reviewerID := reviewer.GetId()
	m := svc.client.Reviewer.UpdateOneID(reviewerID)
	reviewerIimsRole := toEntReviewer_IimsRole(reviewer.GetIimsRole())
	m.SetIimsRole(reviewerIimsRole)
	reviewerReviewerName := reviewer.GetReviewerName()
	m.SetReviewerName(reviewerReviewerName)
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoReviewer(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements ReviewerServiceServer.Delete
func (svc *ReviewerService) Delete(ctx context.Context, req *DeleteReviewerRequest) (*emptypb.Empty, error) {
	var err error
	id := req.GetId()
	err = svc.client.Reviewer.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements ReviewerServiceServer.List
func (svc *ReviewerService) List(ctx context.Context, req *ListReviewerRequest) (*ListReviewerResponse, error) {
	var (
		err      error
		entList  []*ent.Reviewer
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Reviewer.Query().
		Order(ent.Desc(reviewer.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := string(bytes)
		listQuery = listQuery.
			Where(reviewer.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListReviewerRequest_VIEW_UNSPECIFIED, ListReviewerRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListReviewerRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		var pbList []*Reviewer
		for _, entEntity := range entList {
			pbEntity, err := toProtoReviewer(entEntity)
			if err != nil {
				return nil, status.Errorf(codes.Internal, "internal error: %s", err)
			}
			pbList = append(pbList, pbEntity)
		}
		return &ListReviewerResponse{
			ReviewerList:  pbList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}
