// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: entpb/entpb.proto

package entpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApplicationServiceClient is the client API for ApplicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationServiceClient interface {
	Create(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*Application, error)
	Get(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*Application, error)
	Update(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*Application, error)
	Delete(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ListApplicationRequest, opts ...grpc.CallOption) (*ListApplicationResponse, error)
}

type applicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationServiceClient(cc grpc.ClientConnInterface) ApplicationServiceClient {
	return &applicationServiceClient{cc}
}

func (c *applicationServiceClient) Create(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, "/entpb.ApplicationService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) Get(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, "/entpb.ApplicationService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) Update(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, "/entpb.ApplicationService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) Delete(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/entpb.ApplicationService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) List(ctx context.Context, in *ListApplicationRequest, opts ...grpc.CallOption) (*ListApplicationResponse, error) {
	out := new(ListApplicationResponse)
	err := c.cc.Invoke(ctx, "/entpb.ApplicationService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationServiceServer is the server API for ApplicationService service.
// All implementations must embed UnimplementedApplicationServiceServer
// for forward compatibility
type ApplicationServiceServer interface {
	Create(context.Context, *CreateApplicationRequest) (*Application, error)
	Get(context.Context, *GetApplicationRequest) (*Application, error)
	Update(context.Context, *UpdateApplicationRequest) (*Application, error)
	Delete(context.Context, *DeleteApplicationRequest) (*emptypb.Empty, error)
	List(context.Context, *ListApplicationRequest) (*ListApplicationResponse, error)
	mustEmbedUnimplementedApplicationServiceServer()
}

// UnimplementedApplicationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationServiceServer struct {
}

func (UnimplementedApplicationServiceServer) Create(context.Context, *CreateApplicationRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedApplicationServiceServer) Get(context.Context, *GetApplicationRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedApplicationServiceServer) Update(context.Context, *UpdateApplicationRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedApplicationServiceServer) Delete(context.Context, *DeleteApplicationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedApplicationServiceServer) List(context.Context, *ListApplicationRequest) (*ListApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedApplicationServiceServer) mustEmbedUnimplementedApplicationServiceServer() {}

// UnsafeApplicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationServiceServer will
// result in compilation errors.
type UnsafeApplicationServiceServer interface {
	mustEmbedUnimplementedApplicationServiceServer()
}

func RegisterApplicationServiceServer(s grpc.ServiceRegistrar, srv ApplicationServiceServer) {
	s.RegisterService(&ApplicationService_ServiceDesc, srv)
}

func _ApplicationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ApplicationService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).Create(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ApplicationService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).Get(ctx, req.(*GetApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ApplicationService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).Update(ctx, req.(*UpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ApplicationService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).Delete(ctx, req.(*DeleteApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ApplicationService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).List(ctx, req.(*ListApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationService_ServiceDesc is the grpc.ServiceDesc for ApplicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.ApplicationService",
	HandlerType: (*ApplicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ApplicationService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ApplicationService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ApplicationService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ApplicationService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ApplicationService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

// ApplicationAssignmentHistoryServiceClient is the client API for ApplicationAssignmentHistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationAssignmentHistoryServiceClient interface {
	Create(ctx context.Context, in *CreateApplicationAssignmentHistoryRequest, opts ...grpc.CallOption) (*ApplicationAssignmentHistory, error)
	Get(ctx context.Context, in *GetApplicationAssignmentHistoryRequest, opts ...grpc.CallOption) (*ApplicationAssignmentHistory, error)
	Update(ctx context.Context, in *UpdateApplicationAssignmentHistoryRequest, opts ...grpc.CallOption) (*ApplicationAssignmentHistory, error)
	Delete(ctx context.Context, in *DeleteApplicationAssignmentHistoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ListApplicationAssignmentHistoryRequest, opts ...grpc.CallOption) (*ListApplicationAssignmentHistoryResponse, error)
}

type applicationAssignmentHistoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationAssignmentHistoryServiceClient(cc grpc.ClientConnInterface) ApplicationAssignmentHistoryServiceClient {
	return &applicationAssignmentHistoryServiceClient{cc}
}

func (c *applicationAssignmentHistoryServiceClient) Create(ctx context.Context, in *CreateApplicationAssignmentHistoryRequest, opts ...grpc.CallOption) (*ApplicationAssignmentHistory, error) {
	out := new(ApplicationAssignmentHistory)
	err := c.cc.Invoke(ctx, "/entpb.ApplicationAssignmentHistoryService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationAssignmentHistoryServiceClient) Get(ctx context.Context, in *GetApplicationAssignmentHistoryRequest, opts ...grpc.CallOption) (*ApplicationAssignmentHistory, error) {
	out := new(ApplicationAssignmentHistory)
	err := c.cc.Invoke(ctx, "/entpb.ApplicationAssignmentHistoryService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationAssignmentHistoryServiceClient) Update(ctx context.Context, in *UpdateApplicationAssignmentHistoryRequest, opts ...grpc.CallOption) (*ApplicationAssignmentHistory, error) {
	out := new(ApplicationAssignmentHistory)
	err := c.cc.Invoke(ctx, "/entpb.ApplicationAssignmentHistoryService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationAssignmentHistoryServiceClient) Delete(ctx context.Context, in *DeleteApplicationAssignmentHistoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/entpb.ApplicationAssignmentHistoryService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationAssignmentHistoryServiceClient) List(ctx context.Context, in *ListApplicationAssignmentHistoryRequest, opts ...grpc.CallOption) (*ListApplicationAssignmentHistoryResponse, error) {
	out := new(ListApplicationAssignmentHistoryResponse)
	err := c.cc.Invoke(ctx, "/entpb.ApplicationAssignmentHistoryService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationAssignmentHistoryServiceServer is the server API for ApplicationAssignmentHistoryService service.
// All implementations must embed UnimplementedApplicationAssignmentHistoryServiceServer
// for forward compatibility
type ApplicationAssignmentHistoryServiceServer interface {
	Create(context.Context, *CreateApplicationAssignmentHistoryRequest) (*ApplicationAssignmentHistory, error)
	Get(context.Context, *GetApplicationAssignmentHistoryRequest) (*ApplicationAssignmentHistory, error)
	Update(context.Context, *UpdateApplicationAssignmentHistoryRequest) (*ApplicationAssignmentHistory, error)
	Delete(context.Context, *DeleteApplicationAssignmentHistoryRequest) (*emptypb.Empty, error)
	List(context.Context, *ListApplicationAssignmentHistoryRequest) (*ListApplicationAssignmentHistoryResponse, error)
	mustEmbedUnimplementedApplicationAssignmentHistoryServiceServer()
}

// UnimplementedApplicationAssignmentHistoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationAssignmentHistoryServiceServer struct {
}

func (UnimplementedApplicationAssignmentHistoryServiceServer) Create(context.Context, *CreateApplicationAssignmentHistoryRequest) (*ApplicationAssignmentHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedApplicationAssignmentHistoryServiceServer) Get(context.Context, *GetApplicationAssignmentHistoryRequest) (*ApplicationAssignmentHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedApplicationAssignmentHistoryServiceServer) Update(context.Context, *UpdateApplicationAssignmentHistoryRequest) (*ApplicationAssignmentHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedApplicationAssignmentHistoryServiceServer) Delete(context.Context, *DeleteApplicationAssignmentHistoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedApplicationAssignmentHistoryServiceServer) List(context.Context, *ListApplicationAssignmentHistoryRequest) (*ListApplicationAssignmentHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedApplicationAssignmentHistoryServiceServer) mustEmbedUnimplementedApplicationAssignmentHistoryServiceServer() {
}

// UnsafeApplicationAssignmentHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationAssignmentHistoryServiceServer will
// result in compilation errors.
type UnsafeApplicationAssignmentHistoryServiceServer interface {
	mustEmbedUnimplementedApplicationAssignmentHistoryServiceServer()
}

func RegisterApplicationAssignmentHistoryServiceServer(s grpc.ServiceRegistrar, srv ApplicationAssignmentHistoryServiceServer) {
	s.RegisterService(&ApplicationAssignmentHistoryService_ServiceDesc, srv)
}

func _ApplicationAssignmentHistoryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationAssignmentHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationAssignmentHistoryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ApplicationAssignmentHistoryService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationAssignmentHistoryServiceServer).Create(ctx, req.(*CreateApplicationAssignmentHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationAssignmentHistoryService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationAssignmentHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationAssignmentHistoryServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ApplicationAssignmentHistoryService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationAssignmentHistoryServiceServer).Get(ctx, req.(*GetApplicationAssignmentHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationAssignmentHistoryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationAssignmentHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationAssignmentHistoryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ApplicationAssignmentHistoryService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationAssignmentHistoryServiceServer).Update(ctx, req.(*UpdateApplicationAssignmentHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationAssignmentHistoryService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationAssignmentHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationAssignmentHistoryServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ApplicationAssignmentHistoryService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationAssignmentHistoryServiceServer).Delete(ctx, req.(*DeleteApplicationAssignmentHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationAssignmentHistoryService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationAssignmentHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationAssignmentHistoryServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ApplicationAssignmentHistoryService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationAssignmentHistoryServiceServer).List(ctx, req.(*ListApplicationAssignmentHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationAssignmentHistoryService_ServiceDesc is the grpc.ServiceDesc for ApplicationAssignmentHistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationAssignmentHistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.ApplicationAssignmentHistoryService",
	HandlerType: (*ApplicationAssignmentHistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ApplicationAssignmentHistoryService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ApplicationAssignmentHistoryService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ApplicationAssignmentHistoryService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ApplicationAssignmentHistoryService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ApplicationAssignmentHistoryService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

// ApplicationStatusHistoryServiceClient is the client API for ApplicationStatusHistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationStatusHistoryServiceClient interface {
	Create(ctx context.Context, in *CreateApplicationStatusHistoryRequest, opts ...grpc.CallOption) (*ApplicationStatusHistory, error)
	Get(ctx context.Context, in *GetApplicationStatusHistoryRequest, opts ...grpc.CallOption) (*ApplicationStatusHistory, error)
	Update(ctx context.Context, in *UpdateApplicationStatusHistoryRequest, opts ...grpc.CallOption) (*ApplicationStatusHistory, error)
	Delete(ctx context.Context, in *DeleteApplicationStatusHistoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ListApplicationStatusHistoryRequest, opts ...grpc.CallOption) (*ListApplicationStatusHistoryResponse, error)
}

type applicationStatusHistoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationStatusHistoryServiceClient(cc grpc.ClientConnInterface) ApplicationStatusHistoryServiceClient {
	return &applicationStatusHistoryServiceClient{cc}
}

func (c *applicationStatusHistoryServiceClient) Create(ctx context.Context, in *CreateApplicationStatusHistoryRequest, opts ...grpc.CallOption) (*ApplicationStatusHistory, error) {
	out := new(ApplicationStatusHistory)
	err := c.cc.Invoke(ctx, "/entpb.ApplicationStatusHistoryService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationStatusHistoryServiceClient) Get(ctx context.Context, in *GetApplicationStatusHistoryRequest, opts ...grpc.CallOption) (*ApplicationStatusHistory, error) {
	out := new(ApplicationStatusHistory)
	err := c.cc.Invoke(ctx, "/entpb.ApplicationStatusHistoryService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationStatusHistoryServiceClient) Update(ctx context.Context, in *UpdateApplicationStatusHistoryRequest, opts ...grpc.CallOption) (*ApplicationStatusHistory, error) {
	out := new(ApplicationStatusHistory)
	err := c.cc.Invoke(ctx, "/entpb.ApplicationStatusHistoryService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationStatusHistoryServiceClient) Delete(ctx context.Context, in *DeleteApplicationStatusHistoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/entpb.ApplicationStatusHistoryService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationStatusHistoryServiceClient) List(ctx context.Context, in *ListApplicationStatusHistoryRequest, opts ...grpc.CallOption) (*ListApplicationStatusHistoryResponse, error) {
	out := new(ListApplicationStatusHistoryResponse)
	err := c.cc.Invoke(ctx, "/entpb.ApplicationStatusHistoryService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationStatusHistoryServiceServer is the server API for ApplicationStatusHistoryService service.
// All implementations must embed UnimplementedApplicationStatusHistoryServiceServer
// for forward compatibility
type ApplicationStatusHistoryServiceServer interface {
	Create(context.Context, *CreateApplicationStatusHistoryRequest) (*ApplicationStatusHistory, error)
	Get(context.Context, *GetApplicationStatusHistoryRequest) (*ApplicationStatusHistory, error)
	Update(context.Context, *UpdateApplicationStatusHistoryRequest) (*ApplicationStatusHistory, error)
	Delete(context.Context, *DeleteApplicationStatusHistoryRequest) (*emptypb.Empty, error)
	List(context.Context, *ListApplicationStatusHistoryRequest) (*ListApplicationStatusHistoryResponse, error)
	mustEmbedUnimplementedApplicationStatusHistoryServiceServer()
}

// UnimplementedApplicationStatusHistoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationStatusHistoryServiceServer struct {
}

func (UnimplementedApplicationStatusHistoryServiceServer) Create(context.Context, *CreateApplicationStatusHistoryRequest) (*ApplicationStatusHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedApplicationStatusHistoryServiceServer) Get(context.Context, *GetApplicationStatusHistoryRequest) (*ApplicationStatusHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedApplicationStatusHistoryServiceServer) Update(context.Context, *UpdateApplicationStatusHistoryRequest) (*ApplicationStatusHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedApplicationStatusHistoryServiceServer) Delete(context.Context, *DeleteApplicationStatusHistoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedApplicationStatusHistoryServiceServer) List(context.Context, *ListApplicationStatusHistoryRequest) (*ListApplicationStatusHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedApplicationStatusHistoryServiceServer) mustEmbedUnimplementedApplicationStatusHistoryServiceServer() {
}

// UnsafeApplicationStatusHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationStatusHistoryServiceServer will
// result in compilation errors.
type UnsafeApplicationStatusHistoryServiceServer interface {
	mustEmbedUnimplementedApplicationStatusHistoryServiceServer()
}

func RegisterApplicationStatusHistoryServiceServer(s grpc.ServiceRegistrar, srv ApplicationStatusHistoryServiceServer) {
	s.RegisterService(&ApplicationStatusHistoryService_ServiceDesc, srv)
}

func _ApplicationStatusHistoryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationStatusHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationStatusHistoryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ApplicationStatusHistoryService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationStatusHistoryServiceServer).Create(ctx, req.(*CreateApplicationStatusHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationStatusHistoryService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationStatusHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationStatusHistoryServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ApplicationStatusHistoryService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationStatusHistoryServiceServer).Get(ctx, req.(*GetApplicationStatusHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationStatusHistoryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationStatusHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationStatusHistoryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ApplicationStatusHistoryService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationStatusHistoryServiceServer).Update(ctx, req.(*UpdateApplicationStatusHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationStatusHistoryService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationStatusHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationStatusHistoryServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ApplicationStatusHistoryService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationStatusHistoryServiceServer).Delete(ctx, req.(*DeleteApplicationStatusHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationStatusHistoryService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationStatusHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationStatusHistoryServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ApplicationStatusHistoryService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationStatusHistoryServiceServer).List(ctx, req.(*ListApplicationStatusHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationStatusHistoryService_ServiceDesc is the grpc.ServiceDesc for ApplicationStatusHistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationStatusHistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.ApplicationStatusHistoryService",
	HandlerType: (*ApplicationStatusHistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ApplicationStatusHistoryService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ApplicationStatusHistoryService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ApplicationStatusHistoryService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ApplicationStatusHistoryService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ApplicationStatusHistoryService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

// AttachmentServiceClient is the client API for AttachmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttachmentServiceClient interface {
	Create(ctx context.Context, in *CreateAttachmentRequest, opts ...grpc.CallOption) (*Attachment, error)
	Get(ctx context.Context, in *GetAttachmentRequest, opts ...grpc.CallOption) (*Attachment, error)
	Update(ctx context.Context, in *UpdateAttachmentRequest, opts ...grpc.CallOption) (*Attachment, error)
	Delete(ctx context.Context, in *DeleteAttachmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ListAttachmentRequest, opts ...grpc.CallOption) (*ListAttachmentResponse, error)
}

type attachmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttachmentServiceClient(cc grpc.ClientConnInterface) AttachmentServiceClient {
	return &attachmentServiceClient{cc}
}

func (c *attachmentServiceClient) Create(ctx context.Context, in *CreateAttachmentRequest, opts ...grpc.CallOption) (*Attachment, error) {
	out := new(Attachment)
	err := c.cc.Invoke(ctx, "/entpb.AttachmentService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentServiceClient) Get(ctx context.Context, in *GetAttachmentRequest, opts ...grpc.CallOption) (*Attachment, error) {
	out := new(Attachment)
	err := c.cc.Invoke(ctx, "/entpb.AttachmentService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentServiceClient) Update(ctx context.Context, in *UpdateAttachmentRequest, opts ...grpc.CallOption) (*Attachment, error) {
	out := new(Attachment)
	err := c.cc.Invoke(ctx, "/entpb.AttachmentService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentServiceClient) Delete(ctx context.Context, in *DeleteAttachmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/entpb.AttachmentService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentServiceClient) List(ctx context.Context, in *ListAttachmentRequest, opts ...grpc.CallOption) (*ListAttachmentResponse, error) {
	out := new(ListAttachmentResponse)
	err := c.cc.Invoke(ctx, "/entpb.AttachmentService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttachmentServiceServer is the server API for AttachmentService service.
// All implementations must embed UnimplementedAttachmentServiceServer
// for forward compatibility
type AttachmentServiceServer interface {
	Create(context.Context, *CreateAttachmentRequest) (*Attachment, error)
	Get(context.Context, *GetAttachmentRequest) (*Attachment, error)
	Update(context.Context, *UpdateAttachmentRequest) (*Attachment, error)
	Delete(context.Context, *DeleteAttachmentRequest) (*emptypb.Empty, error)
	List(context.Context, *ListAttachmentRequest) (*ListAttachmentResponse, error)
	mustEmbedUnimplementedAttachmentServiceServer()
}

// UnimplementedAttachmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAttachmentServiceServer struct {
}

func (UnimplementedAttachmentServiceServer) Create(context.Context, *CreateAttachmentRequest) (*Attachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAttachmentServiceServer) Get(context.Context, *GetAttachmentRequest) (*Attachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAttachmentServiceServer) Update(context.Context, *UpdateAttachmentRequest) (*Attachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAttachmentServiceServer) Delete(context.Context, *DeleteAttachmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAttachmentServiceServer) List(context.Context, *ListAttachmentRequest) (*ListAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAttachmentServiceServer) mustEmbedUnimplementedAttachmentServiceServer() {}

// UnsafeAttachmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttachmentServiceServer will
// result in compilation errors.
type UnsafeAttachmentServiceServer interface {
	mustEmbedUnimplementedAttachmentServiceServer()
}

func RegisterAttachmentServiceServer(s grpc.ServiceRegistrar, srv AttachmentServiceServer) {
	s.RegisterService(&AttachmentService_ServiceDesc, srv)
}

func _AttachmentService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.AttachmentService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServiceServer).Create(ctx, req.(*CreateAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.AttachmentService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServiceServer).Get(ctx, req.(*GetAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.AttachmentService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServiceServer).Update(ctx, req.(*UpdateAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.AttachmentService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServiceServer).Delete(ctx, req.(*DeleteAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.AttachmentService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServiceServer).List(ctx, req.(*ListAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttachmentService_ServiceDesc is the grpc.ServiceDesc for AttachmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttachmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.AttachmentService",
	HandlerType: (*AttachmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AttachmentService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AttachmentService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AttachmentService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AttachmentService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AttachmentService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

// ReviewerServiceClient is the client API for ReviewerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReviewerServiceClient interface {
	Create(ctx context.Context, in *CreateReviewerRequest, opts ...grpc.CallOption) (*Reviewer, error)
	Get(ctx context.Context, in *GetReviewerRequest, opts ...grpc.CallOption) (*Reviewer, error)
	Update(ctx context.Context, in *UpdateReviewerRequest, opts ...grpc.CallOption) (*Reviewer, error)
	Delete(ctx context.Context, in *DeleteReviewerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ListReviewerRequest, opts ...grpc.CallOption) (*ListReviewerResponse, error)
}

type reviewerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReviewerServiceClient(cc grpc.ClientConnInterface) ReviewerServiceClient {
	return &reviewerServiceClient{cc}
}

func (c *reviewerServiceClient) Create(ctx context.Context, in *CreateReviewerRequest, opts ...grpc.CallOption) (*Reviewer, error) {
	out := new(Reviewer)
	err := c.cc.Invoke(ctx, "/entpb.ReviewerService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewerServiceClient) Get(ctx context.Context, in *GetReviewerRequest, opts ...grpc.CallOption) (*Reviewer, error) {
	out := new(Reviewer)
	err := c.cc.Invoke(ctx, "/entpb.ReviewerService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewerServiceClient) Update(ctx context.Context, in *UpdateReviewerRequest, opts ...grpc.CallOption) (*Reviewer, error) {
	out := new(Reviewer)
	err := c.cc.Invoke(ctx, "/entpb.ReviewerService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewerServiceClient) Delete(ctx context.Context, in *DeleteReviewerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/entpb.ReviewerService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewerServiceClient) List(ctx context.Context, in *ListReviewerRequest, opts ...grpc.CallOption) (*ListReviewerResponse, error) {
	out := new(ListReviewerResponse)
	err := c.cc.Invoke(ctx, "/entpb.ReviewerService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReviewerServiceServer is the server API for ReviewerService service.
// All implementations must embed UnimplementedReviewerServiceServer
// for forward compatibility
type ReviewerServiceServer interface {
	Create(context.Context, *CreateReviewerRequest) (*Reviewer, error)
	Get(context.Context, *GetReviewerRequest) (*Reviewer, error)
	Update(context.Context, *UpdateReviewerRequest) (*Reviewer, error)
	Delete(context.Context, *DeleteReviewerRequest) (*emptypb.Empty, error)
	List(context.Context, *ListReviewerRequest) (*ListReviewerResponse, error)
	mustEmbedUnimplementedReviewerServiceServer()
}

// UnimplementedReviewerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReviewerServiceServer struct {
}

func (UnimplementedReviewerServiceServer) Create(context.Context, *CreateReviewerRequest) (*Reviewer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedReviewerServiceServer) Get(context.Context, *GetReviewerRequest) (*Reviewer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedReviewerServiceServer) Update(context.Context, *UpdateReviewerRequest) (*Reviewer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedReviewerServiceServer) Delete(context.Context, *DeleteReviewerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedReviewerServiceServer) List(context.Context, *ListReviewerRequest) (*ListReviewerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedReviewerServiceServer) mustEmbedUnimplementedReviewerServiceServer() {}

// UnsafeReviewerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReviewerServiceServer will
// result in compilation errors.
type UnsafeReviewerServiceServer interface {
	mustEmbedUnimplementedReviewerServiceServer()
}

func RegisterReviewerServiceServer(s grpc.ServiceRegistrar, srv ReviewerServiceServer) {
	s.RegisterService(&ReviewerService_ServiceDesc, srv)
}

func _ReviewerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReviewerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ReviewerService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewerServiceServer).Create(ctx, req.(*CreateReviewerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewerService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewerServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ReviewerService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewerServiceServer).Get(ctx, req.(*GetReviewerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewerService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReviewerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewerServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ReviewerService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewerServiceServer).Update(ctx, req.(*UpdateReviewerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReviewerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ReviewerService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewerServiceServer).Delete(ctx, req.(*DeleteReviewerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewerService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReviewerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewerServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ReviewerService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewerServiceServer).List(ctx, req.(*ListReviewerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReviewerService_ServiceDesc is the grpc.ServiceDesc for ReviewerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReviewerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.ReviewerService",
	HandlerType: (*ReviewerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ReviewerService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ReviewerService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ReviewerService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ReviewerService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ReviewerService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

// TicketServiceClient is the client API for TicketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketServiceClient interface {
	Create(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*Ticket, error)
	Get(ctx context.Context, in *GetTicketRequest, opts ...grpc.CallOption) (*Ticket, error)
	Update(ctx context.Context, in *UpdateTicketRequest, opts ...grpc.CallOption) (*Ticket, error)
	Delete(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ListTicketRequest, opts ...grpc.CallOption) (*ListTicketResponse, error)
}

type ticketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketServiceClient(cc grpc.ClientConnInterface) TicketServiceClient {
	return &ticketServiceClient{cc}
}

func (c *ticketServiceClient) Create(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*Ticket, error) {
	out := new(Ticket)
	err := c.cc.Invoke(ctx, "/entpb.TicketService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) Get(ctx context.Context, in *GetTicketRequest, opts ...grpc.CallOption) (*Ticket, error) {
	out := new(Ticket)
	err := c.cc.Invoke(ctx, "/entpb.TicketService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) Update(ctx context.Context, in *UpdateTicketRequest, opts ...grpc.CallOption) (*Ticket, error) {
	out := new(Ticket)
	err := c.cc.Invoke(ctx, "/entpb.TicketService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) Delete(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/entpb.TicketService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) List(ctx context.Context, in *ListTicketRequest, opts ...grpc.CallOption) (*ListTicketResponse, error) {
	out := new(ListTicketResponse)
	err := c.cc.Invoke(ctx, "/entpb.TicketService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketServiceServer is the server API for TicketService service.
// All implementations must embed UnimplementedTicketServiceServer
// for forward compatibility
type TicketServiceServer interface {
	Create(context.Context, *CreateTicketRequest) (*Ticket, error)
	Get(context.Context, *GetTicketRequest) (*Ticket, error)
	Update(context.Context, *UpdateTicketRequest) (*Ticket, error)
	Delete(context.Context, *DeleteTicketRequest) (*emptypb.Empty, error)
	List(context.Context, *ListTicketRequest) (*ListTicketResponse, error)
	mustEmbedUnimplementedTicketServiceServer()
}

// UnimplementedTicketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTicketServiceServer struct {
}

func (UnimplementedTicketServiceServer) Create(context.Context, *CreateTicketRequest) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTicketServiceServer) Get(context.Context, *GetTicketRequest) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTicketServiceServer) Update(context.Context, *UpdateTicketRequest) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTicketServiceServer) Delete(context.Context, *DeleteTicketRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTicketServiceServer) List(context.Context, *ListTicketRequest) (*ListTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTicketServiceServer) mustEmbedUnimplementedTicketServiceServer() {}

// UnsafeTicketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketServiceServer will
// result in compilation errors.
type UnsafeTicketServiceServer interface {
	mustEmbedUnimplementedTicketServiceServer()
}

func RegisterTicketServiceServer(s grpc.ServiceRegistrar, srv TicketServiceServer) {
	s.RegisterService(&TicketService_ServiceDesc, srv)
}

func _TicketService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.TicketService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).Create(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.TicketService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).Get(ctx, req.(*GetTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.TicketService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).Update(ctx, req.(*UpdateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.TicketService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).Delete(ctx, req.(*DeleteTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.TicketService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).List(ctx, req.(*ListTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketService_ServiceDesc is the grpc.ServiceDesc for TicketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.TicketService",
	HandlerType: (*TicketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TicketService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TicketService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TicketService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TicketService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TicketService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}
