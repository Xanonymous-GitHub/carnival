// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/Xanonymous-GitHub/carnival/db/pkg/ent"
	application "github.com/Xanonymous-GitHub/carnival/db/pkg/ent/application"
	applicationstatushistory "github.com/Xanonymous-GitHub/carnival/db/pkg/ent/applicationstatushistory"
	uuid "github.com/google/uuid"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strconv "strconv"
	strings "strings"
)

// ApplicationStatusHistoryService implements ApplicationStatusHistoryServiceServer
type ApplicationStatusHistoryService struct {
	client *ent.Client
	UnimplementedApplicationStatusHistoryServiceServer
}

// NewApplicationStatusHistoryService returns a new ApplicationStatusHistoryService
func NewApplicationStatusHistoryService(client *ent.Client) *ApplicationStatusHistoryService {
	return &ApplicationStatusHistoryService{
		client: client,
	}
}

func toProtoApplicationStatusHistory_Status(e applicationstatushistory.Status) ApplicationStatusHistory_Status {
	if v, ok := ApplicationStatusHistory_Status_value[strings.ToUpper(string(e))]; ok {
		return ApplicationStatusHistory_Status(v)
	}
	return ApplicationStatusHistory_Status(0)
}

func toEntApplicationStatusHistory_Status(e ApplicationStatusHistory_Status) applicationstatushistory.Status {
	if v, ok := ApplicationStatusHistory_Status_name[int32(e)]; ok {
		return applicationstatushistory.Status(strings.ToLower(v))
	}
	return ""
}

// toProtoApplicationStatusHistory transforms the ent type to the pb type
func toProtoApplicationStatusHistory(e *ent.ApplicationStatusHistory) (*ApplicationStatusHistory, error) {
	v := &ApplicationStatusHistory{}
	applicationid, err := e.ApplicationID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.ApplicationId = applicationid
	createdtime := timestamppb.New(e.CreatedTime)
	v.CreatedTime = createdtime
	id := int32(e.ID)
	v.Id = id
	status := toProtoApplicationStatusHistory_Status(e.Status)
	v.Status = status
	if edg := e.Edges.Applications; edg != nil {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.Applications = &Application{
			Id: id,
		}
	}
	return v, nil
}

// Create implements ApplicationStatusHistoryServiceServer.Create
func (svc *ApplicationStatusHistoryService) Create(ctx context.Context, req *CreateApplicationStatusHistoryRequest) (*ApplicationStatusHistory, error) {
	applicationstatushistory := req.GetApplicationStatusHistory()
	m := svc.client.ApplicationStatusHistory.Create()
	var applicationstatushistoryApplicationID uuid.UUID
	if err := (&applicationstatushistoryApplicationID).UnmarshalBinary(applicationstatushistory.GetApplicationId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetApplicationID(applicationstatushistoryApplicationID)
	applicationstatushistoryCreatedTime := runtime.ExtractTime(applicationstatushistory.GetCreatedTime())
	m.SetCreatedTime(applicationstatushistoryCreatedTime)
	applicationstatushistoryStatus := toEntApplicationStatusHistory_Status(applicationstatushistory.GetStatus())
	m.SetStatus(applicationstatushistoryStatus)
	var applicationstatushistoryApplications uuid.UUID
	if err := (&applicationstatushistoryApplications).UnmarshalBinary(applicationstatushistory.GetApplications().GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetApplicationsID(applicationstatushistoryApplications)
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoApplicationStatusHistory(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements ApplicationStatusHistoryServiceServer.Get
func (svc *ApplicationStatusHistoryService) Get(ctx context.Context, req *GetApplicationStatusHistoryRequest) (*ApplicationStatusHistory, error) {
	var (
		err error
		get *ent.ApplicationStatusHistory
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetApplicationStatusHistoryRequest_VIEW_UNSPECIFIED, GetApplicationStatusHistoryRequest_BASIC:
		get, err = svc.client.ApplicationStatusHistory.Get(ctx, id)
	case GetApplicationStatusHistoryRequest_WITH_EDGE_IDS:
		get, err = svc.client.ApplicationStatusHistory.Query().
			Where(applicationstatushistory.ID(id)).
			WithApplications(func(query *ent.ApplicationQuery) {
				query.Select(application.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoApplicationStatusHistory(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}
	return nil, nil

}

// Update implements ApplicationStatusHistoryServiceServer.Update
func (svc *ApplicationStatusHistoryService) Update(ctx context.Context, req *UpdateApplicationStatusHistoryRequest) (*ApplicationStatusHistory, error) {
	applicationstatushistory := req.GetApplicationStatusHistory()
	applicationstatushistoryID := int(applicationstatushistory.GetId())
	m := svc.client.ApplicationStatusHistory.UpdateOneID(applicationstatushistoryID)
	var applicationstatushistoryApplicationID uuid.UUID
	if err := (&applicationstatushistoryApplicationID).UnmarshalBinary(applicationstatushistory.GetApplicationId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetApplicationID(applicationstatushistoryApplicationID)
	applicationstatushistoryStatus := toEntApplicationStatusHistory_Status(applicationstatushistory.GetStatus())
	m.SetStatus(applicationstatushistoryStatus)
	var applicationstatushistoryApplications uuid.UUID
	if err := (&applicationstatushistoryApplications).UnmarshalBinary(applicationstatushistory.GetApplications().GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetApplicationsID(applicationstatushistoryApplications)
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoApplicationStatusHistory(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements ApplicationStatusHistoryServiceServer.Delete
func (svc *ApplicationStatusHistoryService) Delete(ctx context.Context, req *DeleteApplicationStatusHistoryRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.ApplicationStatusHistory.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements ApplicationStatusHistoryServiceServer.List
func (svc *ApplicationStatusHistoryService) List(ctx context.Context, req *ListApplicationStatusHistoryRequest) (*ListApplicationStatusHistoryResponse, error) {
	var (
		err      error
		entList  []*ent.ApplicationStatusHistory
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.ApplicationStatusHistory.Query().
		Order(ent.Desc(applicationstatushistory.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(applicationstatushistory.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListApplicationStatusHistoryRequest_VIEW_UNSPECIFIED, ListApplicationStatusHistoryRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListApplicationStatusHistoryRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithApplications(func(query *ent.ApplicationQuery) {
				query.Select(application.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		var pbList []*ApplicationStatusHistory
		for _, entEntity := range entList {
			pbEntity, err := toProtoApplicationStatusHistory(entEntity)
			if err != nil {
				return nil, status.Errorf(codes.Internal, "internal error: %s", err)
			}
			pbList = append(pbList, pbEntity)
		}
		return &ListApplicationStatusHistoryResponse{
			ApplicationStatusHistoryList: pbList,
			NextPageToken:                nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}
