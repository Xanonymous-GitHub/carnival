// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/application"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/applicationstatushistory"
	"github.com/google/uuid"
)

// ApplicationStatusHistory is the model entity for the ApplicationStatusHistory schema.
type ApplicationStatusHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ApplicationID holds the value of the "application_id" field.
	ApplicationID uuid.UUID `json:"application_id,omitempty"`
	// Status holds the value of the "status" field.
	Status applicationstatushistory.Status `json:"status,omitempty"`
	// CreatedTime holds the value of the "created_time" field.
	CreatedTime time.Time `json:"created_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApplicationStatusHistoryQuery when eager-loading is set.
	Edges ApplicationStatusHistoryEdges `json:"edges"`
}

// ApplicationStatusHistoryEdges holds the relations/edges for other nodes in the graph.
type ApplicationStatusHistoryEdges struct {
	// Applications holds the value of the applications edge.
	Applications *Application `json:"applications,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ApplicationsOrErr returns the Applications value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplicationStatusHistoryEdges) ApplicationsOrErr() (*Application, error) {
	if e.loadedTypes[0] {
		if e.Applications == nil {
			// The edge applications was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: application.Label}
		}
		return e.Applications, nil
	}
	return nil, &NotLoadedError{edge: "applications"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ApplicationStatusHistory) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case applicationstatushistory.FieldID:
			values[i] = new(sql.NullInt64)
		case applicationstatushistory.FieldStatus:
			values[i] = new(sql.NullString)
		case applicationstatushistory.FieldCreatedTime:
			values[i] = new(sql.NullTime)
		case applicationstatushistory.FieldApplicationID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ApplicationStatusHistory", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ApplicationStatusHistory fields.
func (ash *ApplicationStatusHistory) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case applicationstatushistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ash.ID = int(value.Int64)
		case applicationstatushistory.FieldApplicationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field application_id", values[i])
			} else if value != nil {
				ash.ApplicationID = *value
			}
		case applicationstatushistory.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ash.Status = applicationstatushistory.Status(value.String)
			}
		case applicationstatushistory.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				ash.CreatedTime = value.Time
			}
		}
	}
	return nil
}

// QueryApplications queries the "applications" edge of the ApplicationStatusHistory entity.
func (ash *ApplicationStatusHistory) QueryApplications() *ApplicationQuery {
	return (&ApplicationStatusHistoryClient{config: ash.config}).QueryApplications(ash)
}

// Update returns a builder for updating this ApplicationStatusHistory.
// Note that you need to call ApplicationStatusHistory.Unwrap() before calling this method if this ApplicationStatusHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ash *ApplicationStatusHistory) Update() *ApplicationStatusHistoryUpdateOne {
	return (&ApplicationStatusHistoryClient{config: ash.config}).UpdateOne(ash)
}

// Unwrap unwraps the ApplicationStatusHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ash *ApplicationStatusHistory) Unwrap() *ApplicationStatusHistory {
	tx, ok := ash.config.driver.(*txDriver)
	if !ok {
		panic("ent: ApplicationStatusHistory is not a transactional entity")
	}
	ash.config.driver = tx.drv
	return ash
}

// String implements the fmt.Stringer.
func (ash *ApplicationStatusHistory) String() string {
	var builder strings.Builder
	builder.WriteString("ApplicationStatusHistory(")
	builder.WriteString(fmt.Sprintf("id=%v", ash.ID))
	builder.WriteString(", application_id=")
	builder.WriteString(fmt.Sprintf("%v", ash.ApplicationID))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", ash.Status))
	builder.WriteString(", created_time=")
	builder.WriteString(ash.CreatedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ApplicationStatusHistories is a parsable slice of ApplicationStatusHistory.
type ApplicationStatusHistories []*ApplicationStatusHistory

func (ash ApplicationStatusHistories) config(cfg config) {
	for _i := range ash {
		ash[_i].config = cfg
	}
}
