// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/application"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/attachment"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/ticket"
	"github.com/google/uuid"
)

// Attachment is the model entity for the Attachment schema.
type Attachment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ApplicationID holds the value of the "application_id" field.
	ApplicationID uuid.UUID `json:"application_id,omitempty"`
	// TicketID holds the value of the "ticket_id" field.
	TicketID *int `json:"ticket_id,omitempty"`
	// AttachmentType holds the value of the "attachment_type" field.
	AttachmentType attachment.AttachmentType `json:"attachment_type,omitempty"`
	// ObsOid holds the value of the "obs_oid" field.
	ObsOid string `json:"obs_oid,omitempty"`
	// ObsHash holds the value of the "obs_hash" field.
	ObsHash string `json:"obs_hash,omitempty"`
	// CreatedDtime holds the value of the "created_dtime" field.
	CreatedDtime time.Time `json:"created_dtime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AttachmentQuery when eager-loading is set.
	Edges AttachmentEdges `json:"edges"`
}

// AttachmentEdges holds the relations/edges for other nodes in the graph.
type AttachmentEdges struct {
	// Applications holds the value of the applications edge.
	Applications *Application `json:"applications,omitempty"`
	// Tickets holds the value of the tickets edge.
	Tickets *Ticket `json:"tickets,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ApplicationsOrErr returns the Applications value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttachmentEdges) ApplicationsOrErr() (*Application, error) {
	if e.loadedTypes[0] {
		if e.Applications == nil {
			// The edge applications was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: application.Label}
		}
		return e.Applications, nil
	}
	return nil, &NotLoadedError{edge: "applications"}
}

// TicketsOrErr returns the Tickets value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttachmentEdges) TicketsOrErr() (*Ticket, error) {
	if e.loadedTypes[1] {
		if e.Tickets == nil {
			// The edge tickets was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: ticket.Label}
		}
		return e.Tickets, nil
	}
	return nil, &NotLoadedError{edge: "tickets"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Attachment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case attachment.FieldID, attachment.FieldTicketID:
			values[i] = new(sql.NullInt64)
		case attachment.FieldAttachmentType, attachment.FieldObsOid, attachment.FieldObsHash:
			values[i] = new(sql.NullString)
		case attachment.FieldCreatedDtime:
			values[i] = new(sql.NullTime)
		case attachment.FieldApplicationID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Attachment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Attachment fields.
func (a *Attachment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attachment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case attachment.FieldApplicationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field application_id", values[i])
			} else if value != nil {
				a.ApplicationID = *value
			}
		case attachment.FieldTicketID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ticket_id", values[i])
			} else if value.Valid {
				a.TicketID = new(int)
				*a.TicketID = int(value.Int64)
			}
		case attachment.FieldAttachmentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attachment_type", values[i])
			} else if value.Valid {
				a.AttachmentType = attachment.AttachmentType(value.String)
			}
		case attachment.FieldObsOid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field obs_oid", values[i])
			} else if value.Valid {
				a.ObsOid = value.String
			}
		case attachment.FieldObsHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field obs_hash", values[i])
			} else if value.Valid {
				a.ObsHash = value.String
			}
		case attachment.FieldCreatedDtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_dtime", values[i])
			} else if value.Valid {
				a.CreatedDtime = value.Time
			}
		}
	}
	return nil
}

// QueryApplications queries the "applications" edge of the Attachment entity.
func (a *Attachment) QueryApplications() *ApplicationQuery {
	return (&AttachmentClient{config: a.config}).QueryApplications(a)
}

// QueryTickets queries the "tickets" edge of the Attachment entity.
func (a *Attachment) QueryTickets() *TicketQuery {
	return (&AttachmentClient{config: a.config}).QueryTickets(a)
}

// Update returns a builder for updating this Attachment.
// Note that you need to call Attachment.Unwrap() before calling this method if this Attachment
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Attachment) Update() *AttachmentUpdateOne {
	return (&AttachmentClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Attachment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Attachment) Unwrap() *Attachment {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Attachment is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Attachment) String() string {
	var builder strings.Builder
	builder.WriteString("Attachment(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", application_id=")
	builder.WriteString(fmt.Sprintf("%v", a.ApplicationID))
	if v := a.TicketID; v != nil {
		builder.WriteString(", ticket_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", attachment_type=")
	builder.WriteString(fmt.Sprintf("%v", a.AttachmentType))
	builder.WriteString(", obs_oid=")
	builder.WriteString(a.ObsOid)
	builder.WriteString(", obs_hash=")
	builder.WriteString(a.ObsHash)
	builder.WriteString(", created_dtime=")
	builder.WriteString(a.CreatedDtime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Attachments is a parsable slice of Attachment.
type Attachments []*Attachment

func (a Attachments) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
