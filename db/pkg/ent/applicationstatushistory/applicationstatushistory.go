// Code generated by entc, DO NOT EDIT.

package applicationstatushistory

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the applicationstatushistory type in the database.
	Label = "application_status_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldApplicationID holds the string denoting the application_id field in the database.
	FieldApplicationID = "application_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedTime holds the string denoting the created_time field in the database.
	FieldCreatedTime = "created_time"
	// EdgeApplications holds the string denoting the applications edge name in mutations.
	EdgeApplications = "applications"
	// ApplicationFieldID holds the string denoting the ID field of the Application.
	ApplicationFieldID = "application_id"
	// Table holds the table name of the applicationstatushistory in the database.
	Table = "application_status_histories"
	// ApplicationsTable is the table that holds the applications relation/edge.
	ApplicationsTable = "application_status_histories"
	// ApplicationsInverseTable is the table name for the Application entity.
	// It exists in this package in order to avoid circular dependency with the "application" package.
	ApplicationsInverseTable = "applications"
	// ApplicationsColumn is the table column denoting the applications relation/edge.
	ApplicationsColumn = "application_id"
)

// Columns holds all SQL columns for applicationstatushistory fields.
var Columns = []string{
	FieldID,
	FieldApplicationID,
	FieldStatus,
	FieldCreatedTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedTime holds the default value on creation for the "created_time" field.
	DefaultCreatedTime func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusWip       Status = "wip"
	StatusReviewing Status = "reviewing"
	StatusVerified  Status = "verified"
	StatusRejected  Status = "rejected"
	StatusWaiting   Status = "waiting"
	StatusReplied   Status = "replied"
	StatusRevoked   Status = "revoked"
	StatusCanceling Status = "canceling"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusWip, StatusReviewing, StatusVerified, StatusRejected, StatusWaiting, StatusReplied, StatusRevoked, StatusCanceling:
		return nil
	default:
		return fmt.Errorf("applicationstatushistory: invalid enum value for status field: %q", s)
	}
}
