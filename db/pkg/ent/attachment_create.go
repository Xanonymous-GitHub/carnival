// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/application"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/attachment"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/ticket"
	"github.com/google/uuid"
)

// AttachmentCreate is the builder for creating a Attachment entity.
type AttachmentCreate struct {
	config
	mutation *AttachmentMutation
	hooks    []Hook
}

// SetApplicationID sets the "application_id" field.
func (ac *AttachmentCreate) SetApplicationID(u uuid.UUID) *AttachmentCreate {
	ac.mutation.SetApplicationID(u)
	return ac
}

// SetTicketID sets the "ticket_id" field.
func (ac *AttachmentCreate) SetTicketID(i int) *AttachmentCreate {
	ac.mutation.SetTicketID(i)
	return ac
}

// SetNillableTicketID sets the "ticket_id" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableTicketID(i *int) *AttachmentCreate {
	if i != nil {
		ac.SetTicketID(*i)
	}
	return ac
}

// SetAType sets the "a_type" field.
func (ac *AttachmentCreate) SetAType(at attachment.AType) *AttachmentCreate {
	ac.mutation.SetAType(at)
	return ac
}

// SetObsOid sets the "obs_oid" field.
func (ac *AttachmentCreate) SetObsOid(s string) *AttachmentCreate {
	ac.mutation.SetObsOid(s)
	return ac
}

// SetObsHash sets the "obs_hash" field.
func (ac *AttachmentCreate) SetObsHash(s string) *AttachmentCreate {
	ac.mutation.SetObsHash(s)
	return ac
}

// SetCreatedDtime sets the "created_dtime" field.
func (ac *AttachmentCreate) SetCreatedDtime(t time.Time) *AttachmentCreate {
	ac.mutation.SetCreatedDtime(t)
	return ac
}

// SetNillableCreatedDtime sets the "created_dtime" field if the given value is not nil.
func (ac *AttachmentCreate) SetNillableCreatedDtime(t *time.Time) *AttachmentCreate {
	if t != nil {
		ac.SetCreatedDtime(*t)
	}
	return ac
}

// SetApplicationsID sets the "applications" edge to the Application entity by ID.
func (ac *AttachmentCreate) SetApplicationsID(id uuid.UUID) *AttachmentCreate {
	ac.mutation.SetApplicationsID(id)
	return ac
}

// SetApplications sets the "applications" edge to the Application entity.
func (ac *AttachmentCreate) SetApplications(a *Application) *AttachmentCreate {
	return ac.SetApplicationsID(a.ID)
}

// SetTicketsID sets the "tickets" edge to the Ticket entity by ID.
func (ac *AttachmentCreate) SetTicketsID(id int) *AttachmentCreate {
	ac.mutation.SetTicketsID(id)
	return ac
}

// SetNillableTicketsID sets the "tickets" edge to the Ticket entity by ID if the given value is not nil.
func (ac *AttachmentCreate) SetNillableTicketsID(id *int) *AttachmentCreate {
	if id != nil {
		ac = ac.SetTicketsID(*id)
	}
	return ac
}

// SetTickets sets the "tickets" edge to the Ticket entity.
func (ac *AttachmentCreate) SetTickets(t *Ticket) *AttachmentCreate {
	return ac.SetTicketsID(t.ID)
}

// Mutation returns the AttachmentMutation object of the builder.
func (ac *AttachmentCreate) Mutation() *AttachmentMutation {
	return ac.mutation
}

// Save creates the Attachment in the database.
func (ac *AttachmentCreate) Save(ctx context.Context) (*Attachment, error) {
	var (
		err  error
		node *Attachment
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AttachmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AttachmentCreate) SaveX(ctx context.Context) *Attachment {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AttachmentCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AttachmentCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AttachmentCreate) defaults() {
	if _, ok := ac.mutation.CreatedDtime(); !ok {
		v := attachment.DefaultCreatedDtime()
		ac.mutation.SetCreatedDtime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AttachmentCreate) check() error {
	if _, ok := ac.mutation.ApplicationID(); !ok {
		return &ValidationError{Name: "application_id", err: errors.New(`ent: missing required field "Attachment.application_id"`)}
	}
	if _, ok := ac.mutation.AType(); !ok {
		return &ValidationError{Name: "a_type", err: errors.New(`ent: missing required field "Attachment.a_type"`)}
	}
	if v, ok := ac.mutation.AType(); ok {
		if err := attachment.ATypeValidator(v); err != nil {
			return &ValidationError{Name: "a_type", err: fmt.Errorf(`ent: validator failed for field "Attachment.a_type": %w`, err)}
		}
	}
	if _, ok := ac.mutation.ObsOid(); !ok {
		return &ValidationError{Name: "obs_oid", err: errors.New(`ent: missing required field "Attachment.obs_oid"`)}
	}
	if v, ok := ac.mutation.ObsOid(); ok {
		if err := attachment.ObsOidValidator(v); err != nil {
			return &ValidationError{Name: "obs_oid", err: fmt.Errorf(`ent: validator failed for field "Attachment.obs_oid": %w`, err)}
		}
	}
	if _, ok := ac.mutation.ObsHash(); !ok {
		return &ValidationError{Name: "obs_hash", err: errors.New(`ent: missing required field "Attachment.obs_hash"`)}
	}
	if v, ok := ac.mutation.ObsHash(); ok {
		if err := attachment.ObsHashValidator(v); err != nil {
			return &ValidationError{Name: "obs_hash", err: fmt.Errorf(`ent: validator failed for field "Attachment.obs_hash": %w`, err)}
		}
	}
	if _, ok := ac.mutation.CreatedDtime(); !ok {
		return &ValidationError{Name: "created_dtime", err: errors.New(`ent: missing required field "Attachment.created_dtime"`)}
	}
	if _, ok := ac.mutation.ApplicationsID(); !ok {
		return &ValidationError{Name: "applications", err: errors.New(`ent: missing required edge "Attachment.applications"`)}
	}
	return nil
}

func (ac *AttachmentCreate) sqlSave(ctx context.Context) (*Attachment, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *AttachmentCreate) createSpec() (*Attachment, *sqlgraph.CreateSpec) {
	var (
		_node = &Attachment{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: attachment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: attachment.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.AType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: attachment.FieldAType,
		})
		_node.AType = value
	}
	if value, ok := ac.mutation.ObsOid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attachment.FieldObsOid,
		})
		_node.ObsOid = value
	}
	if value, ok := ac.mutation.ObsHash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attachment.FieldObsHash,
		})
		_node.ObsHash = value
	}
	if value, ok := ac.mutation.CreatedDtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: attachment.FieldCreatedDtime,
		})
		_node.CreatedDtime = value
	}
	if nodes := ac.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.ApplicationsTable,
			Columns: []string{attachment.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: application.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ApplicationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.TicketsTable,
			Columns: []string{attachment.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticket.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TicketID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AttachmentCreateBulk is the builder for creating many Attachment entities in bulk.
type AttachmentCreateBulk struct {
	config
	builders []*AttachmentCreate
}

// Save creates the Attachment entities in the database.
func (acb *AttachmentCreateBulk) Save(ctx context.Context) ([]*Attachment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Attachment, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttachmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AttachmentCreateBulk) SaveX(ctx context.Context) []*Attachment {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AttachmentCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AttachmentCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
