// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/application"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/attachment"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/predicate"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/ticket"
	"github.com/google/uuid"
)

// AttachmentUpdate is the builder for updating Attachment entities.
type AttachmentUpdate struct {
	config
	hooks    []Hook
	mutation *AttachmentMutation
}

// Where appends a list predicates to the AttachmentUpdate builder.
func (au *AttachmentUpdate) Where(ps ...predicate.Attachment) *AttachmentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetApplicationID sets the "application_id" field.
func (au *AttachmentUpdate) SetApplicationID(u uuid.UUID) *AttachmentUpdate {
	au.mutation.SetApplicationID(u)
	return au
}

// SetTicketID sets the "ticket_id" field.
func (au *AttachmentUpdate) SetTicketID(i int32) *AttachmentUpdate {
	au.mutation.ResetTicketID()
	au.mutation.SetTicketID(i)
	return au
}

// SetNillableTicketID sets the "ticket_id" field if the given value is not nil.
func (au *AttachmentUpdate) SetNillableTicketID(i *int32) *AttachmentUpdate {
	if i != nil {
		au.SetTicketID(*i)
	}
	return au
}

// AddTicketID adds i to the "ticket_id" field.
func (au *AttachmentUpdate) AddTicketID(i int32) *AttachmentUpdate {
	au.mutation.AddTicketID(i)
	return au
}

// ClearTicketID clears the value of the "ticket_id" field.
func (au *AttachmentUpdate) ClearTicketID() *AttachmentUpdate {
	au.mutation.ClearTicketID()
	return au
}

// SetAType sets the "a_type" field.
func (au *AttachmentUpdate) SetAType(at attachment.AType) *AttachmentUpdate {
	au.mutation.SetAType(at)
	return au
}

// SetObsOid sets the "obs_oid" field.
func (au *AttachmentUpdate) SetObsOid(s string) *AttachmentUpdate {
	au.mutation.SetObsOid(s)
	return au
}

// SetObsHash sets the "obs_hash" field.
func (au *AttachmentUpdate) SetObsHash(s string) *AttachmentUpdate {
	au.mutation.SetObsHash(s)
	return au
}

// SetApplicationsID sets the "applications" edge to the Application entity by ID.
func (au *AttachmentUpdate) SetApplicationsID(id uuid.UUID) *AttachmentUpdate {
	au.mutation.SetApplicationsID(id)
	return au
}

// SetApplications sets the "applications" edge to the Application entity.
func (au *AttachmentUpdate) SetApplications(a *Application) *AttachmentUpdate {
	return au.SetApplicationsID(a.ID)
}

// SetTicketsID sets the "tickets" edge to the Ticket entity by ID.
func (au *AttachmentUpdate) SetTicketsID(id int) *AttachmentUpdate {
	au.mutation.SetTicketsID(id)
	return au
}

// SetTickets sets the "tickets" edge to the Ticket entity.
func (au *AttachmentUpdate) SetTickets(t *Ticket) *AttachmentUpdate {
	return au.SetTicketsID(t.ID)
}

// Mutation returns the AttachmentMutation object of the builder.
func (au *AttachmentUpdate) Mutation() *AttachmentMutation {
	return au.mutation
}

// ClearApplications clears the "applications" edge to the Application entity.
func (au *AttachmentUpdate) ClearApplications() *AttachmentUpdate {
	au.mutation.ClearApplications()
	return au
}

// ClearTickets clears the "tickets" edge to the Ticket entity.
func (au *AttachmentUpdate) ClearTickets() *AttachmentUpdate {
	au.mutation.ClearTickets()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AttachmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AttachmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AttachmentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AttachmentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AttachmentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AttachmentUpdate) check() error {
	if v, ok := au.mutation.AType(); ok {
		if err := attachment.ATypeValidator(v); err != nil {
			return &ValidationError{Name: "a_type", err: fmt.Errorf(`ent: validator failed for field "Attachment.a_type": %w`, err)}
		}
	}
	if v, ok := au.mutation.ObsOid(); ok {
		if err := attachment.ObsOidValidator(v); err != nil {
			return &ValidationError{Name: "obs_oid", err: fmt.Errorf(`ent: validator failed for field "Attachment.obs_oid": %w`, err)}
		}
	}
	if v, ok := au.mutation.ObsHash(); ok {
		if err := attachment.ObsHashValidator(v); err != nil {
			return &ValidationError{Name: "obs_hash", err: fmt.Errorf(`ent: validator failed for field "Attachment.obs_hash": %w`, err)}
		}
	}
	if _, ok := au.mutation.ApplicationsID(); au.mutation.ApplicationsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Attachment.applications"`)
	}
	if _, ok := au.mutation.TicketsID(); au.mutation.TicketsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Attachment.tickets"`)
	}
	return nil
}

func (au *AttachmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   attachment.Table,
			Columns: attachment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: attachment.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.ApplicationID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: attachment.FieldApplicationID,
		})
	}
	if value, ok := au.mutation.TicketID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: attachment.FieldTicketID,
		})
	}
	if value, ok := au.mutation.AddedTicketID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: attachment.FieldTicketID,
		})
	}
	if au.mutation.TicketIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: attachment.FieldTicketID,
		})
	}
	if value, ok := au.mutation.AType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: attachment.FieldAType,
		})
	}
	if value, ok := au.mutation.ObsOid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attachment.FieldObsOid,
		})
	}
	if value, ok := au.mutation.ObsHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attachment.FieldObsHash,
		})
	}
	if au.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.ApplicationsTable,
			Columns: []string{attachment.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: application.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.ApplicationsTable,
			Columns: []string{attachment.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: application.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.TicketsTable,
			Columns: []string{attachment.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticket.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.TicketsTable,
			Columns: []string{attachment.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticket.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attachment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AttachmentUpdateOne is the builder for updating a single Attachment entity.
type AttachmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttachmentMutation
}

// SetApplicationID sets the "application_id" field.
func (auo *AttachmentUpdateOne) SetApplicationID(u uuid.UUID) *AttachmentUpdateOne {
	auo.mutation.SetApplicationID(u)
	return auo
}

// SetTicketID sets the "ticket_id" field.
func (auo *AttachmentUpdateOne) SetTicketID(i int32) *AttachmentUpdateOne {
	auo.mutation.ResetTicketID()
	auo.mutation.SetTicketID(i)
	return auo
}

// SetNillableTicketID sets the "ticket_id" field if the given value is not nil.
func (auo *AttachmentUpdateOne) SetNillableTicketID(i *int32) *AttachmentUpdateOne {
	if i != nil {
		auo.SetTicketID(*i)
	}
	return auo
}

// AddTicketID adds i to the "ticket_id" field.
func (auo *AttachmentUpdateOne) AddTicketID(i int32) *AttachmentUpdateOne {
	auo.mutation.AddTicketID(i)
	return auo
}

// ClearTicketID clears the value of the "ticket_id" field.
func (auo *AttachmentUpdateOne) ClearTicketID() *AttachmentUpdateOne {
	auo.mutation.ClearTicketID()
	return auo
}

// SetAType sets the "a_type" field.
func (auo *AttachmentUpdateOne) SetAType(at attachment.AType) *AttachmentUpdateOne {
	auo.mutation.SetAType(at)
	return auo
}

// SetObsOid sets the "obs_oid" field.
func (auo *AttachmentUpdateOne) SetObsOid(s string) *AttachmentUpdateOne {
	auo.mutation.SetObsOid(s)
	return auo
}

// SetObsHash sets the "obs_hash" field.
func (auo *AttachmentUpdateOne) SetObsHash(s string) *AttachmentUpdateOne {
	auo.mutation.SetObsHash(s)
	return auo
}

// SetApplicationsID sets the "applications" edge to the Application entity by ID.
func (auo *AttachmentUpdateOne) SetApplicationsID(id uuid.UUID) *AttachmentUpdateOne {
	auo.mutation.SetApplicationsID(id)
	return auo
}

// SetApplications sets the "applications" edge to the Application entity.
func (auo *AttachmentUpdateOne) SetApplications(a *Application) *AttachmentUpdateOne {
	return auo.SetApplicationsID(a.ID)
}

// SetTicketsID sets the "tickets" edge to the Ticket entity by ID.
func (auo *AttachmentUpdateOne) SetTicketsID(id int) *AttachmentUpdateOne {
	auo.mutation.SetTicketsID(id)
	return auo
}

// SetTickets sets the "tickets" edge to the Ticket entity.
func (auo *AttachmentUpdateOne) SetTickets(t *Ticket) *AttachmentUpdateOne {
	return auo.SetTicketsID(t.ID)
}

// Mutation returns the AttachmentMutation object of the builder.
func (auo *AttachmentUpdateOne) Mutation() *AttachmentMutation {
	return auo.mutation
}

// ClearApplications clears the "applications" edge to the Application entity.
func (auo *AttachmentUpdateOne) ClearApplications() *AttachmentUpdateOne {
	auo.mutation.ClearApplications()
	return auo
}

// ClearTickets clears the "tickets" edge to the Ticket entity.
func (auo *AttachmentUpdateOne) ClearTickets() *AttachmentUpdateOne {
	auo.mutation.ClearTickets()
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AttachmentUpdateOne) Select(field string, fields ...string) *AttachmentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Attachment entity.
func (auo *AttachmentUpdateOne) Save(ctx context.Context) (*Attachment, error) {
	var (
		err  error
		node *Attachment
	)
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AttachmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AttachmentUpdateOne) SaveX(ctx context.Context) *Attachment {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AttachmentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AttachmentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AttachmentUpdateOne) check() error {
	if v, ok := auo.mutation.AType(); ok {
		if err := attachment.ATypeValidator(v); err != nil {
			return &ValidationError{Name: "a_type", err: fmt.Errorf(`ent: validator failed for field "Attachment.a_type": %w`, err)}
		}
	}
	if v, ok := auo.mutation.ObsOid(); ok {
		if err := attachment.ObsOidValidator(v); err != nil {
			return &ValidationError{Name: "obs_oid", err: fmt.Errorf(`ent: validator failed for field "Attachment.obs_oid": %w`, err)}
		}
	}
	if v, ok := auo.mutation.ObsHash(); ok {
		if err := attachment.ObsHashValidator(v); err != nil {
			return &ValidationError{Name: "obs_hash", err: fmt.Errorf(`ent: validator failed for field "Attachment.obs_hash": %w`, err)}
		}
	}
	if _, ok := auo.mutation.ApplicationsID(); auo.mutation.ApplicationsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Attachment.applications"`)
	}
	if _, ok := auo.mutation.TicketsID(); auo.mutation.TicketsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Attachment.tickets"`)
	}
	return nil
}

func (auo *AttachmentUpdateOne) sqlSave(ctx context.Context) (_node *Attachment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   attachment.Table,
			Columns: attachment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: attachment.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Attachment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attachment.FieldID)
		for _, f := range fields {
			if !attachment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attachment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.ApplicationID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: attachment.FieldApplicationID,
		})
	}
	if value, ok := auo.mutation.TicketID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: attachment.FieldTicketID,
		})
	}
	if value, ok := auo.mutation.AddedTicketID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: attachment.FieldTicketID,
		})
	}
	if auo.mutation.TicketIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: attachment.FieldTicketID,
		})
	}
	if value, ok := auo.mutation.AType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: attachment.FieldAType,
		})
	}
	if value, ok := auo.mutation.ObsOid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attachment.FieldObsOid,
		})
	}
	if value, ok := auo.mutation.ObsHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attachment.FieldObsHash,
		})
	}
	if auo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.ApplicationsTable,
			Columns: []string{attachment.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: application.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.ApplicationsTable,
			Columns: []string{attachment.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: application.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.TicketsTable,
			Columns: []string{attachment.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticket.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachment.TicketsTable,
			Columns: []string{attachment.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ticket.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Attachment{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attachment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
