// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/application"
	"github.com/Xanonymous-GitHub/carnival/db/pkg/ent/applicationstatushistory"
	"github.com/google/uuid"
)

// ApplicationStatusHistoryCreate is the builder for creating a ApplicationStatusHistory entity.
type ApplicationStatusHistoryCreate struct {
	config
	mutation *ApplicationStatusHistoryMutation
	hooks    []Hook
}

// SetApplicationID sets the "application_id" field.
func (ashc *ApplicationStatusHistoryCreate) SetApplicationID(u uuid.UUID) *ApplicationStatusHistoryCreate {
	ashc.mutation.SetApplicationID(u)
	return ashc
}

// SetStatus sets the "status" field.
func (ashc *ApplicationStatusHistoryCreate) SetStatus(a applicationstatushistory.Status) *ApplicationStatusHistoryCreate {
	ashc.mutation.SetStatus(a)
	return ashc
}

// SetCreatedTime sets the "created_time" field.
func (ashc *ApplicationStatusHistoryCreate) SetCreatedTime(t time.Time) *ApplicationStatusHistoryCreate {
	ashc.mutation.SetCreatedTime(t)
	return ashc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (ashc *ApplicationStatusHistoryCreate) SetNillableCreatedTime(t *time.Time) *ApplicationStatusHistoryCreate {
	if t != nil {
		ashc.SetCreatedTime(*t)
	}
	return ashc
}

// SetApplicationsID sets the "applications" edge to the Application entity by ID.
func (ashc *ApplicationStatusHistoryCreate) SetApplicationsID(id uuid.UUID) *ApplicationStatusHistoryCreate {
	ashc.mutation.SetApplicationsID(id)
	return ashc
}

// SetApplications sets the "applications" edge to the Application entity.
func (ashc *ApplicationStatusHistoryCreate) SetApplications(a *Application) *ApplicationStatusHistoryCreate {
	return ashc.SetApplicationsID(a.ID)
}

// Mutation returns the ApplicationStatusHistoryMutation object of the builder.
func (ashc *ApplicationStatusHistoryCreate) Mutation() *ApplicationStatusHistoryMutation {
	return ashc.mutation
}

// Save creates the ApplicationStatusHistory in the database.
func (ashc *ApplicationStatusHistoryCreate) Save(ctx context.Context) (*ApplicationStatusHistory, error) {
	var (
		err  error
		node *ApplicationStatusHistory
	)
	ashc.defaults()
	if len(ashc.hooks) == 0 {
		if err = ashc.check(); err != nil {
			return nil, err
		}
		node, err = ashc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ApplicationStatusHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ashc.check(); err != nil {
				return nil, err
			}
			ashc.mutation = mutation
			if node, err = ashc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ashc.hooks) - 1; i >= 0; i-- {
			if ashc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ashc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ashc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ashc *ApplicationStatusHistoryCreate) SaveX(ctx context.Context) *ApplicationStatusHistory {
	v, err := ashc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ashc *ApplicationStatusHistoryCreate) Exec(ctx context.Context) error {
	_, err := ashc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ashc *ApplicationStatusHistoryCreate) ExecX(ctx context.Context) {
	if err := ashc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ashc *ApplicationStatusHistoryCreate) defaults() {
	if _, ok := ashc.mutation.CreatedTime(); !ok {
		v := applicationstatushistory.DefaultCreatedTime()
		ashc.mutation.SetCreatedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ashc *ApplicationStatusHistoryCreate) check() error {
	if _, ok := ashc.mutation.ApplicationID(); !ok {
		return &ValidationError{Name: "application_id", err: errors.New(`ent: missing required field "ApplicationStatusHistory.application_id"`)}
	}
	if _, ok := ashc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ApplicationStatusHistory.status"`)}
	}
	if v, ok := ashc.mutation.Status(); ok {
		if err := applicationstatushistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ApplicationStatusHistory.status": %w`, err)}
		}
	}
	if _, ok := ashc.mutation.CreatedTime(); !ok {
		return &ValidationError{Name: "created_time", err: errors.New(`ent: missing required field "ApplicationStatusHistory.created_time"`)}
	}
	if _, ok := ashc.mutation.ApplicationsID(); !ok {
		return &ValidationError{Name: "applications", err: errors.New(`ent: missing required edge "ApplicationStatusHistory.applications"`)}
	}
	return nil
}

func (ashc *ApplicationStatusHistoryCreate) sqlSave(ctx context.Context) (*ApplicationStatusHistory, error) {
	_node, _spec := ashc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ashc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ashc *ApplicationStatusHistoryCreate) createSpec() (*ApplicationStatusHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &ApplicationStatusHistory{config: ashc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: applicationstatushistory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: applicationstatushistory.FieldID,
			},
		}
	)
	if value, ok := ashc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: applicationstatushistory.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := ashc.mutation.CreatedTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: applicationstatushistory.FieldCreatedTime,
		})
		_node.CreatedTime = value
	}
	if nodes := ashc.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicationstatushistory.ApplicationsTable,
			Columns: []string{applicationstatushistory.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: application.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ApplicationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ApplicationStatusHistoryCreateBulk is the builder for creating many ApplicationStatusHistory entities in bulk.
type ApplicationStatusHistoryCreateBulk struct {
	config
	builders []*ApplicationStatusHistoryCreate
}

// Save creates the ApplicationStatusHistory entities in the database.
func (ashcb *ApplicationStatusHistoryCreateBulk) Save(ctx context.Context) ([]*ApplicationStatusHistory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ashcb.builders))
	nodes := make([]*ApplicationStatusHistory, len(ashcb.builders))
	mutators := make([]Mutator, len(ashcb.builders))
	for i := range ashcb.builders {
		func(i int, root context.Context) {
			builder := ashcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApplicationStatusHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ashcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ashcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ashcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ashcb *ApplicationStatusHistoryCreateBulk) SaveX(ctx context.Context) []*ApplicationStatusHistory {
	v, err := ashcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ashcb *ApplicationStatusHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := ashcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ashcb *ApplicationStatusHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := ashcb.Exec(ctx); err != nil {
		panic(err)
	}
}
