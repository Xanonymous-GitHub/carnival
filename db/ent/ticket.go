// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Xanonymous-GitHub/carnival/db/ent/application"
	"github.com/Xanonymous-GitHub/carnival/db/ent/schema"
	"github.com/Xanonymous-GitHub/carnival/db/ent/ticket"
	"github.com/google/uuid"
)

// Ticket is the model entity for the Ticket schema.
type Ticket struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// ApplicationID holds the value of the "application_id" field.
	ApplicationID uuid.UUID `json:"application_id,omitempty"`
	// Status holds the value of the "status" field.
	Status schema.TicketStatus `json:"status,omitempty"`
	// Creator holds the value of the "creator" field.
	Creator string `json:"creator,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Reply holds the value of the "reply" field.
	Reply string `json:"reply,omitempty"`
	// Replier holds the value of the "replier" field.
	Replier string `json:"replier,omitempty"`
	// Reviewer holds the value of the "reviewer" field.
	Reviewer string `json:"reviewer,omitempty"`
	// ReviewRemark holds the value of the "review_remark" field.
	ReviewRemark string `json:"review_remark,omitempty"`
	// RepliedDtime holds the value of the "replied_dtime" field.
	RepliedDtime time.Time `json:"replied_dtime,omitempty"`
	// ReviewedDtime holds the value of the "reviewed_dtime" field.
	ReviewedDtime time.Time `json:"reviewed_dtime,omitempty"`
	// CreatedDtime holds the value of the "created_dtime" field.
	CreatedDtime time.Time `json:"created_dtime,omitempty"`
	// UpdatedDtime holds the value of the "updated_dtime" field.
	UpdatedDtime time.Time `json:"updated_dtime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TicketQuery when eager-loading is set.
	Edges               TicketEdges `json:"edges"`
	application_tickets *uuid.UUID
}

// TicketEdges holds the relations/edges for other nodes in the graph.
type TicketEdges struct {
	// Applications holds the value of the applications edge.
	Applications *Application `json:"applications,omitempty"`
	// Attachments holds the value of the attachments edge.
	Attachments []*Attachment `json:"attachments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ApplicationsOrErr returns the Applications value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketEdges) ApplicationsOrErr() (*Application, error) {
	if e.loadedTypes[0] {
		if e.Applications == nil {
			// The edge applications was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: application.Label}
		}
		return e.Applications, nil
	}
	return nil, &NotLoadedError{edge: "applications"}
}

// AttachmentsOrErr returns the Attachments value or an error if the edge
// was not loaded in eager-loading.
func (e TicketEdges) AttachmentsOrErr() ([]*Attachment, error) {
	if e.loadedTypes[1] {
		return e.Attachments, nil
	}
	return nil, &NotLoadedError{edge: "attachments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ticket) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case ticket.FieldID:
			values[i] = new(sql.NullInt64)
		case ticket.FieldStatus, ticket.FieldCreator, ticket.FieldContent, ticket.FieldReply, ticket.FieldReplier, ticket.FieldReviewer, ticket.FieldReviewRemark:
			values[i] = new(sql.NullString)
		case ticket.FieldRepliedDtime, ticket.FieldReviewedDtime, ticket.FieldCreatedDtime, ticket.FieldUpdatedDtime:
			values[i] = new(sql.NullTime)
		case ticket.FieldApplicationID:
			values[i] = new(uuid.UUID)
		case ticket.ForeignKeys[0]: // application_tickets
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Ticket", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ticket fields.
func (t *Ticket) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ticket.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int32(value.Int64)
		case ticket.FieldApplicationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field application_id", values[i])
			} else if value != nil {
				t.ApplicationID = *value
			}
		case ticket.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = schema.TicketStatus(value.String)
			}
		case ticket.FieldCreator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value.Valid {
				t.Creator = value.String
			}
		case ticket.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				t.Content = value.String
			}
		case ticket.FieldReply:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reply", values[i])
			} else if value.Valid {
				t.Reply = value.String
			}
		case ticket.FieldReplier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field replier", values[i])
			} else if value.Valid {
				t.Replier = value.String
			}
		case ticket.FieldReviewer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reviewer", values[i])
			} else if value.Valid {
				t.Reviewer = value.String
			}
		case ticket.FieldReviewRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field review_remark", values[i])
			} else if value.Valid {
				t.ReviewRemark = value.String
			}
		case ticket.FieldRepliedDtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field replied_dtime", values[i])
			} else if value.Valid {
				t.RepliedDtime = value.Time
			}
		case ticket.FieldReviewedDtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field reviewed_dtime", values[i])
			} else if value.Valid {
				t.ReviewedDtime = value.Time
			}
		case ticket.FieldCreatedDtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_dtime", values[i])
			} else if value.Valid {
				t.CreatedDtime = value.Time
			}
		case ticket.FieldUpdatedDtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_dtime", values[i])
			} else if value.Valid {
				t.UpdatedDtime = value.Time
			}
		case ticket.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field application_tickets", values[i])
			} else if value.Valid {
				t.application_tickets = new(uuid.UUID)
				*t.application_tickets = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryApplications queries the "applications" edge of the Ticket entity.
func (t *Ticket) QueryApplications() *ApplicationQuery {
	return (&TicketClient{config: t.config}).QueryApplications(t)
}

// QueryAttachments queries the "attachments" edge of the Ticket entity.
func (t *Ticket) QueryAttachments() *AttachmentQuery {
	return (&TicketClient{config: t.config}).QueryAttachments(t)
}

// Update returns a builder for updating this Ticket.
// Note that you need to call Ticket.Unwrap() before calling this method if this Ticket
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Ticket) Update() *TicketUpdateOne {
	return (&TicketClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Ticket entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Ticket) Unwrap() *Ticket {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ticket is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Ticket) String() string {
	var builder strings.Builder
	builder.WriteString("Ticket(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", application_id=")
	builder.WriteString(fmt.Sprintf("%v", t.ApplicationID))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", creator=")
	builder.WriteString(t.Creator)
	builder.WriteString(", content=")
	builder.WriteString(t.Content)
	builder.WriteString(", reply=")
	builder.WriteString(t.Reply)
	builder.WriteString(", replier=")
	builder.WriteString(t.Replier)
	builder.WriteString(", reviewer=")
	builder.WriteString(t.Reviewer)
	builder.WriteString(", review_remark=")
	builder.WriteString(t.ReviewRemark)
	builder.WriteString(", replied_dtime=")
	builder.WriteString(t.RepliedDtime.Format(time.ANSIC))
	builder.WriteString(", reviewed_dtime=")
	builder.WriteString(t.ReviewedDtime.Format(time.ANSIC))
	builder.WriteString(", created_dtime=")
	builder.WriteString(t.CreatedDtime.Format(time.ANSIC))
	builder.WriteString(", updated_dtime=")
	builder.WriteString(t.UpdatedDtime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Tickets is a parsable slice of Ticket.
type Tickets []*Ticket

func (t Tickets) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
