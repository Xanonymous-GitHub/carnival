// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Xanonymous-GitHub/carnival/db/ent/reviewer"
	"github.com/Xanonymous-GitHub/carnival/db/ent/schema"
)

// Reviewer is the model entity for the Reviewer schema.
type Reviewer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ReviewerID holds the value of the "reviewer_id" field.
	ReviewerID string `json:"reviewer_id,omitempty"`
	// ReviewerName holds the value of the "reviewer_name" field.
	ReviewerName string `json:"reviewer_name,omitempty"`
	// IimsRole holds the value of the "iims_role" field.
	IimsRole schema.IIMSRole `json:"iims_role,omitempty"`
	// CreatedDtime holds the value of the "created_dtime" field.
	CreatedDtime time.Time `json:"created_dtime,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Reviewer) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case reviewer.FieldID:
			values[i] = new(sql.NullInt64)
		case reviewer.FieldReviewerID, reviewer.FieldReviewerName, reviewer.FieldIimsRole:
			values[i] = new(sql.NullString)
		case reviewer.FieldCreatedDtime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Reviewer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Reviewer fields.
func (r *Reviewer) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reviewer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case reviewer.FieldReviewerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reviewer_id", values[i])
			} else if value.Valid {
				r.ReviewerID = value.String
			}
		case reviewer.FieldReviewerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reviewer_name", values[i])
			} else if value.Valid {
				r.ReviewerName = value.String
			}
		case reviewer.FieldIimsRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field iims_role", values[i])
			} else if value.Valid {
				r.IimsRole = schema.IIMSRole(value.String)
			}
		case reviewer.FieldCreatedDtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_dtime", values[i])
			} else if value.Valid {
				r.CreatedDtime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Reviewer.
// Note that you need to call Reviewer.Unwrap() before calling this method if this Reviewer
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Reviewer) Update() *ReviewerUpdateOne {
	return (&ReviewerClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Reviewer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Reviewer) Unwrap() *Reviewer {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Reviewer is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Reviewer) String() string {
	var builder strings.Builder
	builder.WriteString("Reviewer(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", reviewer_id=")
	builder.WriteString(r.ReviewerID)
	builder.WriteString(", reviewer_name=")
	builder.WriteString(r.ReviewerName)
	builder.WriteString(", iims_role=")
	builder.WriteString(fmt.Sprintf("%v", r.IimsRole))
	builder.WriteString(", created_dtime=")
	builder.WriteString(r.CreatedDtime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Reviewers is a parsable slice of Reviewer.
type Reviewers []*Reviewer

func (r Reviewers) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
