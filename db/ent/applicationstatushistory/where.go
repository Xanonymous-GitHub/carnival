// Code generated by entc, DO NOT EDIT.

package applicationstatushistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Xanonymous-GitHub/carnival/db/ent/predicate"
	"github.com/Xanonymous-GitHub/carnival/db/ent/schema"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ApplicationID applies equality check predicate on the "application_id" field. It's identical to ApplicationIDEQ.
func ApplicationID(v uuid.UUID) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApplicationID), v))
	})
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedTime), v))
	})
}

// ApplicationIDEQ applies the EQ predicate on the "application_id" field.
func ApplicationIDEQ(v uuid.UUID) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApplicationID), v))
	})
}

// ApplicationIDNEQ applies the NEQ predicate on the "application_id" field.
func ApplicationIDNEQ(v uuid.UUID) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldApplicationID), v))
	})
}

// ApplicationIDIn applies the In predicate on the "application_id" field.
func ApplicationIDIn(vs ...uuid.UUID) predicate.ApplicationStatusHistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldApplicationID), v...))
	})
}

// ApplicationIDNotIn applies the NotIn predicate on the "application_id" field.
func ApplicationIDNotIn(vs ...uuid.UUID) predicate.ApplicationStatusHistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldApplicationID), v...))
	})
}

// ApplicationIDGT applies the GT predicate on the "application_id" field.
func ApplicationIDGT(v uuid.UUID) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldApplicationID), v))
	})
}

// ApplicationIDGTE applies the GTE predicate on the "application_id" field.
func ApplicationIDGTE(v uuid.UUID) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldApplicationID), v))
	})
}

// ApplicationIDLT applies the LT predicate on the "application_id" field.
func ApplicationIDLT(v uuid.UUID) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldApplicationID), v))
	})
}

// ApplicationIDLTE applies the LTE predicate on the "application_id" field.
func ApplicationIDLTE(v uuid.UUID) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldApplicationID), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v schema.TicketStatus) predicate.ApplicationStatusHistory {
	vc := v
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), vc))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v schema.TicketStatus) predicate.ApplicationStatusHistory {
	vc := v
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), vc))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...schema.TicketStatus) predicate.ApplicationStatusHistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...schema.TicketStatus) predicate.ApplicationStatusHistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedTime), v))
	})
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedTime), v))
	})
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.ApplicationStatusHistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedTime), v...))
	})
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.ApplicationStatusHistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedTime), v...))
	})
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedTime), v))
	})
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedTime), v))
	})
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedTime), v))
	})
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedTime), v))
	})
}

// HasApplications applies the HasEdge predicate on the "applications" edge.
func HasApplications() predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ApplicationsTable, ApplicationFieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ApplicationsTable, ApplicationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplicationsWith applies the HasEdge predicate on the "applications" edge with a given conditions (other predicates).
func HasApplicationsWith(preds ...predicate.Application) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ApplicationsInverseTable, ApplicationFieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ApplicationsTable, ApplicationsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ApplicationStatusHistory) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ApplicationStatusHistory) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ApplicationStatusHistory) predicate.ApplicationStatusHistory {
	return predicate.ApplicationStatusHistory(func(s *sql.Selector) {
		p(s.Not())
	})
}
