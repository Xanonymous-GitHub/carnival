// Code generated by entc, DO NOT EDIT.

package applicationassignmenthistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Xanonymous-GitHub/carnival/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ApplicationID applies equality check predicate on the "application_id" field. It's identical to ApplicationIDEQ.
func ApplicationID(v uuid.UUID) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApplicationID), v))
	})
}

// Assigner applies equality check predicate on the "assigner" field. It's identical to AssignerEQ.
func Assigner(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAssigner), v))
	})
}

// Assignee applies equality check predicate on the "assignee" field. It's identical to AssigneeEQ.
func Assignee(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAssignee), v))
	})
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedTime), v))
	})
}

// ApplicationIDEQ applies the EQ predicate on the "application_id" field.
func ApplicationIDEQ(v uuid.UUID) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApplicationID), v))
	})
}

// ApplicationIDNEQ applies the NEQ predicate on the "application_id" field.
func ApplicationIDNEQ(v uuid.UUID) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldApplicationID), v))
	})
}

// ApplicationIDIn applies the In predicate on the "application_id" field.
func ApplicationIDIn(vs ...uuid.UUID) predicate.ApplicationAssignmentHistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldApplicationID), v...))
	})
}

// ApplicationIDNotIn applies the NotIn predicate on the "application_id" field.
func ApplicationIDNotIn(vs ...uuid.UUID) predicate.ApplicationAssignmentHistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldApplicationID), v...))
	})
}

// ApplicationIDGT applies the GT predicate on the "application_id" field.
func ApplicationIDGT(v uuid.UUID) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldApplicationID), v))
	})
}

// ApplicationIDGTE applies the GTE predicate on the "application_id" field.
func ApplicationIDGTE(v uuid.UUID) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldApplicationID), v))
	})
}

// ApplicationIDLT applies the LT predicate on the "application_id" field.
func ApplicationIDLT(v uuid.UUID) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldApplicationID), v))
	})
}

// ApplicationIDLTE applies the LTE predicate on the "application_id" field.
func ApplicationIDLTE(v uuid.UUID) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldApplicationID), v))
	})
}

// AssignerEQ applies the EQ predicate on the "assigner" field.
func AssignerEQ(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAssigner), v))
	})
}

// AssignerNEQ applies the NEQ predicate on the "assigner" field.
func AssignerNEQ(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAssigner), v))
	})
}

// AssignerIn applies the In predicate on the "assigner" field.
func AssignerIn(vs ...string) predicate.ApplicationAssignmentHistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAssigner), v...))
	})
}

// AssignerNotIn applies the NotIn predicate on the "assigner" field.
func AssignerNotIn(vs ...string) predicate.ApplicationAssignmentHistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAssigner), v...))
	})
}

// AssignerGT applies the GT predicate on the "assigner" field.
func AssignerGT(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAssigner), v))
	})
}

// AssignerGTE applies the GTE predicate on the "assigner" field.
func AssignerGTE(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAssigner), v))
	})
}

// AssignerLT applies the LT predicate on the "assigner" field.
func AssignerLT(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAssigner), v))
	})
}

// AssignerLTE applies the LTE predicate on the "assigner" field.
func AssignerLTE(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAssigner), v))
	})
}

// AssignerContains applies the Contains predicate on the "assigner" field.
func AssignerContains(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAssigner), v))
	})
}

// AssignerHasPrefix applies the HasPrefix predicate on the "assigner" field.
func AssignerHasPrefix(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAssigner), v))
	})
}

// AssignerHasSuffix applies the HasSuffix predicate on the "assigner" field.
func AssignerHasSuffix(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAssigner), v))
	})
}

// AssignerEqualFold applies the EqualFold predicate on the "assigner" field.
func AssignerEqualFold(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAssigner), v))
	})
}

// AssignerContainsFold applies the ContainsFold predicate on the "assigner" field.
func AssignerContainsFold(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAssigner), v))
	})
}

// AssigneeEQ applies the EQ predicate on the "assignee" field.
func AssigneeEQ(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAssignee), v))
	})
}

// AssigneeNEQ applies the NEQ predicate on the "assignee" field.
func AssigneeNEQ(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAssignee), v))
	})
}

// AssigneeIn applies the In predicate on the "assignee" field.
func AssigneeIn(vs ...string) predicate.ApplicationAssignmentHistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAssignee), v...))
	})
}

// AssigneeNotIn applies the NotIn predicate on the "assignee" field.
func AssigneeNotIn(vs ...string) predicate.ApplicationAssignmentHistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAssignee), v...))
	})
}

// AssigneeGT applies the GT predicate on the "assignee" field.
func AssigneeGT(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAssignee), v))
	})
}

// AssigneeGTE applies the GTE predicate on the "assignee" field.
func AssigneeGTE(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAssignee), v))
	})
}

// AssigneeLT applies the LT predicate on the "assignee" field.
func AssigneeLT(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAssignee), v))
	})
}

// AssigneeLTE applies the LTE predicate on the "assignee" field.
func AssigneeLTE(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAssignee), v))
	})
}

// AssigneeContains applies the Contains predicate on the "assignee" field.
func AssigneeContains(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAssignee), v))
	})
}

// AssigneeHasPrefix applies the HasPrefix predicate on the "assignee" field.
func AssigneeHasPrefix(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAssignee), v))
	})
}

// AssigneeHasSuffix applies the HasSuffix predicate on the "assignee" field.
func AssigneeHasSuffix(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAssignee), v))
	})
}

// AssigneeEqualFold applies the EqualFold predicate on the "assignee" field.
func AssigneeEqualFold(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAssignee), v))
	})
}

// AssigneeContainsFold applies the ContainsFold predicate on the "assignee" field.
func AssigneeContainsFold(v string) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAssignee), v))
	})
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedTime), v))
	})
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedTime), v))
	})
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.ApplicationAssignmentHistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedTime), v...))
	})
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.ApplicationAssignmentHistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedTime), v...))
	})
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedTime), v))
	})
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedTime), v))
	})
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedTime), v))
	})
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedTime), v))
	})
}

// HasApplications applies the HasEdge predicate on the "applications" edge.
func HasApplications() predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ApplicationsTable, ApplicationFieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ApplicationsTable, ApplicationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplicationsWith applies the HasEdge predicate on the "applications" edge with a given conditions (other predicates).
func HasApplicationsWith(preds ...predicate.Application) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ApplicationsInverseTable, ApplicationFieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ApplicationsTable, ApplicationsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ApplicationAssignmentHistory) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ApplicationAssignmentHistory) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ApplicationAssignmentHistory) predicate.ApplicationAssignmentHistory {
	return predicate.ApplicationAssignmentHistory(func(s *sql.Selector) {
		p(s.Not())
	})
}
