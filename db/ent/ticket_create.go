// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Xanonymous-GitHub/carnival/db/ent/application"
	"github.com/Xanonymous-GitHub/carnival/db/ent/attachment"
	"github.com/Xanonymous-GitHub/carnival/db/ent/schema"
	"github.com/Xanonymous-GitHub/carnival/db/ent/ticket"
	"github.com/google/uuid"
)

// TicketCreate is the builder for creating a Ticket entity.
type TicketCreate struct {
	config
	mutation *TicketMutation
	hooks    []Hook
}

// SetApplicationID sets the "application_id" field.
func (tc *TicketCreate) SetApplicationID(u uuid.UUID) *TicketCreate {
	tc.mutation.SetApplicationID(u)
	return tc
}

// SetStatus sets the "status" field.
func (tc *TicketCreate) SetStatus(ss schema.TicketStatus) *TicketCreate {
	tc.mutation.SetStatus(ss)
	return tc
}

// SetCreator sets the "creator" field.
func (tc *TicketCreate) SetCreator(s string) *TicketCreate {
	tc.mutation.SetCreator(s)
	return tc
}

// SetContent sets the "content" field.
func (tc *TicketCreate) SetContent(s string) *TicketCreate {
	tc.mutation.SetContent(s)
	return tc
}

// SetReply sets the "reply" field.
func (tc *TicketCreate) SetReply(s string) *TicketCreate {
	tc.mutation.SetReply(s)
	return tc
}

// SetReplier sets the "replier" field.
func (tc *TicketCreate) SetReplier(s string) *TicketCreate {
	tc.mutation.SetReplier(s)
	return tc
}

// SetReviewer sets the "reviewer" field.
func (tc *TicketCreate) SetReviewer(s string) *TicketCreate {
	tc.mutation.SetReviewer(s)
	return tc
}

// SetReviewRemark sets the "review_remark" field.
func (tc *TicketCreate) SetReviewRemark(s string) *TicketCreate {
	tc.mutation.SetReviewRemark(s)
	return tc
}

// SetRepliedDtime sets the "replied_dtime" field.
func (tc *TicketCreate) SetRepliedDtime(t time.Time) *TicketCreate {
	tc.mutation.SetRepliedDtime(t)
	return tc
}

// SetReviewedDtime sets the "reviewed_dtime" field.
func (tc *TicketCreate) SetReviewedDtime(t time.Time) *TicketCreate {
	tc.mutation.SetReviewedDtime(t)
	return tc
}

// SetCreatedDtime sets the "created_dtime" field.
func (tc *TicketCreate) SetCreatedDtime(t time.Time) *TicketCreate {
	tc.mutation.SetCreatedDtime(t)
	return tc
}

// SetNillableCreatedDtime sets the "created_dtime" field if the given value is not nil.
func (tc *TicketCreate) SetNillableCreatedDtime(t *time.Time) *TicketCreate {
	if t != nil {
		tc.SetCreatedDtime(*t)
	}
	return tc
}

// SetUpdatedDtime sets the "updated_dtime" field.
func (tc *TicketCreate) SetUpdatedDtime(t time.Time) *TicketCreate {
	tc.mutation.SetUpdatedDtime(t)
	return tc
}

// SetID sets the "id" field.
func (tc *TicketCreate) SetID(i int32) *TicketCreate {
	tc.mutation.SetID(i)
	return tc
}

// SetApplicationsID sets the "applications" edge to the Application entity by ID.
func (tc *TicketCreate) SetApplicationsID(id uuid.UUID) *TicketCreate {
	tc.mutation.SetApplicationsID(id)
	return tc
}

// SetApplications sets the "applications" edge to the Application entity.
func (tc *TicketCreate) SetApplications(a *Application) *TicketCreate {
	return tc.SetApplicationsID(a.ID)
}

// AddAttachmentIDs adds the "attachments" edge to the Attachment entity by IDs.
func (tc *TicketCreate) AddAttachmentIDs(ids ...int) *TicketCreate {
	tc.mutation.AddAttachmentIDs(ids...)
	return tc
}

// AddAttachments adds the "attachments" edges to the Attachment entity.
func (tc *TicketCreate) AddAttachments(a ...*Attachment) *TicketCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tc.AddAttachmentIDs(ids...)
}

// Mutation returns the TicketMutation object of the builder.
func (tc *TicketCreate) Mutation() *TicketMutation {
	return tc.mutation
}

// Save creates the Ticket in the database.
func (tc *TicketCreate) Save(ctx context.Context) (*Ticket, error) {
	var (
		err  error
		node *Ticket
	)
	tc.defaults()
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TicketMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TicketCreate) SaveX(ctx context.Context) *Ticket {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TicketCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TicketCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TicketCreate) defaults() {
	if _, ok := tc.mutation.CreatedDtime(); !ok {
		v := ticket.DefaultCreatedDtime()
		tc.mutation.SetCreatedDtime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TicketCreate) check() error {
	if _, ok := tc.mutation.ApplicationID(); !ok {
		return &ValidationError{Name: "application_id", err: errors.New(`ent: missing required field "Ticket.application_id"`)}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Ticket.status"`)}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := ticket.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Ticket.status": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Creator(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`ent: missing required field "Ticket.creator"`)}
	}
	if v, ok := tc.mutation.Creator(); ok {
		if err := ticket.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`ent: validator failed for field "Ticket.creator": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Ticket.content"`)}
	}
	if _, ok := tc.mutation.Reply(); !ok {
		return &ValidationError{Name: "reply", err: errors.New(`ent: missing required field "Ticket.reply"`)}
	}
	if _, ok := tc.mutation.Replier(); !ok {
		return &ValidationError{Name: "replier", err: errors.New(`ent: missing required field "Ticket.replier"`)}
	}
	if v, ok := tc.mutation.Replier(); ok {
		if err := ticket.ReplierValidator(v); err != nil {
			return &ValidationError{Name: "replier", err: fmt.Errorf(`ent: validator failed for field "Ticket.replier": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Reviewer(); !ok {
		return &ValidationError{Name: "reviewer", err: errors.New(`ent: missing required field "Ticket.reviewer"`)}
	}
	if v, ok := tc.mutation.Reviewer(); ok {
		if err := ticket.ReviewerValidator(v); err != nil {
			return &ValidationError{Name: "reviewer", err: fmt.Errorf(`ent: validator failed for field "Ticket.reviewer": %w`, err)}
		}
	}
	if _, ok := tc.mutation.ReviewRemark(); !ok {
		return &ValidationError{Name: "review_remark", err: errors.New(`ent: missing required field "Ticket.review_remark"`)}
	}
	if _, ok := tc.mutation.RepliedDtime(); !ok {
		return &ValidationError{Name: "replied_dtime", err: errors.New(`ent: missing required field "Ticket.replied_dtime"`)}
	}
	if _, ok := tc.mutation.ReviewedDtime(); !ok {
		return &ValidationError{Name: "reviewed_dtime", err: errors.New(`ent: missing required field "Ticket.reviewed_dtime"`)}
	}
	if _, ok := tc.mutation.CreatedDtime(); !ok {
		return &ValidationError{Name: "created_dtime", err: errors.New(`ent: missing required field "Ticket.created_dtime"`)}
	}
	if _, ok := tc.mutation.UpdatedDtime(); !ok {
		return &ValidationError{Name: "updated_dtime", err: errors.New(`ent: missing required field "Ticket.updated_dtime"`)}
	}
	if _, ok := tc.mutation.ApplicationsID(); !ok {
		return &ValidationError{Name: "applications", err: errors.New(`ent: missing required edge "Ticket.applications"`)}
	}
	return nil
}

func (tc *TicketCreate) sqlSave(ctx context.Context) (*Ticket, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	return _node, nil
}

func (tc *TicketCreate) createSpec() (*Ticket, *sqlgraph.CreateSpec) {
	var (
		_node = &Ticket{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ticket.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: ticket.FieldID,
			},
		}
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.ApplicationID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: ticket.FieldApplicationID,
		})
		_node.ApplicationID = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: ticket.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := tc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticket.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := tc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticket.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := tc.mutation.Reply(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticket.FieldReply,
		})
		_node.Reply = value
	}
	if value, ok := tc.mutation.Replier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticket.FieldReplier,
		})
		_node.Replier = value
	}
	if value, ok := tc.mutation.Reviewer(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticket.FieldReviewer,
		})
		_node.Reviewer = value
	}
	if value, ok := tc.mutation.ReviewRemark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ticket.FieldReviewRemark,
		})
		_node.ReviewRemark = value
	}
	if value, ok := tc.mutation.RepliedDtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ticket.FieldRepliedDtime,
		})
		_node.RepliedDtime = value
	}
	if value, ok := tc.mutation.ReviewedDtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ticket.FieldReviewedDtime,
		})
		_node.ReviewedDtime = value
	}
	if value, ok := tc.mutation.CreatedDtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ticket.FieldCreatedDtime,
		})
		_node.CreatedDtime = value
	}
	if value, ok := tc.mutation.UpdatedDtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ticket.FieldUpdatedDtime,
		})
		_node.UpdatedDtime = value
	}
	if nodes := tc.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   ticket.ApplicationsTable,
			Columns: []string{ticket.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: application.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.application_tickets = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.AttachmentsTable,
			Columns: []string{ticket.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: attachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TicketCreateBulk is the builder for creating many Ticket entities in bulk.
type TicketCreateBulk struct {
	config
	builders []*TicketCreate
}

// Save creates the Ticket entities in the database.
func (tcb *TicketCreateBulk) Save(ctx context.Context) ([]*Ticket, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Ticket, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TicketMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TicketCreateBulk) SaveX(ctx context.Context) []*Ticket {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TicketCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TicketCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
