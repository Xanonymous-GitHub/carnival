// Code generated by entc, DO NOT EDIT.

package ticket

import (
	"fmt"
	"time"

	"github.com/Xanonymous-GitHub/carnival/db/ent/schema"
)

const (
	// Label holds the string label denoting the ticket type in the database.
	Label = "ticket"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "ticket_id"
	// FieldApplicationID holds the string denoting the application_id field in the database.
	FieldApplicationID = "application_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldReply holds the string denoting the reply field in the database.
	FieldReply = "reply"
	// FieldReplier holds the string denoting the replier field in the database.
	FieldReplier = "replier"
	// FieldReviewer holds the string denoting the reviewer field in the database.
	FieldReviewer = "reviewer"
	// FieldReviewRemark holds the string denoting the review_remark field in the database.
	FieldReviewRemark = "review_remark"
	// FieldRepliedDtime holds the string denoting the replied_dtime field in the database.
	FieldRepliedDtime = "replied_dtime"
	// FieldReviewedDtime holds the string denoting the reviewed_dtime field in the database.
	FieldReviewedDtime = "reviewed_dtime"
	// FieldCreatedDtime holds the string denoting the created_dtime field in the database.
	FieldCreatedDtime = "created_dtime"
	// FieldUpdatedDtime holds the string denoting the updated_dtime field in the database.
	FieldUpdatedDtime = "updated_dtime"
	// EdgeApplications holds the string denoting the applications edge name in mutations.
	EdgeApplications = "applications"
	// EdgeAttachments holds the string denoting the attachments edge name in mutations.
	EdgeAttachments = "attachments"
	// ApplicationFieldID holds the string denoting the ID field of the Application.
	ApplicationFieldID = "application_id"
	// AttachmentFieldID holds the string denoting the ID field of the Attachment.
	AttachmentFieldID = "id"
	// Table holds the table name of the ticket in the database.
	Table = "tickets"
	// ApplicationsTable is the table that holds the applications relation/edge.
	ApplicationsTable = "tickets"
	// ApplicationsInverseTable is the table name for the Application entity.
	// It exists in this package in order to avoid circular dependency with the "application" package.
	ApplicationsInverseTable = "applications"
	// ApplicationsColumn is the table column denoting the applications relation/edge.
	ApplicationsColumn = "application_tickets"
	// AttachmentsTable is the table that holds the attachments relation/edge.
	AttachmentsTable = "attachments"
	// AttachmentsInverseTable is the table name for the Attachment entity.
	// It exists in this package in order to avoid circular dependency with the "attachment" package.
	AttachmentsInverseTable = "attachments"
	// AttachmentsColumn is the table column denoting the attachments relation/edge.
	AttachmentsColumn = "ticket_attachments"
)

// Columns holds all SQL columns for ticket fields.
var Columns = []string{
	FieldID,
	FieldApplicationID,
	FieldStatus,
	FieldCreator,
	FieldContent,
	FieldReply,
	FieldReplier,
	FieldReviewer,
	FieldReviewRemark,
	FieldRepliedDtime,
	FieldReviewedDtime,
	FieldCreatedDtime,
	FieldUpdatedDtime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tickets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"application_tickets",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// CreatorValidator is a validator for the "creator" field. It is called by the builders before save.
	CreatorValidator func(string) error
	// ReplierValidator is a validator for the "replier" field. It is called by the builders before save.
	ReplierValidator func(string) error
	// ReviewerValidator is a validator for the "reviewer" field. It is called by the builders before save.
	ReviewerValidator func(string) error
	// DefaultCreatedDtime holds the default value on creation for the "created_dtime" field.
	DefaultCreatedDtime func() time.Time
)

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s schema.TicketStatus) error {
	switch s {
	case "created", "replied", "completed":
		return nil
	default:
		return fmt.Errorf("ticket: invalid enum value for status field: %q", s)
	}
}
